<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/3eeb.html"/>
      <url>/posts/3eeb.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Markdown使用</title>
      <link href="/posts/e4e.html"/>
      <url>/posts/e4e.html</url>
      
        <content type="html"><![CDATA[<h1 id="Markdown使用"><a href="#Markdown使用" class="headerlink" title="Markdown使用"></a>Markdown使用</h1><h2 id="Markdown是什么？"><a href="#Markdown是什么？" class="headerlink" title="Markdown是什么？"></a>Markdown是什么？</h2><p><strong>Markdown</strong>是一种轻量级<strong>标记语言</strong>，它以纯文本形式(<em>易读、易写、易更改</em>)编写文档，并最终以HTML格式发布。<br><strong>Markdown</strong>也可以理解为将以MARKDOWN语法编写的语言转换成HTML内容的工具。</p><h3 id="谁创造了它？"><a href="#谁创造了它？" class="headerlink" title="谁创造了它？"></a><em>谁</em>创造了它？</h3><p>它由<a href="http://www.aaronsw.com/"><strong>Aaron Swartz</strong></a>和<strong>John Gruber</strong>共同设计，<strong>Aaron Swartz</strong>是一位有着<strong>开挂</strong>一般人生经历的程序员。维基百科对他的<a href="http://zh.wikipedia.org/wiki/%E4%BA%9A%E4%BC%A6%C2%B7%E6%96%AF%E6%B2%83%E8%8C%A8">介绍</a>是：<strong>软件工程师、作家、政治组织者、互联网活动家、维基百科人</strong>。</p><p>他有着足以让你跪拜的人生经历：</p><ul><li><strong>14岁</strong>参与RSS 1.0规格标准的制订。</li><li><strong>2004</strong>年入读<strong>斯坦福</strong>，之后退学。</li><li><strong>2005</strong>年创建<a href="http://infogami.org/">Infogami</a>，之后与<a href="http://www.reddit.com/">Reddit</a>合并成为其合伙人。</li><li><strong>2010</strong>年创立求进会（Demand Progress），积极参与禁止网络盗版法案（SOPA）活动，最终该提案被撤回。</li><li><strong>2011</strong>年7月19日，因被控从MIT和JSTOR下载480万篇学术论文并以免费形式上传于网络被捕。</li><li><strong>2013</strong>年1月自杀身亡。<img src="https://github.com/younghz/Markdown/raw/master/resource/Aaron_Swartz.jpg" alt="Aaron Swartz"></li></ul><h3 id="为什么要使用它？"><a href="#为什么要使用它？" class="headerlink" title="为什么要使用它？"></a><em>为什么</em>要使用它？</h3><ul><li>它是易读（看起来舒服）、易写（语法简单）、易更改<strong>纯文本</strong>。处处体现着<strong>极简主义</strong>的影子。</li><li>兼容HTML，可以转换为HTML格式发布。</li><li>跨平台使用。</li><li>越来越多的网站支持Markdown。</li><li>更方便清晰地组织你的电子邮件。（Markdown-here, Airmail）</li><li>摆脱Word（我不是认真的）。</li></ul><hr><h2 id="尝试一下"><a href="#尝试一下" class="headerlink" title="尝试一下"></a>尝试一下</h2><h3 id="斜体和粗体"><a href="#斜体和粗体" class="headerlink" title="斜体和粗体"></a>斜体和粗体</h3><pre><code>*斜体*或_斜体_**粗体*****加粗斜体***~~删除线~~</code></pre><p>view</p><p><em>斜体</em>或<em>斜体</em></p><p><strong>粗体</strong></p><p>*<strong>加粗斜体*</strong></p><p><del>删除线</del></p><h3 id="分级标题"><a href="#分级标题" class="headerlink" title="分级标题"></a>分级标题</h3><pre><code># 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题</code></pre><h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><p>Markdown 支持两种形式的链接语法： 行内式和参考式两种形式，行内式一般使用较多。</p><h4 id="行内式"><a href="#行内式" class="headerlink" title="行内式"></a>行内式</h4><p>语法说明：</p><p>[]里写链接文字，里写链接地址, 中的<code>”“</code>中可以为链接指定title属性，title属性可加可不加。title属性的效果是鼠标悬停在链接上会出现指定的 title文字。链接地址与链接标题前有一个空格。</p><pre class=" language-markdown"><code class="language-markdown">欢迎来到<span class="token url">[wakenhong's blog](https://wakenhong.zone)</span>欢迎来到<span class="token url">[wakenhong's blog](https://wakenhong <span class="token string">"wakenhong's blog"</span>)</span></code></pre><p>view</p><p>欢迎来到<a href="http://wakenhong.zone/">wakenhong’s blog</a></p><p>欢迎来到<a href="http://wakenhong.zone/">wakenhong’s blog</a></p><h4 id="参考式"><a href="#参考式" class="headerlink" title="参考式"></a>参考式</h4><p>参考式超链接一般用在学术论文上面，或者另一种情况，如果某一个链接在文章中多处使用，那么使用引用 的方式创建链接将非常好，它可以让你对链接进行统一的管理。</p><p>语法说明：<br>参考式链接分为两部分，文中的写法 [链接文字][链接标记]，在文本的任意位置添加[链接标记]:链接地址 “链接标题”，链接地址与链接标题前有一个空格。</p><p>如果链接文字本身可以做为链接标记，你也可以写成[链接文字][]<br>[链接文字]：链接地址的形式，见代码的最后一行。</p><pre><code>我经常去的几个网站[Google][1],[YouTube][2],[YouTube][]。[1]:http://www.google.com[2]:https://www.youtube.com "YouTube"[YouTube]:https://www.youtube.com</code></pre><p>我经常去的几个网站<a href="http://www.google.com/">Google</a>,<a href="https://www.youtube.com/">YouTube</a>,<a href="https://www.youtube.com/">YouTube</a>。</p><h4 id="自动链接"><a href="#自动链接" class="headerlink" title="自动链接"></a>自动链接</h4><p>语法说明：<br>Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用&lt;&gt;包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如：</p><pre class=" language-markdown"><code class="language-markdown">&lt;http://example.com/><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>address@example.com</span><span class="token punctuation">></span></span></code></pre><p>view</p><p><a href="http://example.com/">http://example.com/</a><br><a href="mailto:address@example.com">address@example.com</a></p><hr><h4 id="锚点"><a href="#锚点" class="headerlink" title="锚点"></a>锚点</h4><p>网页中，锚点其实就是页内超链接，也就是链接本文档内部的某些元素，实现当前页面中的跳转。比如我这里写下一个锚点，点击回到目录，就能跳转到目录。 在目录中点击这一节，就能跳过来。还有下一节的注脚。这些根本上都是用锚点来实现的。</p><p>注意：</p><ol><li>Markdown Extra 只支持在标题后插入锚点，其它地方无效。</li><li>Leanote 编辑器右侧显示效果区域暂时不支持锚点跳转，所以点来点去发现没有跳转不必惊慌，但是你发布成笔记或博文后是支持跳转的。</li></ol><pre class=" language-markdown"><code class="language-markdown"> 跳转测试{#toc-heading-18}</code></pre><p>跳转到<a href="https://liyangzone.com/2019/07/17/markdown%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/#toc-heading-18">页尾</a>，这个有点问题，会跳转到新标签页的页尾，因为hexo会在生成的a标签上加上<code>target="_blank"</code>这个属性，暂时无法解决</p><hr><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><p>有序列表则使用数字接着一个英文句点。</p><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">1.</span> 有序列表项 一<span class="token list punctuation">2.</span> 有序列表项 二<span class="token list punctuation">3.</span> 有序列表项 三</code></pre><p>view</p><ol><li>有序列表项 一</li><li>有序列表项 二</li><li>有序列表项 三</li></ol><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><p>使用 *，+，- 表示无序列表。</p><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">-</span> 无序列表项 一<span class="token list punctuation">-</span> 无序列表项 二<span class="token list punctuation">-</span> 无序列表项 三</code></pre><p>view</p><ul><li>无序列表项 一</li><li>无序列表项 二</li><li>无序列表项 三</li></ul><h4 id="定义型列表"><a href="#定义型列表" class="headerlink" title="定义型列表"></a>定义型列表</h4><p>语法说明：</p><p>定义型列表由名词和解释组成。一行写上定义，紧跟一行写上解释。解释的写法:紧跟一个缩进TabTab</p><pre class=" language-markdown"><code class="language-markdown">代码块 1 Markdown:    轻量级文本标记语言，可以转换成html，pdf等格式（左侧有一个可见的冒号和四个不可见的空格）代码块 2:   这是代码块的定义（左侧有一个可见的冒号和四个不可见的空格）<span class="token code keyword">        代码块（左侧有八个不可见的空格）</span></code></pre><p>view</p><ul><li><p>代码块 1 Markdown</p><p>轻量级文本标记语言，可以转换成html，pdf等格式（左侧有一个可见的冒号和四个不可见的空格）</p></li><li><p>代码块 2</p><p>这是代码块的定义（左侧有一个可见的冒号和四个不可见的空格）</p></li></ul><pre><code>    代码块（左侧有八个不可见的空格）</code></pre><h4 id="列表缩进"><a href="#列表缩进" class="headerlink" title="列表缩进"></a>列表缩进</h4><p>语法说明：</p><p>列表项目标记通常是放在最左边，但是其实也可以缩进，最多 3 个空格，项目标记后面则一定要接着至少一个空格或制表符。</p><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">*</span>   轻轻的我走了， 正如我轻轻的来； 我轻轻的招手， 作别西天的云彩。那河畔的金柳， 是夕阳中的新娘； 波光里的艳影， 在我的心头荡漾。 软泥上的青荇， 油油的在水底招摇； 在康河的柔波里， 我甘心做一条水草！ <span class="token list punctuation">*</span>   那榆荫下的一潭， 不是清泉， 是天上虹； 揉碎在浮藻间， 沉淀着彩虹似的梦。 寻梦？撑一支长篙， 向青草更青处漫溯； 满载一船星辉， 在星辉斑斓里放歌。 但我不能放歌， 悄悄是别离的笙箫； 夏虫也为我沉默， 沉默是今晚的康桥！ 悄悄的我走了， 正如我悄悄的来； 我挥一挥衣袖， 不带走一片云彩。</code></pre><p>view</p><ul><li>轻轻的我走了， 正如我轻轻的来； 我轻轻的招手， 作别西天的云彩。<br>那河畔的金柳， 是夕阳中的新娘； 波光里的艳影， 在我的心头荡漾。<br>软泥上的青荇， 油油的在水底招摇； 在康河的柔波里， 我甘心做一条水草！</li><li>那榆荫下的一潭， 不是清泉， 是天上虹； 揉碎在浮藻间， 沉淀着彩虹似的梦。<br>寻梦？撑一支长篙， 向青草更青处漫溯； 满载一船星辉， 在星辉斑斓里放歌。<br>但我不能放歌， 悄悄是别离的笙箫； 夏虫也为我沉默， 沉默是今晚的康桥！<br>悄悄的我走了， 正如我悄悄的来； 我挥一挥衣袖， 不带走一片云彩。</li></ul><h4 id="包含段落的列表"><a href="#包含段落的列表" class="headerlink" title="包含段落的列表"></a>包含段落的列表</h4><p>语法说明：</p><p>列表项目可以包含多个段落，每个项目下的段落都必须缩进 4 个空格或是 1 个制表符（显示效果与代码一致）：</p><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">*</span>   轻轻的我走了， 正如我轻轻的来； 我轻轻的招手， 作别西天的云彩。那河畔的金柳， 是夕阳中的新娘； 波光里的艳影， 在我的心头荡漾。 软泥上的青荇， 油油的在水底招摇； 在康河的柔波里， 我甘心做一条水草！<span class="token code keyword">     那榆荫下的一潭， 不是清泉， 是天上虹； 揉碎在浮藻间， 沉淀着彩虹似的梦。 </span>寻梦？撑一支长篙， 向青草更青处漫溯； 满载一船星辉， 在星辉斑斓里放歌。 但我不能放歌， 悄悄是别离的笙箫； 夏虫也为我沉默， 沉默是今晚的康桥！<span class="token list punctuation">*</span>    悄悄的我走了， 正如我悄悄的来； 我挥一挥衣袖， 不带走一片云彩。</code></pre><p>view</p><ul><li><p>轻轻的我走了， 正如我轻轻的来； 我轻轻的招手， 作别西天的云彩。<br>那河畔的金柳， 是夕阳中的新娘； 波光里的艳影， 在我的心头荡漾。<br>软泥上的青荇， 油油的在水底招摇； 在康河的柔波里， 我甘心做一条水草！</p><p>那榆荫下的一潭， 不是清泉， 是天上虹； 揉碎在浮藻间， 沉淀着彩虹似的梦。<br>寻梦？撑一支长篙， 向青草更青处漫溯； 满载一船星辉， 在星辉斑斓里放歌。<br>但我不能放歌， 悄悄是别离的笙箫； 夏虫也为我沉默， 沉默是今晚的康桥！</p></li><li><p>悄悄的我走了， 正如我悄悄的来； 我挥一挥衣袖， 不带走一片云彩。</p></li></ul><h4 id="包含引用的列表"><a href="#包含引用的列表" class="headerlink" title="包含引用的列表"></a>包含引用的列表</h4><p>语法说明：</p><p>如果要在列表项目内放进引用，那 &gt; 就需要缩进：</p><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">*</span>   阅读的方法:<span class="token code keyword">    > 打开书本。</span><span class="token code keyword">    > 打开电灯。</span></code></pre><p>view</p><ul><li><p>阅读的方法:</p><blockquote><p>打开书本。<br>打开电灯。</p></blockquote></li></ul><h4 id="包含代码区块的引用"><a href="#包含代码区块的引用" class="headerlink" title="包含代码区块的引用"></a>包含代码区块的引用</h4><p>语法说明：<br>如果要放代码区块的话，该区块就需要缩进两次，也就是 8 个空格或是 2 个制表符：</p><h4 id="一个特殊情况"><a href="#一个特殊情况" class="headerlink" title="一个特殊情况"></a>一个特殊情况</h4><p>在特殊情况下，项目列表很可能会不小心产生，像是下面这样的写法：</p><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">1986.</span> What a great season.</code></pre><p>会显示成：</p><ol><li>What a great season.</li></ol><p>换句话说，也就是在行首出现数字-句点-空白，要避免这样的状况，你可以在句点前面加上反斜杠：</p><pre class=" language-markdown"><code class="language-markdown">1986\. What a great season.</code></pre><p>才会正常显示成：</p><p>\1986. What a great season.</p><hr><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>语法说明：</p><p>引用需要在被引用的文本前加上&gt;符号。</p><pre class=" language-markdown"><code class="language-markdown"><span class="token blockquote punctuation">></span> 这是一个有两段文字的引用,无意义的占行文字1.无意义的占行文字2.<span class="token blockquote punctuation">></span> 无意义的占行文字3.无意义的占行文字4.</code></pre><p>view</p><blockquote><p>这是一个有两段文字的引用,<br>无意义的占行文字1.<br>无意义的占行文字2.</p></blockquote><blockquote><p>无意义的占行文字3.<br>无意义的占行文字4.</p></blockquote><h4 id="引用的多层嵌套"><a href="#引用的多层嵌套" class="headerlink" title="引用的多层嵌套"></a>引用的多层嵌套</h4><p>区块引用可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的 &gt; ：</p><pre class=" language-markdown"><code class="language-markdown"><span class="token blockquote punctuation">>>></span> 请问 Markdwon 怎么用？ - 小白<span class="token blockquote punctuation">>></span> 自己看教程！ - 愤青<span class="token blockquote punctuation">></span> 教程在哪？ - 小白</code></pre><blockquote><blockquote><blockquote><p>请问 Markdwon 怎么用？ - 小白</p></blockquote></blockquote></blockquote><blockquote><blockquote><p>自己看教程！ - 愤青</p></blockquote></blockquote><blockquote><p>教程在哪？ - 小白</p></blockquote><h4 id="引用其它要素"><a href="#引用其它要素" class="headerlink" title="引用其它要素"></a>引用其它要素</h4><p>引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等：</p><pre class=" language-markdown"><code class="language-markdown"><span class="token blockquote punctuation">></span> <span class="token list punctuation">1.</span>   这是第一行列表项。<span class="token blockquote punctuation">></span> <span class="token list punctuation">2.</span>   这是第二行列表项。<span class="token blockquote punctuation">></span> <span class="token blockquote punctuation">></span> 给出一些例子代码：<span class="token blockquote punctuation">></span> <span class="token blockquote punctuation">></span><span class="token code keyword">     return shell_exec("echo $input | $markdown_script");</span></code></pre><blockquote><ol><li>这是第一行列表项。</li><li>这是第二行列表项。</li></ol><p>给出一些例子代码：</p><pre><code>return shell_exec("echo $input | $markdown_script");</code></pre></blockquote><hr><h3 id="插入图像"><a href="#插入图像" class="headerlink" title="插入图像"></a>插入图像</h3><h4 id="行内式-1"><a href="#行内式-1" class="headerlink" title="行内式"></a>行内式</h4><p>图片的创建方式与超链接相似，而且和超链接一样也有两种写法，行内式和参考式写法。</p><p>语法中图片Alt的意思是如果图片因为某些原因不能显示，就用定义的图片Alt文字来代替图片。 图片Title则和链接中的Title一样，表示鼠标悬停与图片上时出现的文字。 Alt 和 Title 都不是必须的，可以省略，但建议写上</p><p>语法说明：![图片Alt]图片地址“图片Title”</p><pre class=" language-markdown"><code class="language-markdown">美丽风景： <span class="token url">![美丽风景](https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/110404-152108304476cb.jpg <span class="token string">"美丽风景"</span>)</span></code></pre><img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/110404-152108304476cb.jpg" alt="美丽风景" style="zoom:150%;"><h4 id="参考式-1"><a href="#参考式-1" class="headerlink" title="参考式"></a>参考式</h4><p>语法说明：</p><p>在文档要插入图片的地方写![图片Alt][标记]</p><p>在文档的最后写上[标记]:图片地址 “Title”</p><pre class=" language-markdown"><code class="language-markdown"><span class="token url">![美丽风景](https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/110404-152108304476cb.jpg <span class="token string">"美丽风景"</span>)</span>[scenery]:https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/110404-152108304476cb.jpg "美丽风景"</code></pre><p>view</p><img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/110404-152108304476cb.jpg" alt="美丽风景" style="zoom:150%;"><h3 id="内容目录"><a href="#内容目录" class="headerlink" title="内容目录"></a>内容目录</h3><p>在段落中填写 [TOC] 以显示全文内容的目录结构。</p><p>效果参见最上方的目录</p><p>[TOC]</p><h3 id="注脚"><a href="#注脚" class="headerlink" title="注脚"></a>注脚</h3><p>语法说明：</p><p>在需要添加注脚的文字后加上脚注名字[^注脚名字],称为加注。 然后在文本的任意位置一般在最后一般在最后添加脚注，脚注前必须有对应的脚注名字。</p><p>注意：经测试注脚与注脚之间必须空一行，不然会失效。成功后会发现，即使你没有把注脚写在文末，经Markdown转换后，也会自动归类到文章的最后。</p><pre class=" language-markdown"><code class="language-markdown">使用 Markdown[^1]可以效率的书写文档, 直接转换成 HTML[^2], 你可以使用 Leanote[^Le] 编辑器进行书写。[^1]:Markdown是一种纯文本标记语言[^2]:HyperText Markup Language 超文本标记语言[^Le]:开源笔记平台，支持Markdown和笔记直接发为博文</code></pre><p>view</p><p>使用 Markdown<a href="https://liyangzone.com/2019/07/17/markdown%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/Markdown%E6%98%AF%E4%B8%80%E7%A7%8D%E7%BA%AF%E6%96%87%E6%9C%AC%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80">^1</a>可以效率的书写文档, 直接转换成 HTML[^2], 你可以使用 Leanote<a href="https://liyangzone.com/2019/07/17/markdown%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/%E5%BC%80%E6%BA%90%E7%AC%94%E8%AE%B0%E5%B9%B3%E5%8F%B0%EF%BC%8C%E6%94%AF%E6%8C%81Markdown%E5%92%8C%E7%AC%94%E8%AE%B0%E7%9B%B4%E6%8E%A5%E5%8F%91%E4%B8%BA%E5%8D%9A%E6%96%87">^Le</a> 编辑器进行书写。</p><p>[^2]: HyperText Markup Language 超文本标记语言</p><p>注：脚注自动被搬运到最后面，请到文章末尾查看，并且脚注后方的链接可以直接跳转回到加注的地方</p><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><h4 id="表格-1"><a href="#表格-1" class="headerlink" title="表格"></a>表格</h4><p>语法说明：</p><p>不管是哪种方式，第一行为表头，第二行分隔表头和主体部分，第三行开始每一行为一个表格行。<br>列于列之间用管道符|隔开。原生方式的表格每一行的两边也要有管道符。<br>第二行还可以为不同的列指定对齐方向。默认为左对齐，在-右边加上:就右对齐。</p><ol><li>简单方式写表格：</li></ol><pre class=" language-markdown"><code class="language-markdown">学号|姓名|分数-|-|-小明|男|75小红|女|79小陆|男|92</code></pre><p>2.原生方式写表格：</p><pre class=" language-markdown"><code class="language-markdown">|学号|姓名|分数||-|-|-||小明|男|75||小红|女|79||小陆|男|92|</code></pre><p>3.为表格第二列指定方向：</p><pre class=" language-markdown"><code class="language-markdown">产品|价格-|-:Leanote 高级账号|60元/年Leanote 超级账号|120元/年</code></pre><p>view</p><ol><li>简单方式写表格：</li></ol><table><thead><tr><th align="left">学号</th><th align="left">姓名</th><th align="left">分数</th></tr></thead><tbody><tr><td align="left">小明</td><td align="left">男</td><td align="left">75</td></tr><tr><td align="left">小红</td><td align="left">女</td><td align="left">79</td></tr><tr><td align="left">小陆</td><td align="left">男</td><td align="left">92</td></tr></tbody></table><p>2.原生方式写表格：</p><table><thead><tr><th align="left">学号</th><th align="left">姓名</th><th align="left">分数</th></tr></thead><tbody><tr><td align="left">小明</td><td align="left">男</td><td align="left">75</td></tr><tr><td align="left">小红</td><td align="left">女</td><td align="left">79</td></tr><tr><td align="left">小陆</td><td align="left">男</td><td align="left">92</td></tr></tbody></table><p>3.为表格第二列指定方向：</p><table><thead><tr><th align="left">产品</th><th align="left">价格</th></tr></thead><tbody><tr><td align="left">Leanote 高级账号</td><td align="left">60元/年</td></tr><tr><td align="left">Leanote 超级账号</td><td align="left">120元/年</td></tr></tbody></table><h3 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h3><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p><pre class=" language-markdown"><code class="language-markdown"><span class="token hr punctuation">* * *</span><span class="token hr punctuation">***</span><span class="token hr punctuation">*****</span><span class="token hr punctuation">- - -</span><span class="token hr punctuation">---------------------------------------</span></code></pre><p>显示效果都一样</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>对于程序员来说这个功能是必不可少的，插入程序代码的方式有两种，一种是利用缩进TabTab, 另一种是利用”`”符号（一般在ESC键下方）包裹代码。</p><p>语法说明：</p><ol><li>插入行内代码，即插入一个单词或者一句代码的情况，使用<code>code</code>这样的形式插入。</li><li>插入多行代码，可以使用缩进或者“<code>code “</code>,具体看示例</li></ol><p><strong>注意： 缩进式插入前方必须有空行</strong></p><h4 id="行内式-2"><a href="#行内式-2" class="headerlink" title="行内式"></a>行内式</h4><pre><code>C语言里的函数 `scanf()` 怎么使用？</code></pre><p>view<br>C语言里的函数 <code>scanf()</code> 怎么使用？</p><h4 id="缩进式多行代码"><a href="#缩进式多行代码" class="headerlink" title="缩进式多行代码"></a>缩进式多行代码</h4><p>缩进 4 个空格或是 1 个制表符</p><p>一个代码区块会一直持续到没有缩进的那一行（或是文件结尾）。</p><pre><code>    #include &lt;stdio.h&gt;    int main(void)    {        printf("Hello world");    }</code></pre><p>view</p><pre class=" language-c"><code class="language-c">    <span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>    <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="用六个-包裹多行代码"><a href="#用六个-包裹多行代码" class="headerlink" title="用六个`包裹多行代码"></a>用六个`包裹多行代码</h4><pre class=" language-j"><code class="language-j"><span class="token conjunction variable">`</span> <span class="token conjunction variable">`</span> <span class="token conjunction variable">`</span><span class="token verb keyword">#</span>include <span class="token verb keyword">&lt;</span>stdi<span class="token verb keyword">o.</span>h<span class="token verb keyword">></span>int main<span class="token punctuation">(</span>void<span class="token punctuation">)</span><span class="token verb keyword">{</span>    printf<span class="token punctuation">(</span><span class="token conjunction variable">"</span>Hello world<span class="token conjunction variable">"</span><span class="token punctuation">)</span><span class="token verb keyword">;</span><span class="token adverb builtin">}</span><span class="token conjunction variable">`</span> <span class="token conjunction variable">`</span> <span class="token conjunction variable">`</span></code></pre><p>另外说明一下，第一个 ```后可以加上代码的类型，js代码就加上js,css就加上css，渲染出来的样式会有区别。比如下面这段，虽然内容基本差不多，第一个是js，第二个是json，渲染出来就是不一样的。如果不加的话文字都是白色的</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> object <span class="token operator">=</span><span class="token punctuation">{</span>  <span class="token string">"avatar"</span><span class="token punctuation">:</span> <span class="token string">"http://image.luokangyuan.com/1_qq_27922023.jpg"</span><span class="token punctuation">,</span>  <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"码酱"</span><span class="token punctuation">,</span>  <span class="token string">"introduction"</span><span class="token punctuation">:</span> <span class="token string">"我不是大佬，只是在追寻大佬的脚步"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">{</span>  <span class="token string">"avatar"</span><span class="token punctuation">:</span> <span class="token string">"http://image.luokangyuan.com/1_qq_27922023.jpg"</span><span class="token punctuation">,</span>  <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"码酱"</span><span class="token punctuation">,</span>  <span class="token string">"introduction"</span><span class="token punctuation">:</span> <span class="token string">"我不是大佬，只是在追寻大佬的脚步"</span><span class="token punctuation">}</span><span class="token keyword">var</span> object <span class="token operator">=</span><span class="token punctuation">{</span>  <span class="token string">"avatar"</span><span class="token punctuation">:</span> <span class="token string">"http://image.luokangyuan.com/1_qq_27922023.jpg"</span><span class="token punctuation">,</span>  <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"码酱"</span><span class="token punctuation">,</span>  <span class="token string">"introduction"</span><span class="token punctuation">:</span> <span class="token string">"我不是大佬，只是在追寻大佬的脚步"</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><h4 id="HTML-原始码"><a href="#HTML-原始码" class="headerlink" title="HTML 原始码"></a>HTML 原始码</h4><p>在代码区块里面， &amp; 、 &lt; 和 &gt; 会自动转成 HTML 实体，这样的方式让你非常容易使用 Markdown 插入范例用的 HTML 原始码，只需要复制贴上，剩下的 Markdown 都会帮你处理，例如：</p><p>第一个例子：</p><pre class=" language-markdown"><code class="language-markdown"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   © 2018 <span class="token italic"><span class="token punctuation">*</span><span class="token punctuation">*</span><span class="token punctuation">*</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>view</p><p>© 2018 ***</p><blockquote><p>结语 :</p><p>借鉴于<a href="https://liyangzone.com/2019/07/17/markdown%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/#toc-heading-6">https://liyangzone.com/2019/07/17/markdown%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/#toc-heading-6</a> 留下笔记以备后期</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows 安装wsl2</title>
      <link href="/posts/f43b.html"/>
      <url>/posts/f43b.html</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-WSL2-in-Windows-10"><a href="#Linux-WSL2-in-Windows-10" class="headerlink" title="Linux (WSL2)  in Windows 10"></a>Linux (WSL2)  in Windows 10</h1><h2 id="访问子系统文件方法"><a href="#访问子系统文件方法" class="headerlink" title="访问子系统文件方法"></a>访问子系统文件方法</h2><h3 id="在要浏览的Linux环境的Windows子系统中，运行以下命令-explorer-exe"><a href="#在要浏览的Linux环境的Windows子系统中，运行以下命令-explorer-exe" class="headerlink" title="在要浏览的Linux环境的Windows子系统中，运行以下命令 explorer.exe ."></a>在要浏览的Linux环境的Windows子系统中，运行以下命令 <code>explorer.exe .</code></h3><p><img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/image-20211008141453850.png" alt="image-20211008141453850"></p><h3 id="在文件资源路径中搜索-wsl"><a href="#在文件资源路径中搜索-wsl" class="headerlink" title="在文件资源路径中搜索  \\wsl$"></a>在文件资源路径中搜索  <code>\\wsl$</code></h3><p><img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/image-20211008141323242.png" alt="image-20211008141323242"></p><h2 id="wsl-命令"><a href="#wsl-命令" class="headerlink" title="wsl 命令"></a>wsl 命令</h2><h3 id="查看帮助"><a href="#查看帮助" class="headerlink" title="查看帮助"></a>查看帮助</h3><pre class=" language-yaml"><code class="language-yaml">wsl <span class="token punctuation">-</span>h</code></pre><h3 id="设置默认版本，选择linux默认运行在-wsl1-还是-wsl2"><a href="#设置默认版本，选择linux默认运行在-wsl1-还是-wsl2" class="headerlink" title="设置默认版本，选择linux默认运行在 wsl1 还是 wsl2"></a>设置默认版本，选择linux默认运行在 <strong>wsl1</strong> 还是 <strong>wsl2</strong></h3><pre class=" language-yaml"><code class="language-yaml">wsl <span class="token punctuation">-</span><span class="token punctuation">-</span>set<span class="token punctuation">-</span>default<span class="token punctuation">-</span>version 2</code></pre><h3 id="设置-某个linux发行版运行版本-需要先安装好-linux-后才可以转换"><a href="#设置-某个linux发行版运行版本-需要先安装好-linux-后才可以转换" class="headerlink" title="设置 某个linux发行版运行版本,需要先安装好 linux 后才可以转换"></a>设置 某个linux发行版运行版本,需要先安装好 linux 后才可以转换</h3><pre class=" language-yaml"><code class="language-yaml">wsl <span class="token punctuation">-</span><span class="token punctuation">-</span>set<span class="token punctuation">-</span>version &lt;distro<span class="token punctuation">></span> 2   eg<span class="token punctuation">:</span>wsl <span class="token punctuation">-</span><span class="token punctuation">-</span>set<span class="token punctuation">-</span>version ubuntu 1</code></pre><h3 id="ubuntu-版本转换"><a href="#ubuntu-版本转换" class="headerlink" title="ubuntu 版本转换"></a>ubuntu 版本转换</h3><pre class=" language-yaml"><code class="language-yaml">wsl <span class="token punctuation">-</span><span class="token punctuation">-</span>set<span class="token punctuation">-</span>version ubuntu 2</code></pre><h3 id="查看安装的-linux"><a href="#查看安装的-linux" class="headerlink" title="查看安装的 linux"></a>查看安装的 linux</h3><pre class=" language-yaml"><code class="language-yaml">wsl <span class="token punctuation">-</span><span class="token punctuation">-</span>list <span class="token punctuation">-</span><span class="token punctuation">-</span>verbose 或 wsl <span class="token punctuation">-</span>l <span class="token punctuation">-</span>v</code></pre><h3 id="停止所用运行Linux"><a href="#停止所用运行Linux" class="headerlink" title="停止所用运行Linux"></a>停止所用运行Linux</h3><pre class=" language-yaml"><code class="language-yaml">wsl <span class="token punctuation">-</span><span class="token punctuation">-</span>shutdowny</code></pre><h3 id="修改root用户密码"><a href="#修改root用户密码" class="headerlink" title="修改root用户密码"></a>修改root用户密码</h3><ul><li><p><code>wsl 默认是没有设置root密码的</code></p></li><li><p>设置 root 用户密码，这样要输三次命令，第一次当前用户密码，后两次就是设置密码以及确认密码</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 语法： sudo passwd 用户名 </span>sudo passwd root</code></pre></li><li><p><strong>password updated successfully</strong> 代表密码更新成功 </p></li><li><p> 切换用户</p></li></ul><pre class=" language-yaml"><code class="language-yaml"> <span class="token comment" spellcheck="true"># 语法： su 用户名 </span>su root</code></pre><h3 id="修个设置默认用户"><a href="#修个设置默认用户" class="headerlink" title="修个设置默认用户"></a>修个设置默认用户</h3><h4 id="查看自己安装的哪个版本"><a href="#查看自己安装的哪个版本" class="headerlink" title="查看自己安装的哪个版本"></a>查看自己安装的哪个版本<img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/image-20211008151611822.png" alt="image-20211008151611822"></h4><p><em>查看修改命令</em>，输入<code>ubuntu2004 /? </code>按回车会自动补全版本对应的命令 不要输入<code>ubuntu</code>要不然进入子系统了</p><p><img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/image-20211008151717515.png" alt="image-20211008151717515"></p><h4 id="设置默认用户"><a href="#设置默认用户" class="headerlink" title="设置默认用户"></a>设置默认用户</h4><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">语法</span><span class="token punctuation">:</span> ubuntu2004 config <span class="token punctuation">-</span><span class="token punctuation">-</span>default<span class="token punctuation">-</span>user 用户名(已存在)PS C<span class="token punctuation">:</span>\WINDOWS\system32<span class="token punctuation">></span> ubuntu2004 config <span class="token punctuation">-</span><span class="token punctuation">-</span>default<span class="token punctuation">-</span>user root没有报错就代表成功</code></pre><p>重新打开已经是root用户了<img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/image-20211008151948185.png" alt="image-20211008151948185"></p><h3 id="启动虚拟机"><a href="#启动虚拟机" class="headerlink" title="启动虚拟机"></a>启动虚拟机</h3><ul><li><p>直接输入 系统名称：如 Ubuntu 、kali等 直接进入</p></li><li><p>或使用 wsl命令，例如</p><pre class=" language-yaml"><code class="language-yaml">wsl <span class="token punctuation">-</span>d ubuntu</code></pre></li></ul><h2 id="安装wsl-分发版"><a href="#安装wsl-分发版" class="headerlink" title="安装wsl 分发版"></a>安装wsl 分发版</h2><h3 id="安装-linux"><a href="#安装-linux" class="headerlink" title="安装 linux"></a>安装 linux</h3><ul><li><p>打开 应用商店（ <a href="https://aka.ms/wslstore">Microsoft Store</a>），搜索 <strong>wsl</strong> ,商店提供 ，<code>ubuntu</code>,<code>SUSE Linux Enterprise Server 12</code>,<code>Debian</code>,<code>Kail Linux</code></p></li><li><p>安装 ubuntu</p></li><li><p>设置用户名密码</p></li><li><p>设置 root密码</p><pre class=" language-yaml"><code class="language-yaml">sudo passwd root</code></pre></li></ul><h3 id="wsl-分发版上安装docker"><a href="#wsl-分发版上安装docker" class="headerlink" title="wsl 分发版上安装docker"></a>wsl 分发版上安装docker</h3><pre><code> sudo apt-get update  sudo apt-get install -y \      apt-transport-https \      ca-certificates \      curl \      gnupg-agent \      software-properties-common  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -  sudo add-apt-repository \     "deb [arch=amd64] https://download.docker.com/linux/ubuntu \     $(lsb_release -cs) \     stable"  sudo apt-get update  sudo apt-get install docker-ce docker-ce-cli containerd.io</code></pre><h3 id="docker相关命令"><a href="#docker相关命令" class="headerlink" title="docker相关命令"></a>docker相关命令</h3><h4 id="启动docker"><a href="#启动docker" class="headerlink" title="启动docker"></a>启动docker</h4><pre class=" language-yaml"><code class="language-yaml">sudo service docker start</code></pre><h4 id="运行容器测试"><a href="#运行容器测试" class="headerlink" title="运行容器测试"></a>运行容器测试</h4><pre class=" language-yaml"><code class="language-yaml">sudo docker run hello<span class="token punctuation">-</span>world</code></pre><h4 id="docker-以普通用户执行"><a href="#docker-以普通用户执行" class="headerlink" title="docker 以普通用户执行"></a>docker 以普通用户执行</h4><pre class=" language-yaml"><code class="language-yaml">sudo usermod <span class="token punctuation">-</span>aG docker your<span class="token punctuation">-</span>usersudo service docker restart</code></pre><h4 id="windows-网络访问-linux"><a href="#windows-网络访问-linux" class="headerlink" title="windows 网络访问 linux"></a>windows 网络访问 linux</h4><ul><li><p>运行 nginx容器</p><pre class=" language-yaml"><code class="language-yaml">docker run <span class="token punctuation">-</span><span class="token punctuation">-</span>name nginx <span class="token punctuation">-</span>d <span class="token punctuation">-</span>p 8888<span class="token punctuation">:</span>80 nginx   run：表示运行容器  <span class="token punctuation">-</span><span class="token punctuation">-</span>name：指定容器名称 <span class="token punctuation">-</span>d：表示进程在后台运行  <span class="token punctuation">-</span>p：指定映射端口 8888为外部访问端口 ，80位容器内部端口 nginx<span class="token punctuation">:</span>依赖表示镜像名称 可以带参数指定版本号</code></pre></li><li><p>linux子系统内部访问</p><pre class=" language-yaml"><code class="language-yaml">curl http<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span><span class="token number">8888</span></code></pre></li><li><p>windows访问</p><ol><li><p>查看 linuxIp</p><pre class=" language-yaml"><code class="language-yaml">ip addr</code></pre></li><li><p>查看 eth0 ip,这里是 <code>192.168.161.203</code> 每个机器的都不一样</p><ul><li>访问：打开浏览器，访问 <code>http://192.168.161.203:8888</code> 得到nginx页面</li><li>访问 <code>http://127.0.0.1:8888</code> 得不到结果，拒绝访问</li></ul></li></ol></li></ul><h4 id="ubuntu-重启系统"><a href="#ubuntu-重启系统" class="headerlink" title="ubuntu 重启系统"></a>ubuntu 重启系统</h4><ul><li><p>在Linux 执行 重启或关机命令，会报错，需要执行 <code>wsl</code>命令</p><pre class=" language-yaml"><code class="language-yaml">ziyun@DESKTOP<span class="token punctuation">-</span>JVE2TQQ<span class="token punctuation">:</span>/mnt/c/WINDOWS/system32$ sudo rebootSystem has not been booted with systemd as init system (PID 1). Can't operate.Failed to talk to init daemon.ziyun@DESKTOP<span class="token punctuation">-</span>JVE2TQQ<span class="token punctuation">:</span>/mnt/c/WINDOWS/system32$ sudo shutdownSystem has not been booted with systemd as init system (PID 1). Can't operate.ziyun@DESKTOP<span class="token punctuation">-</span>JVE2TQQ<span class="token punctuation">:</span>/mnt/c/WINDOWS/system32$</code></pre></li><li><p>终止所有运行的linux</p><pre class=" language-yaml"><code class="language-yaml">wsl <span class="token punctuation">-</span><span class="token punctuation">-</span>shutdown</code></pre></li><li><p>终止指定的linux</p><pre class=" language-yaml"><code class="language-yaml">wsl <span class="token punctuation">-</span><span class="token punctuation">-</span>terminate &lt;distro<span class="token punctuation">></span><span class="token comment" spellcheck="true"># 或 </span>wsl <span class="token punctuation">-</span>t &lt;distro<span class="token punctuation">></span>   </code></pre></li><li><p>查看 linux子系统列表</p><pre class=" language-yaml"><code class="language-yaml">wsl <span class="token punctuation">-</span>l  </code></pre></li><li><p>关闭 ubutnu ,关闭没有任何显示</p><pre class=" language-yaml"><code class="language-yaml">wsl <span class="token punctuation">-</span>t Ubuntu</code></pre></li><li><p>启动 ubuntu</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">-</span> 执行 `wsl <span class="token punctuation">-</span>d ubuntu`<span class="token punctuation">-</span> 或者输入 ubuntu</code></pre></li></ul><h4 id="将ubuntu导出-安装的默认C盘目录"><a href="#将ubuntu导出-安装的默认C盘目录" class="headerlink" title="将ubuntu导出 安装的默认C盘目录"></a>将ubuntu导出 安装的默认C盘目录</h4><ul><li><p>导出到d盘dev目录</p><pre class=" language-yaml"><code class="language-yaml">wsl <span class="token punctuation">-</span><span class="token punctuation">-</span>export Ubuntu D<span class="token punctuation">:</span>/dev/ubuntu.tar  这个不能在系统终端上执行 ，需要在主系统上终端执行</code></pre></li><li><p>导入</p><pre class=" language-yaml"><code class="language-yaml">wsl <span class="token punctuation">-</span><span class="token punctuation">-</span>import Ubuntu D<span class="token punctuation">:</span>/dev/Ubuntu  D<span class="token punctuation">:</span>/dev/ubuntu.tar说明<span class="token punctuation">-</span> –import <span class="token punctuation">:</span>导入<span class="token punctuation">-</span> <span class="token key atrule">ubuntu</span><span class="token punctuation">:</span> 导入名称，可自定义<span class="token punctuation">-</span> <span class="token key atrule">D:/dev/Ubuntu</span> <span class="token punctuation">:</span> 导入到那个目录，导入成功，有 ext4.vhdx 文件<span class="token punctuation">-</span> D<span class="token punctuation">:</span>/dev/ubuntu.tar： 源文件</code></pre></li></ul><h4 id="win10中WSL-2运行的Docker-Desktop运行文件从C盘迁移到其他目录"><a href="#win10中WSL-2运行的Docker-Desktop运行文件从C盘迁移到其他目录" class="headerlink" title="win10中WSL 2运行的Docker Desktop运行文件从C盘迁移到其他目录"></a>win10中WSL 2运行的Docker Desktop运行文件从C盘迁移到其他目录</h4><blockquote><p><code>**WSL**</code> </p><p>适用于 Linux 的 Windows 子系统，★适用于 Linux 的 Windows 子系统可让开发人员按原样运行 GNU/Linux 环境 - 包括大多数<a href="https://cloud.tencent.com/product/cli?from=10680">命令行工具</a>、实用工具和应用程序 - 且不会产生虚拟机开销。 ”</p><p><strong>什么是 WSL 2？</strong></p><p>★WSL 2 是适用于 Linux 的 Windows 子系统体系结构的一个新版本，它支持适用于 Linux 的 Windows 子系统在 Windows 上运行 ELF64 Linux 二进制文件。它的主要目标是提高文件系统性能，以及添加完全的系统调用兼容性。 ”</p></blockquote><ul><li><p>启用 WSL 后，docker 运行数据都在 WSL 发行版中，文件位置都只能由 WSL 管理！安装 docker 后，docker 会自动创建 2 个发行版：</p><ul><li>docker-desktop</li><li>docker-desktop-data<img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/image-20211008174721649.png" alt="image-20211008174721649"></li></ul></li><li><p>WSL 发行版默认都是安装在 C 盘，在<code>%LOCALAPPDATA%/Docker/wsl</code> 目录 docker 的运行数据、镜像文件都存在<code>%LOCALAPPDATA%/Docker/wsl/data/ext4.vhdx </code>中，C盘空间不大的没玩多久就要紧张了。。。</p></li><li><p>网上查了一下 wsl 发行版迁移，几乎都是说使用 LxRunOffline.exe</p><p>经过我试验，LxRunOffline.exe 确实可以迁移自己安装的发行版，却迁移不了wsl2 安装docker 自动创建的 2 个发行版</p><p>后面只好查别的方法</p></li><li><p>下面是操作方法：</p><ol><li><p>首先关闭 docker</p></li><li><p>关闭所有发行版：<code>wsl --shutdown</code></p></li><li><p>将 docker-desktop-data 导出到 <code>D:\SoftwareData\wsl\docker-desktop-data\docker-desktop-data.tar</code>（注意，原有的 docker images 不会一起导出）</p></li></ol><pre class=" language-yaml"><code class="language-yaml">    wsl <span class="token punctuation">-</span><span class="token punctuation">-</span>export docker<span class="token punctuation">-</span>desktop<span class="token punctuation">-</span>data D<span class="token punctuation">:</span>\SoftwareData\wsl\docker<span class="token punctuation">-</span>desktop<span class="token punctuation">-</span>data\docker<span class="token punctuation">-</span>desktop<span class="token punctuation">-</span>data.tar</code></pre><ol start="4"><li><p>注销 docker-desktop-data：<code>wsl --unregister docker-desktop-data</code></p></li><li><p>重新导入 docker-desktop-data 到要存放的文件夹：D:\SoftwareData\wsl\docker-desktop-data\：</p><pre class=" language-yaml"><code class="language-yaml">wsl <span class="token punctuation">-</span><span class="token punctuation">-</span>import docker<span class="token punctuation">-</span>desktop<span class="token punctuation">-</span>data D<span class="token punctuation">:</span>\SoftwareData\wsl\docker<span class="token punctuation">-</span>desktop<span class="token punctuation">-</span>data\ D<span class="token punctuation">:</span>\SoftwareData\wsl\docker<span class="token punctuation">-</span>desktop<span class="token punctuation">-</span>data\docker<span class="token punctuation">-</span>desktop<span class="token punctuation">-</span>data.tar <span class="token punctuation">-</span><span class="token punctuation">-</span>version 2</code></pre><p><img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/image-20211008175644724.png" alt="image-20211008175644724"></p></li></ol></li></ul><ol start="6"><li><p>只需要迁移 docker-desktop-data 一个发行版就行，另外一个不用管，它占用空间很小。</p><p>完成以上操作后，原来的<code>%LOCALAPPDATA%/Docker/wsl/data/ext4.vhdx</code> 就迁移到新目录了：</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/image-20211008175725622.png" alt="image-20211008175725622"></p><h4 id="国内加速地址"><a href="#国内加速地址" class="headerlink" title="国内加速地址"></a>国内加速地址</h4><ol><li>Docker中国区官方镜像： <a href="https://registry.docker-cn.com/">https://registry.docker-cn.com</a></li><li>腾讯源： <a href="https://mirror.ccs.tencentyun.com/">https://mirror.ccs.tencentyun.com</a></li><li>网易： <a href="http://hub-mirror.c.163.com/">http://hub-mirror.c.163.com</a></li><li>中科大： <a href="https://docker.mirrors.ustc.edu.cn/">https://docker.mirrors.ustc.edu.cn</a></li></ol><h4 id="Docker-配置国内镜像源加速-https-www-cnblogs-com-cao-lei-p-14448052-html"><a href="#Docker-配置国内镜像源加速-https-www-cnblogs-com-cao-lei-p-14448052-html" class="headerlink" title="Docker 配置国内镜像源加速](https://www.cnblogs.com/cao-lei/p/14448052.html)"></a>Docker 配置国内镜像源加速](<a href="https://www.cnblogs.com/cao-lei/p/14448052.html">https://www.cnblogs.com/cao-lei/p/14448052.html</a>)</h4><pre class=" language-yaml"><code class="language-yaml">vi /etc/docker/daemon.json <span class="token comment" spellcheck="true"># 内容如下： </span><span class="token punctuation">{</span>  <span class="token key atrule">"registry-mirrors"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token string">"https://xx4bwyg2.mirror.aliyuncs.com"</span><span class="token punctuation">,</span>    <span class="token string">"http://f1361db2.m.daocloud.io"</span><span class="token punctuation">,</span>    <span class="token string">"https://registry.docker-cn.com"</span><span class="token punctuation">,</span>    <span class="token string">"http://hub-mirror.c.163.com"</span><span class="token punctuation">,</span>    <span class="token string">"https://docker.mirrors.ustc.edu.cn"</span>  <span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true"># 退出并保存 :wq </span><span class="token comment" spellcheck="true"># 使配置生效   systemctl daemon-reload </span><span class="token comment" spellcheck="true"># 重启         Docker systemctl restart docker</span></code></pre><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><blockquote><p><a href="https://cloud.tencent.com/developer/article/1679501?from=article.detail.1594940">https://cloud.tencent.com/developer/article/1679501?from=article.detail.1594940</a></p><p><a href="https://www.hdboy.top/show/35">https://www.hdboy.top/show/35</a></p><p><a href="https://blog.csdn.net/qq_38856939/article/details/116528514">https://blog.csdn.net/qq_38856939/article/details/116528514</a></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>front end ui</title>
      <link href="/posts/70c1.html"/>
      <url>/posts/70c1.html</url>
      
        <content type="html"><![CDATA[<h1 id="2021-最受欢迎的前端-八-个-UI-框架"><a href="#2021-最受欢迎的前端-八-个-UI-框架" class="headerlink" title="2021 最受欢迎的前端 八 个 UI 框架"></a>2021 最受欢迎的前端 八 个 UI 框架</h1><h2 id="Mint-UI"><a href="#Mint-UI" class="headerlink" title="Mint UI"></a>Mint UI</h2><ul><li>官网：<a href="https://mint-ui.github.io/#!/zh-cn">https://mint-ui.github.io/#!/zh-cn</a></li><li>Github: <a href="https://github.com/ElemeFE/mint-ui/">https://github.com/ElemeFE/mint-ui/</a></li><li>由饿了么前端团队推出的 Mint UI 是一个基于 Vue.js 的移动端组件库。自 6 月初开源以来，根据社区和团队内部的反馈，修复了一些 bug 并新增了部分组件，于本周发布了 0.2.0 版本</li></ul><img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/mint-ui.jpg" alt="img" style="zoom:50%;"><h2 id="WeUI"><a href="#WeUI" class="headerlink" title="WeUI"></a>WeUI</h2><ul><li>官网地址：<a href="https://weui.io/">https://weui.io/</a></li><li>Github: <a href="https://github.com/weui/weui.git">https://github.com/weui/weui.git</a></li><li>WeUI 是一套同微信原生视觉体验一致的基础样式库，由微信官方设计团队为微信内网页和微信小程序量身设计，令用户的使用感知更加统一。</li><li><img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/d0862ca6-6ea8-4a29-87e6-322d6e91d1ca-cover.png" alt="img" style="zoom:33%;"></li></ul><h2 id="iView-UI"><a href="#iView-UI" class="headerlink" title="iView UI"></a>iView UI</h2><ul><li>官网地址：<a href="https://www.iviewui.com/">https://www.iviewui.com</a></li><li>Github:：<a href="https://github.com/TalkingData/iview-weapp">https://github.com/TalkingData/iview-weapp</a></li><li><img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/image.png" alt="iView - Made with Vue.js" style="zoom:50%;"></li></ul><h2 id="layui"><a href="#layui" class="headerlink" title="layui"></a>layui</h2><ul><li>官网地址:<a href="https://www.layui.com/">https://www.layui.com</a></li><li>Github: <a href="https://github.com/sentsin/layui/">https://github.com/sentsin/layui/</a></li><li>经典模块化前端框架由职业前端倾情打造，面向所有层次的前后端开发者，零门槛开箱即用的前端 UI 解决方案 ，在年度最受欢迎的框架排名榜上也是前三名的。</li><li><img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/image-20211008134818375.png" alt="image-20211008134818375" style="zoom: 45%;"></li></ul><h2 id="ElementUI"><a href="#ElementUI" class="headerlink" title="ElementUI"></a>ElementUI</h2><ul><li>官网地址:<a href="http://element-cn.eleme.io/#/zh-CN">http://element-cn.eleme.io/#/zh-CN</a></li><li>Github: <a href="https://github.com/ElementUI/element-starter">https://github.com/ElementUI/element-starter</a></li><li>element ui 框架的按钮组件，这款由饿了么前端开源的 UI 框架，一经面世，就收获大量程序员的芳心。在 github 上更是高达 29.8k 的 star 早已说明一切。用于开发 PC 端的页面还是绰绰有余的。如果说你是用 vue 开发者，却没用过 element UI，那你肯定不是合格的 vue 开发者。</li></ul><h2 id="vant-UI"><a href="#vant-UI" class="headerlink" title="vant UI"></a>vant UI</h2><ul><li><p>官网地址： <a href="http://vant-contrib.gitee.io/vant/#/zh-CN/">http://vant-contrib.gitee.io/vant/#/zh-CN/</a></p></li><li><p>Github: <a href="https://github.com/youzan/vant">https://github.com/youzan/vant</a></p></li><li><p>Vant Weapp 是有赞移动端组件库 Vant 的小程序版本，两者基于相同的视觉规范，提供一致的 API 接口，助力开发者快速搭建小程序应用</p></li><li><img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/vant3-cover.jpg&amp;720x405.jpg" alt="Vant 3 - 有赞出品的开源移动UI组件库，基于Vue3 重构发布｜那些免费的砖" style="zoom: 80%;"></li></ul><h2 id="Flutter"><a href="#Flutter" class="headerlink" title="Flutter"></a>Flutter</h2><ul><li>官网地址:<a href="https://flutterchina.club/">https://flutterchina.club/</a></li><li>Github: <a href="https://github.com/flutter/flutter">https://github.com/flutter/flutter</a></li><li>Flutter 是谷歌的移动 UI 框架，可以快速在 iOS 和 Android 上构建高质量的原生用户界面，前端对于 Flutter 的热忱度之高一度让人有点惊讶，事实上我在 Flutter 社区内见到的客户端开发者远多于前端开发，不过前端对于跨端解决方案确实有着天然的渴求。</li><li><img src="https://uploads-ssl.webflow.com/5f841209f4e71b2d70034471/6078b650748b8558d46ffb7f_Flutter app development.png" alt="Flutter App Development - Why You Should Choose Flutter" style="zoom:50%;"></li></ul><h2 id="Quasar-Framework"><a href="#Quasar-Framework" class="headerlink" title="Quasar Framework"></a>Quasar Framework</h2><ul><li>官方文档：<a href="http://www.quasarchs.com/">http://www.quasarchs.com/</a></li><li>GitHub 地址：<a href="https://github.quasar.dev/">https://github.quasar.dev</a></li><li>Quasar-Framework 是一款基于 vue.js 开发的开源的前端框架,<br>只写一次代码的情况下发布到多个平台 website, PWA ,Mobile App 和 Electron App ，用起来表示十分满意</li><li><img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/68747470733a2f2f63646e2e7175617361722e6465762f6c6f676f2d76322f6865616465722e706e67" alt="GitHub - quasarframework/quasar: Quasar Framework - Build high-performance  VueJS user interfaces in record time" style="zoom: 33%;"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端UI </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
