<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>使用Travis-CI部署hexo博客到腾讯cos&amp;github-pages</title>
    <url>/posts/49a9.html</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>以前我的博客静态文件是放在一个带宽1Mbps的腾讯云主机上，文章里的图片也是放在云主机上的，当有些文章图片较多的时候，加载就会变得很慢。后来我将静态文件和图片全部迁移到腾讯对象存储(cos)里，并配置了CDN加速，从此加载速度不再是瓶颈，可以做到基本秒开。</p>
<p>具体方案是将静态文件和图片文件分别放到两个存储桶里，放静态文件的存储桶CDN设置博客主域名，放图片的存储桶CDN设置二级域名，比如我设置了图片CDN二级域名为<code>images.liyangzone.com</code>，写文章的时候先上传图片到存储桶，然后在文章里就可以直接引用图片了。比如我在存储桶根目录上传了一张名为<code>test.jpg</code>的图片，它的地址就是<code>images.liyangzone.com/test.jpg</code>，而且支持多级目录，比一些图床什么的要方便很多，有些图床虽然免费，但是它的文件名一般是一个无规律的字符串，类似这种<code>https://i.loli.net/2020/01/17/Mb1fywFLrJ8khUS.png</code>，当你传了很多图片时可能会一脸懵逼，分不清哪张是什么内容了，不利于维护。</p>
<p>而博客静态文件呢，我们可以用<code>hexo-deployer-cos</code>这个插件来替我们完成，具体配置教程可参考此文章：<a href="https://cloud.tencent.com/developer/article/1185253">如何在腾讯云COS部署HEXO博客</a>。<br>配置完了cos各种参数后，执行<code>hexo d</code>命令就会将本地文件上传至cos了，可是这种方式需要本地安装nodejs和hexo，如果想在别的电脑上写文章就不方便了，有没有一种更加便捷的部署方式呢？答案是有的，那就是——<strong>持续集成</strong>。</p>
<h3 id="什么是持续集成"><a href="#什么是持续集成" class="headerlink" title="什么是持续集成"></a>什么是持续集成</h3><p>持续集成（Continuous Integration）是一种软件开发实践。 在持续集成中，团队成员频繁集成他们的工作成果，一般每人每天至少集成一次，也可以多次。 每次集成会经过自动构建（包括自动测试）的检验，以尽快发现集成错误。</p>
<h3 id="什么是Travis-CI"><a href="#什么是Travis-CI" class="headerlink" title="什么是Travis CI"></a>什么是Travis CI</h3><p>Travis CI 是目前新兴的开源持续集成构建项目，它与 jenkins，GO 的很明显的特别在于采用 yaml 格式，同时它是在线的服务，不像 jenkins 需要你本地搭建服务器，简洁清新独树一帜。目前大多数的 Github 项目都已经移入到 Travis CI 的构建队列中，据说Travis CI 每天运行超过 4000 次完整构建。对于做开源项目或者 Github 的使用者，如果你的项目还没有加入 Travis CI 构建队列，那么我真的想对你说 OUT 了。</p>
<h3 id="为什么选择Travis-CI"><a href="#为什么选择Travis-CI" class="headerlink" title="为什么选择Travis CI"></a>为什么选择Travis CI</h3><p>为什么我们要选择 Travis 呢，因为它和 Github 集成的程度非常高，对于 Github 上的开源项目，可以免费在 Travis 上构建（为免费的互联网精神干杯🍻），而非开源的私有项目想在 Travis 上构建价格还是非常感人的。</p>
<h3 id="折腾Travis-CI后有能达到什么效果？"><a href="#折腾Travis-CI后有能达到什么效果？" class="headerlink" title="折腾Travis CI后有能达到什么效果？"></a>折腾Travis CI后有能达到什么效果？</h3><ol>
<li>直接在线编辑文件，立即生效：<br>假设你已经发表了一篇文章，过了几天你在朋友机器上浏览发现有几个明显的错别字，对于有强迫症的，这是不能容忍的。 但你手头又没有完整的hexo+nodejs+git的开发环境，重新下载git，node，hexo配置会花费不少时间，特别不划算。</li>
</ol>
<p>  如果按照这篇完整折腾完，你可以直接用浏览器访问github个人项目仓库，直接编辑那篇post的原md文件，前后2分钟改完。 稍等片刻，你的博客就自动更新了。<br> 2. 自动部署，同时部署到多个地方：<br>hexo在部署的时候可以设置部署到多端，只需在博客配置文件里设置多个deploy即可，本篇文章暂时只写两种，gh-pages和cos。部署到更多地方也是支持的，比如gitlab，国内的coding等。<br> 3. 部署快捷方便：<br>手动deploy需要推送public整个folder到github上，当后期网站文章、图片较多时候，对于天朝的网络，有时候连接github 就是不顺畅，经常要傻等不少上传时间。<br>有了CI，你可以只提交post文件里单独的md文件即可，很快很爽，谁用谁知道。</p>
<h3 id="Travis自动构建原理"><a href="#Travis自动构建原理" class="headerlink" title="Travis自动构建原理"></a>Travis自动构建原理</h3><ol>
<li>每当我们在本地写好了博文之后，push到博客仓库的<code>blog-source</code>分支。</li>
<li>Travis上可以对这个项目的<code>blog-source</code>分支设置钩子，每当检测到 push 的时候就去仓库 clone 源代码到Travis的云服务器上。</li>
<li>Travis云服务器按顺序执行一系列构建脚本，比如 <code>npm install</code>、<code>hexo g</code> 、<code>hexo d</code>等。</li>
</ol>
<h3 id="如何操作"><a href="#如何操作" class="headerlink" title="如何操作"></a>如何操作</h3><h4 id="1-配置hexo多端部署"><a href="#1-配置hexo多端部署" class="headerlink" title="1. 配置hexo多端部署"></a>1. 配置hexo多端部署</h4><p>修改博客根目录配置文件<code>_config.yml</code>，参考<a href="https://hexo.io/zh-cn/docs/one-command-deployment">hexo官方文档-部署</a>，我这里只设置了两个，github-pages和cos，下面的写法是travis-ci部署到github-pages和腾讯cos</p>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">#deploy:</span>
<span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> git
  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master
  <span class="token key atrule">repo</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//gh_token@github.com/liyang5945/liyang5945.github.io.git
<span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> cos
  <span class="token key atrule">appId</span><span class="token punctuation">:</span> cos_appId
  <span class="token key atrule">secretId</span><span class="token punctuation">:</span> cos_secretId
  <span class="token key atrule">secretKey</span><span class="token punctuation">:</span> cos_secretKey
  <span class="token key atrule">bucket</span><span class="token punctuation">:</span> cos_bucket
  <span class="token key atrule">region</span><span class="token punctuation">:</span> ap<span class="token punctuation">-</span>shanghai
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果你感觉travis太麻烦，下面的写法是本地部署到github-pages和腾讯cos，注意不要把真实的secretId等值提交到github上面，腾讯云会检测到并打电话提示你有安全风险（不要问我我咋知道的），建议本地部署的时候复制进去，部署完删除即可。</p>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> git
    <span class="token key atrule">repo</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/liyang5945/liyang5945.github.io
  <span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> cos
    <span class="token key atrule">appId</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#你的appId</span>
    <span class="token key atrule">secretId</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#你的secretId</span>
    <span class="token key atrule">secretKey</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#你的secretKey</span>
    <span class="token key atrule">bucket</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#此项格式为存储桶名称+appId</span>
    <span class="token key atrule">region</span><span class="token punctuation">:</span> ap<span class="token punctuation">-</span>shanghai
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="2-注册travis账号，配置环境变量"><a href="#2-注册travis账号，配置环境变量" class="headerlink" title="2. 注册travis账号，配置环境变量"></a>2. 注册travis账号，配置环境变量</h4><p>注册travis-ci账号，新建项目等操作参考此贴：<a href="https://www.jianshu.com/p/e22c13d85659">手把手教你使用Travis CI自动部署你的Hexo博客到Github上</a>，这里不再细说。</p>
<p>接下来要做的就是要把github的token和cos的appId等添加到travis的环境变量里，这样travis云服务器才能帮你部署到github和cos，设置好后如下图所示：</p>
<p><img src="https://images.liyangzone.com/article_img/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/travis-ci/20200118_103156.png"></p>
<h4 id="3-配置travis执行脚本"><a href="#3-配置travis执行脚本" class="headerlink" title="3. 配置travis执行脚本"></a>3. 配置travis执行脚本</h4><p>最后还需要新建一个travis配置文件<code>.travis.yml</code>，放到博客根目录下，我的配置文件如下：</p>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">language</span><span class="token punctuation">:</span> node_js

<span class="token key atrule">node_js</span><span class="token punctuation">:</span> stable  <span class="token comment" spellcheck="true"># 要安装的node版本为当前的稳定版</span>

<span class="token key atrule">before_install</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> export TZ='Asia/Shanghai' <span class="token comment" spellcheck="true"># 更改时区</span>
<span class="token key atrule">install</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> npm install

<span class="token key atrule">script</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> hexo g

<span class="token key atrule">after_script</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true"># 最后执行的命令</span>

  <span class="token punctuation">-</span> sed <span class="token punctuation">-</span>i "s/cos_appId/$&amp;<span class="token comment" spellcheck="true">#123;cos_appId&amp;#125;/g" _config.yml</span>
  <span class="token punctuation">-</span> sed <span class="token punctuation">-</span>i "s/cos_secretId/$&amp;<span class="token comment" spellcheck="true">#123;cos_secretId&amp;#125;/g" _config.yml</span>
  <span class="token punctuation">-</span> sed <span class="token punctuation">-</span>i "s/cos_secretKey/$&amp;<span class="token comment" spellcheck="true">#123;cos_secretKey&amp;#125;/g" _config.yml</span>
  <span class="token punctuation">-</span> sed <span class="token punctuation">-</span>i "s/cos_bucket/$&amp;<span class="token comment" spellcheck="true">#123;cos_bucket&amp;#125;/g" _config.yml</span>
  <span class="token punctuation">-</span> sed <span class="token punctuation">-</span>i "s/gh_token/$&amp;<span class="token comment" spellcheck="true">#123;Travis_Token&amp;#125;/g" _config.yml</span>
  <span class="token punctuation">-</span> hexo deploy

<span class="token key atrule">branches</span><span class="token punctuation">:</span>
  <span class="token key atrule">only</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> blog<span class="token punctuation">-</span>source <span class="token comment" spellcheck="true"># 触发持续集成的分支</span>

<span class="token key atrule">env</span><span class="token punctuation">:</span>
  <span class="token key atrule">global</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">GH_REF</span><span class="token punctuation">:</span> github.com/liyang5945/liyang5945.github.io.git <span class="token comment" spellcheck="true"># 就是你github上存放静态博客最终文件的仓库地址末尾加上.git</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>后面的那几条<code>sed</code>语句的作用就是从我们配置的环境变量里读取真实的cos_appId等参数替换本地（travis云服务器本地）的<code>_config.yml</code>里的形参。<br>替换成真实值之后，再执行<code>hexo -d</code>命令，部署到gh-pages和cos。</p>
<p>如果你只需要部署到gh-pages，下面的部署命令还可以写出下面这样，你可以手动设置commit信息。</p>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">after_script</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> cd ./public
  <span class="token punctuation">-</span> git init
  <span class="token punctuation">-</span> git config user.name "your name"
  <span class="token punctuation">-</span> git config user.email "your email"
  <span class="token punctuation">-</span> git add .
  <span class="token punctuation">-</span> git commit <span class="token punctuation">-</span>m "Update docs"
  <span class="token punctuation">-</span> git push <span class="token punctuation">-</span><span class="token punctuation">-</span>force <span class="token punctuation">-</span><span class="token punctuation">-</span>quiet "https<span class="token punctuation">:</span>//$&amp;<span class="token comment" spellcheck="true">#123;GH_TOKEN&amp;#125;@$&amp;#123;GH_REF&amp;#125;" master:master</span>

<span class="token key atrule">branches</span><span class="token punctuation">:</span>
  <span class="token key atrule">only</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> blog<span class="token punctuation">-</span>source <span class="token comment" spellcheck="true"># 触发持续集成的分支</span>

<span class="token key atrule">env</span><span class="token punctuation">:</span>
  <span class="token key atrule">global</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">GH_REF</span><span class="token punctuation">:</span> github.com/liyang5945/liyang5945.github.io.git
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>但是这样会有一个问题，那就是commit记录只有一条，如果你在意这个问题，那就使用下面的写法，先拉取到本地再push：</p>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">after_script</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> git clone https<span class="token punctuation">:</span>//$&amp;<span class="token comment" spellcheck="true">#123;GH_REF&amp;#125; .deploy_git  # GH_REF是最下面配置的仓库地址</span>
  <span class="token punctuation">-</span> cd .deploy_git
  <span class="token punctuation">-</span> git checkout master
  <span class="token punctuation">-</span> cd ../
  <span class="token punctuation">-</span> mv .deploy_git/.git/ ./public/   <span class="token comment" spellcheck="true"># 这一步之前的操作是为了保留master分支的提交记录，不然每次git init的话只有1条commit</span>
  <span class="token punctuation">-</span> cd ./public
  <span class="token punctuation">-</span> git config user.name "your name"  
  <span class="token punctuation">-</span> git config user.email "your email"  
  <span class="token punctuation">-</span> git add .
  <span class="token punctuation">-</span> git commit <span class="token punctuation">-</span>m "Travis CI Auto Builder at `date +"%Y<span class="token punctuation">-</span>%m<span class="token punctuation">-</span>%d %H<span class="token punctuation">:</span>%M"`"  <span class="token comment" spellcheck="true"># 提交记录包含时间 跟上面更改时区配合</span>
  <span class="token punctuation">-</span> git push <span class="token punctuation">-</span><span class="token punctuation">-</span>force <span class="token punctuation">-</span><span class="token punctuation">-</span>quiet "https<span class="token punctuation">:</span>//$&amp;<span class="token comment" spellcheck="true">#123;Travis_Token&amp;#125;@$&amp;#123;GH_REF&amp;#125;" master:master  #</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="4-测试是否成功"><a href="#4-测试是否成功" class="headerlink" title="4. 测试是否成功"></a>4. 测试是否成功</h4><p>改动本地文件然后commit，并push到github，不出意外的话可以看到travis云服务器执行命令的过程：</p>
<p><img src="https://images.liyangzone.com/article_img/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/travis-ci/20200118_115731.png"></p>
<p><img src="https://images.liyangzone.com/article_img/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/travis-ci/20200118_115632.png"></p>
<p>我们再去github和腾讯cos里看一下，可以看到commit记录和文件上传日期都是最新的。</p>
<p><img src="https://images.liyangzone.com/article_img/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/travis-ci/20200118_115141.png"></p>
<p><img src="https://images.liyangzone.com/article_img/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/travis-ci/20200118_115525.png"></p>
]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>Travis-CI</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>front end ui</title>
    <url>/posts/70c1.html</url>
    <content><![CDATA[<h1 id="2021-最受欢迎的前端-八-个-UI-框架"><a href="#2021-最受欢迎的前端-八-个-UI-框架" class="headerlink" title="2021 最受欢迎的前端 八 个 UI 框架"></a>2021 最受欢迎的前端 八 个 UI 框架</h1><h2 id="Mint-UI"><a href="#Mint-UI" class="headerlink" title="Mint UI"></a>Mint UI</h2><ul>
<li>官网：<a href="https://mint-ui.github.io/#!/zh-cn">https://mint-ui.github.io/#!/zh-cn</a></li>
<li>Github: <a href="https://github.com/ElemeFE/mint-ui/">https://github.com/ElemeFE/mint-ui/</a></li>
<li>由饿了么前端团队推出的 Mint UI 是一个基于 Vue.js 的移动端组件库。自 6 月初开源以来，根据社区和团队内部的反馈，修复了一些 bug 并新增了部分组件，于本周发布了 0.2.0 版本</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/mint-ui.jpg" alt="img" style="zoom:50%;" />

<h2 id="WeUI"><a href="#WeUI" class="headerlink" title="WeUI"></a>WeUI</h2><ul>
<li>官网地址：<a href="https://weui.io/">https://weui.io/</a></li>
<li>Github: <a href="https://github.com/weui/weui.git">https://github.com/weui/weui.git</a></li>
<li>WeUI 是一套同微信原生视觉体验一致的基础样式库，由微信官方设计团队为微信内网页和微信小程序量身设计，令用户的使用感知更加统一。</li>
<li><img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/d0862ca6-6ea8-4a29-87e6-322d6e91d1ca-cover.png" alt="img" style="zoom:33%;" /></li>
</ul>
<h2 id="iView-UI"><a href="#iView-UI" class="headerlink" title="iView UI"></a>iView UI</h2><ul>
<li>官网地址：<a href="https://www.iviewui.com/">https://www.iviewui.com</a></li>
<li>Github:：<a href="https://github.com/TalkingData/iview-weapp">https://github.com/TalkingData/iview-weapp</a></li>
<li><img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/image.png" alt="iView - Made with Vue.js" style="zoom:50%;" /></li>
</ul>
<h2 id="layui"><a href="#layui" class="headerlink" title="layui"></a>layui</h2><ul>
<li>官网地址:<a href="https://www.layui.com/">https://www.layui.com</a></li>
<li>Github: <a href="https://github.com/sentsin/layui/">https://github.com/sentsin/layui/</a></li>
<li>经典模块化前端框架由职业前端倾情打造，面向所有层次的前后端开发者，零门槛开箱即用的前端 UI 解决方案 ，在年度最受欢迎的框架排名榜上也是前三名的。</li>
<li><img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/image-20211008134818375.png" alt="image-20211008134818375" style="zoom: 45%;" /></li>
</ul>
<h2 id="ElementUI"><a href="#ElementUI" class="headerlink" title="ElementUI"></a>ElementUI</h2><ul>
<li>官网地址:<a href="http://element-cn.eleme.io/#/zh-CN">http://element-cn.eleme.io/#/zh-CN</a></li>
<li>Github: <a href="https://github.com/ElementUI/element-starter">https://github.com/ElementUI/element-starter</a></li>
<li>element ui 框架的按钮组件，这款由饿了么前端开源的 UI 框架，一经面世，就收获大量程序员的芳心。在 github 上更是高达 29.8k 的 star 早已说明一切。用于开发 PC 端的页面还是绰绰有余的。如果说你是用 vue 开发者，却没用过 element UI，那你肯定不是合格的 vue 开发者。</li>
</ul>
<h2 id="vant-UI"><a href="#vant-UI" class="headerlink" title="vant UI"></a>vant UI</h2><ul>
<li><p>官网地址： <a href="http://vant-contrib.gitee.io/vant/#/zh-CN/">http://vant-contrib.gitee.io/vant/#/zh-CN/</a></p>
</li>
<li><p>Github: <a href="https://github.com/youzan/vant">https://github.com/youzan/vant</a></p>
</li>
<li><p>Vant Weapp 是有赞移动端组件库 Vant 的小程序版本，两者基于相同的视觉规范，提供一致的 API 接口，助力开发者快速搭建小程序应用</p>
</li>
<li><img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/vant3-cover.jpg&720x405.jpg" alt="Vant 3 - 有赞出品的开源移动UI组件库，基于Vue3 重构发布｜那些免费的砖" style="zoom: 80%;" /></li>
</ul>
<h2 id="Flutter"><a href="#Flutter" class="headerlink" title="Flutter"></a>Flutter</h2><ul>
<li>官网地址:<a href="https://flutterchina.club/">https://flutterchina.club/</a></li>
<li>Github: <a href="https://github.com/flutter/flutter">https://github.com/flutter/flutter</a></li>
<li>Flutter 是谷歌的移动 UI 框架，可以快速在 iOS 和 Android 上构建高质量的原生用户界面，前端对于 Flutter 的热忱度之高一度让人有点惊讶，事实上我在 Flutter 社区内见到的客户端开发者远多于前端开发，不过前端对于跨端解决方案确实有着天然的渴求。</li>
<li><img src="https://uploads-ssl.webflow.com/5f841209f4e71b2d70034471/6078b650748b8558d46ffb7f_Flutter app development.png" alt="Flutter App Development - Why You Should Choose Flutter" style="zoom:50%;" /></li>
</ul>
<h2 id="Quasar-Framework"><a href="#Quasar-Framework" class="headerlink" title="Quasar Framework"></a>Quasar Framework</h2><ul>
<li>官方文档：<a href="http://www.quasarchs.com/">http://www.quasarchs.com/</a></li>
<li>GitHub 地址：<a href="https://github.quasar.dev/">https://github.quasar.dev</a></li>
<li>Quasar-Framework 是一款基于 vue.js 开发的开源的前端框架,<br>只写一次代码的情况下发布到多个平台 website, PWA ,Mobile App 和 Electron App ，用起来表示十分满意</li>
<li><img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/68747470733a2f2f63646e2e7175617361722e6465762f6c6f676f2d76322f6865616465722e706e67" alt="GitHub - quasarframework/quasar: Quasar Framework - Build high-performance  VueJS user interfaces in record time" style="zoom: 33%;" /></li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端UI</tag>
      </tags>
  </entry>
  <entry>
    <title>git 常用命令</title>
    <url>/posts/d48e.html</url>
    <content><![CDATA[<h1 id="git-常用命令"><a href="#git-常用命令" class="headerlink" title="git 常用命令"></a>git 常用命令</h1><p><img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/git-1.png" alt="Basic GIT Commands: A Complete Cheat Sheet for Beginners"></p>
<h2 id="1-git几个概念名字"><a href="#1-git几个概念名字" class="headerlink" title="1.git几个概念名字"></a>1.git几个概念名字</h2><p><img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/bg2015120901.png" alt="img"></p>
<ul>
<li>Workspace：工作区</li>
<li>Index / Stage：暂存区</li>
<li>Repository：仓库区（或本地仓库）</li>
<li>Remote：远程仓库</li>
</ul>
<h3 id="1-新建代码库"><a href="#1-新建代码库" class="headerlink" title="1.新建代码库"></a>1.新建代码库</h3><blockquote>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 在当前目录新建一个Git代码库</span>
$ <span class="token function">git</span> init

<span class="token comment" spellcheck="true"># 新建一个目录，将其初始化为Git代码库</span>
$ <span class="token function">git</span> init <span class="token punctuation">[</span>project-name<span class="token punctuation">]</span>

<span class="token comment" spellcheck="true"># 下载一个项目和它的整个代码历史</span>
$ <span class="token function">git</span> clone <span class="token punctuation">[</span>url<span class="token punctuation">]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</blockquote>
<h3 id="2-配置"><a href="#2-配置" class="headerlink" title="2.配置"></a>2.配置</h3><p>Git的设置文件为<code>.gitconfig</code>，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p>
<blockquote>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 显示当前的Git配置</span>
$ <span class="token function">git</span> config --list

<span class="token comment" spellcheck="true"># 编辑Git配置文件</span>
$ <span class="token function">git</span> config -e <span class="token punctuation">[</span>--global<span class="token punctuation">]</span>

<span class="token comment" spellcheck="true"># 设置提交代码时的用户信息</span>
$ <span class="token function">git</span> config <span class="token punctuation">[</span>--global<span class="token punctuation">]</span> user.name <span class="token string">"[name]"</span>
$ <span class="token function">git</span> config <span class="token punctuation">[</span>--global<span class="token punctuation">]</span> user.email <span class="token string">"[email address]"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</blockquote>
<hr>
<h2 id="2-命令及说明"><a href="#2-命令及说明" class="headerlink" title="2.命令及说明"></a>2.命令及说明</h2><h3 id="1-远程拉取分支到本地"><a href="#1-远程拉取分支到本地" class="headerlink" title="1.远程拉取分支到本地"></a>1.远程拉取分支到本地</h3><pre class="line-numbers language-yaml"><code class="language-yaml">git checkout <span class="token punctuation">-</span>b 本地分支名 origin/远程分支名
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="2-查看本地分支"><a href="#2-查看本地分支" class="headerlink" title="2.查看本地分支"></a>2.查看本地分支</h3><pre class="line-numbers language-yaml"><code class="language-yaml">git branch
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="3-查看远程分支"><a href="#3-查看远程分支" class="headerlink" title="3.查看远程分支"></a>3.查看远程分支</h3><pre class="line-numbers language-yaml"><code class="language-yaml">git branch <span class="token punctuation">-</span>r
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="4-查看所有分支"><a href="#4-查看所有分支" class="headerlink" title="4.查看所有分支"></a>4.查看所有分支</h3><pre class="line-numbers language-yaml"><code class="language-yaml">git branch <span class="token punctuation">-</span>a
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="5-新建一个本地分支"><a href="#5-新建一个本地分支" class="headerlink" title="5.新建一个本地分支"></a>5.新建一个本地分支</h3><pre class="line-numbers language-yaml"><code class="language-yaml">git branch 本地分支名
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="6-新建一个本地分支并且切换到新分支"><a href="#6-新建一个本地分支并且切换到新分支" class="headerlink" title="6.新建一个本地分支并且切换到新分支"></a>6.新建一个本地分支并且切换到新分支</h3><pre class="line-numbers language-yaml"><code class="language-yaml">git checkout <span class="token punctuation">-</span>b 本地分支名
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="7-切换分支"><a href="#7-切换分支" class="headerlink" title="7.切换分支"></a>7.切换分支</h3><pre class="line-numbers language-yaml"><code class="language-yaml">git checkout 分支名
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="8-将本地分支与远程分支关联"><a href="#8-将本地分支与远程分支关联" class="headerlink" title="8.将本地分支与远程分支关联"></a>8.将本地分支与远程分支关联</h3><pre class="line-numbers language-yaml"><code class="language-yaml">git branch <span class="token punctuation">-</span>u origin/分支名   其中origin/分支名 中分支名 为远程分支名
<span class="token comment" spellcheck="true">#或使用下面命令</span>
git branch <span class="token punctuation">-</span><span class="token punctuation">-</span>set<span class="token punctuation">-</span>upstream<span class="token punctuation">-</span>to origin/分支名
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="9-查看本地分支与远程分支的映射关系"><a href="#9-查看本地分支与远程分支的映射关系" class="headerlink" title="9.查看本地分支与远程分支的映射关系"></a>9.查看本地分支与远程分支的映射关系</h3><pre class="line-numbers language-yaml"><code class="language-yaml">git branch <span class="token punctuation">-</span>vv
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="10-撤销本地分支与远程分支的关联"><a href="#10-撤销本地分支与远程分支的关联" class="headerlink" title="10. 撤销本地分支与远程分支的关联"></a>10. 撤销本地分支与远程分支的关联</h3><pre class="line-numbers language-yaml"><code class="language-yaml">git branch <span class="token punctuation">-</span><span class="token punctuation">-</span>unset<span class="token punctuation">-</span>upstream
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="11-拉取远程分支"><a href="#11-拉取远程分支" class="headerlink" title="11.拉取远程分支"></a>11.拉取远程分支</h3><pre class="line-numbers language-yaml"><code class="language-yaml">git fetch origin（不指定分支名就是远程全部分支)
git fetch origin XXX(拉下远程指定的分支
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="12-删除本地的分支"><a href="#12-删除本地的分支" class="headerlink" title="12.删除本地的分支"></a>12.删除本地的分支</h3><pre class="line-numbers language-yaml"><code class="language-yaml">git branch <span class="token punctuation">-</span>d XXX
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="13-删除远程仓库的-分支"><a href="#13-删除远程仓库的-分支" class="headerlink" title="13.删除远程仓库的 分支"></a>13.删除远程仓库的 分支</h3><pre><code>git push origin --delete XXX
</code></pre>
<h3 id="14-合并分支"><a href="#14-合并分支" class="headerlink" title="14.合并分支"></a>14.合并分支</h3><p>例如：想将 dev 分支合并到 master 分支，操作如下：</p>
<pre class="line-numbers language-yaml"><code class="language-yaml">git  checkout master    //切换到master分支上
git pull origin master  //把远程分支pull下去，及时更新
git  merge dev          //把dev分支的代码合并到master上
git branch <span class="token punctuation">-</span><span class="token punctuation">-</span>merged     //只是为了确认所有内容都已合并，请运行以下命令：
git status              // 查看状态
git push origin master  //push到远程分支
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><p>其他命令</p>
<pre><code>更新远程分支列表
git remote update origin --prune

查看所有分支
git branch -a

删除远程分支Chapater6
git push origin --delete Chapater6

删除本地分支 Chapater6
git branch -d  Chapater6
</code></pre>
</li>
</ul>
<h3 id="15-推送本地分支到远程分支"><a href="#15-推送本地分支到远程分支" class="headerlink" title="15.推送本地分支到远程分支"></a>15.推送本地分支到远程分支</h3><pre class="line-numbers language-yaml"><code class="language-yaml">//远程先开好分支然后拉到本地
git checkout <span class="token punctuation">-</span>b feature origin/feature //检出远程的feature分支到本地

//本地先开好分支然后推送到远程
git checkout <span class="token punctuation">-</span>b feature    //创建并切换到分支feature  
git push origin feature<span class="token punctuation">:</span>feature  //推送本地的feature(冒号前面的)分支到远程origin的feature(冒号后面的)分支(没有会自动创建)
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="16-保存当前工作进度"><a href="#16-保存当前工作进度" class="headerlink" title="16.保存当前工作进度"></a>16.保存当前工作进度</h3><pre class="line-numbers language-yaml"><code class="language-yaml">保存当前工作进度
git stash

添加一些注释
git stash save 'message<span class="token punctuation">...</span>'

恢复最新的进度到工作区
git stash pop
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="17-用于比较两次修改的差异"><a href="#17-用于比较两次修改的差异" class="headerlink" title="17.用于比较两次修改的差异"></a>17.用于比较两次修改的差异</h3><pre class="line-numbers language-yaml"><code class="language-yaml">工作区与暂存区(默认)
git diff 

Git仓库 vs Git仓库
git diff &lt;commit<span class="token punctuation">></span> &lt;commit<span class="token punctuation">></span>

暂存区 vs Git仓库
git diff <span class="token punctuation">-</span><span class="token punctuation">-</span>cached &lt;filename<span class="token punctuation">></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="18-git-tag-给当前分支打标签"><a href="#18-git-tag-给当前分支打标签" class="headerlink" title="18. git tag 给当前分支打标签"></a>18. git tag 给当前分支打标签</h3><pre class="line-numbers language-yaml"><code class="language-yaml">列出当前分支所有标签
git tag

查看标签版本信息
git show v0.1.2

打标签（轻量标签和附注标签）
git tag v0.1.2  （标签版本）
git tag <span class="token punctuation">-</span>a v0.1.2 <span class="token punctuation">-</span>m '0.1.2版本'  (带标注的标签)

<span class="token comment" spellcheck="true"># 补打标签</span>
git tag <span class="token punctuation">-</span>a v0.1.2 9fbc3d0  （为之前的版本补打标签）    

删除标签
git tag <span class="token punctuation">-</span>d v0.1.2   删除标签

标签发布（git push 不会将标签对象提交到git服务器）
git push origin v0.1.2    <span class="token comment" spellcheck="true"># 将v0.1.2标签提交到git服务器</span>
git push origin –<span class="token punctuation">-</span>tags     <span class="token comment" spellcheck="true"># 将本地所有标签一次性提交到git服务器</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="19-远程分支覆盖本地分支（慎用）"><a href="#19-远程分支覆盖本地分支（慎用）" class="headerlink" title="19.远程分支覆盖本地分支（慎用）"></a>19.远程分支覆盖本地分支（慎用）</h3><pre class="line-numbers language-yaml"><code class="language-yaml">git fetch <span class="token punctuation">-</span><span class="token punctuation">-</span>all  (拉取所有分支)
git reset <span class="token punctuation">-</span><span class="token punctuation">-</span>hard origin/master (master指定远程的分支)
git pull
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="20-本地分支覆盖远程分支（慎用）"><a href="#20-本地分支覆盖远程分支（慎用）" class="headerlink" title="20.本地分支覆盖远程分支（慎用）"></a>20.本地分支覆盖远程分支（慎用）</h3><pre class="line-numbers language-yaml"><code class="language-yaml">git push origin 分支名 <span class="token punctuation">-</span><span class="token punctuation">-</span>force       (远程分支名)
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<hr>
<h2 id="3-gitignore配置规则"><a href="#3-gitignore配置规则" class="headerlink" title="3.gitignore配置规则"></a>3.gitignore配置规则</h2><p><img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/image/2021/image-20211011110107993.png" alt="image-20211011110107993"></p>
<p>通常，在使用Git的项目上工作时，您会希望排除将特定文件或目录推送到远程存储库中的情况。</p>
<p><code>.gitignore</code>文件指定Git应该忽略的未跟踪文件。</p>
<h3 id="3-1应忽略哪些文件？"><a href="#3-1应忽略哪些文件？" class="headerlink" title="3.1应忽略哪些文件？"></a>3.1应忽略哪些文件？</h3><p>被忽略的文件通常是特定于平台的文件或从构建系统自动创建的文件。一些常见的例子包括：</p>
<ul>
<li>运行时文件，例如日志，锁定，缓存或临时文件。</li>
<li>具有敏感信息的文件，例如密码或API密钥。</li>
<li>已编译的代码，例如<code>.class</code>或<code>.o</code>。</li>
<li>依赖目录，例如<code>/vendor</code>或<code>/node_modules</code>。</li>
<li>建立目录，例如<code>/public</code>，<code>/out</code>或<code>/dist</code>。</li>
<li>系统文件，例如<code>.DS_Store</code>或<code>Thumbs.db</code></li>
<li>IDE或<a href="https://www.myfreax.com/how-to-install-visual-studio-code-on-ubuntu-18-04/">文本编辑器</a>配置文件。</li>
</ul>
<h3 id="3-2-gitignore模式"><a href="#3-2-gitignore模式" class="headerlink" title="3.2.gitignore模式"></a>3.2<code>.gitignore</code>模式</h3><p><code>.gitignore</code>文件是纯文本文件，其中每行包含一个模式，供文件或目录忽略。</p>
<p><code>.gitignore</code>使用<a href="http://tldp.org/LDP/GNU-Linux-Tools-Summary/html/x11655.htm"> globbing pattern </a>来匹配带通配符的文件名。如果文件或目录包含通配符模式，则可以使用单个反斜杠（<code>\</code>）来转义字符。</p>
<h3 id="3-3-评论"><a href="#3-3-评论" class="headerlink" title="3.3.评论"></a>3.3.评论</h3><p>以井号（<code>#</code>）开头的行是注释，将被忽略。空行可以用来提高文件的可读性，并可以对相关的模式行进行分组。</p>
<h3 id="3-4-斜线"><a href="#3-4-斜线" class="headerlink" title="3.4.斜线"></a>3.4.斜线</h3><p>斜杠符号（<code>/</code>）表示目录分隔符。模式开头的斜线相对于<code>.gitignore</code>所在的目录。</p>
<p>如果模式以斜杠开头，则仅在存储库根目录中匹配文件和目录。</p>
<p>如果模式不是以斜杠开头，则它将匹配任何目录或子目录中的文件和目录。</p>
<p>如果模式以斜杠结尾，则仅匹配目录。当目录被忽略时，其所有文件和子目录也将被忽略。</p>
<h3 id="3-5-文学文件名"><a href="#3-5-文学文件名" class="headerlink" title="3.5.文学文件名"></a>3.5.文学文件名</h3><p>最直接的模式是没有任何特殊字符的文字文件名。</p>
<p>样式 示例匹配    <code>/access.log</code>  <code>access.log</code>   <code>access.log</code>  <code>access.log</code><br><code>logs/access.log</code><br><code>var/logs/access.log</code>   <code>build/</code>  <code>build</code></p>
<h3 id="3-6-通配符"><a href="#3-6-通配符" class="headerlink" title="3.6.通配符"></a>3.6.通配符</h3><p><strong><code>\*</code></strong> -星号符号匹配零个或多个字符。</p>
<p>样式 示例匹配    </p>
<pre><code>*.log`  `error.log`
`logs/debug.log`
`build/logs/error.log
</code></pre>
<p><strong><code>\**</code></strong> -两个相邻的星号符号匹配任何文件或零个或多个目录。当后跟斜杠（<code>/</code>）时，它仅与目录匹配。</p>
<p>样式 示例匹配    <code>logs/**</code> 在<code>logs</code>目录中。   <code>**/build</code>  <code>var/build</code><br><code>pub/build</code><br><code>build</code>   <code>foo/**/bar</code> ​​ <code>foo/bar</code><br><code>foo/a/bar</code><br><code>foo/a/b/c/bar</code></p>
<p><strong><code>?</code></strong> -问号与任何单个字符匹配。</p>
<p>样式 示例匹配    <code>access?.log</code>  <code>access0.log</code><br><code>access1.log</code><br><code>accessA.log</code>   <code>foo??</code>  <code>fooab</code><br><code>foo23</code><br><code>foo0s</code></p>
<h3 id="3-7-方括号"><a href="#3-7-方括号" class="headerlink" title="3.7.方括号"></a>3.7.方括号</h3><p><strong><code>[...]</code></strong> -匹配方括号中包含的任何字符。当两个字符之间用连字符<code>-</code>隔开时，表示一个字符范围。该范围包括这两个字符之间的所有字符。范围可以是字母或数字。</p>
<p>如果<code>[</code>之后的第一个字符是感叹号（<code>!</code>），则该模式匹配除指定集合中的字符以外的任何字符。</p>
<p>样式 示例匹配    <code>*.[oa]</code>  <code>file.o</code><br><code>file.a</code>   <code>*.[!oa]</code>  <code>file.s</code><br><code>file.1</code><br><code>file.0</code>   <code>access.[0-2].log</code>  <code>access.0.log</code><br><code>access.1.log</code><br><code>access.2.log</code>   <code>file.[a-c].out</code>  <code>file.a.out</code><br><code>file.b.out</code><br><code>file.c.out</code>   <code>file.[a-cx-z].out</code>  <code>file.a.out</code><br><code>file.b.out</code><br><code>file.c.out</code><br><code>file.x.out</code><br><code>file.y.out</code><br><code>file.z.out</code>   <code>access.[!0-2].log</code>  <code>access.3.log</code><br><code>access.4.log</code><br><code>access.Q.log</code></p>
<h3 id="3-8-反模式"><a href="#3-8-反模式" class="headerlink" title="3.8.反模式"></a>3.8.反模式</h3><p>以感叹号（<code>!</code>）开头的模式将否定（重新包括）先前模式忽略的任何文件。此规则的例外是，如果排除了其父目录，则重新包含文件。</p>
<p>样式 示例匹配    <code>*.log</code><br><code>!error.log</code>  <code>error.log</code>或<code>logs/error.log</code>将不会被忽略</p>
<h3 id="3-9-gitignore范例"><a href="#3-9-gitignore范例" class="headerlink" title="3.9..gitignore范例"></a>3.9.<code>.gitignore</code>范例</h3><p>以下是<code>.gitignore</code>文件的外观示例：</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># Ignore the node_modules directory</span>
node_modules/

<span class="token comment" spellcheck="true"># Ignore Logs</span>
logs
*.log

<span class="token comment" spellcheck="true"># Ignore the build directory</span>
/dist

<span class="token comment" spellcheck="true"># The file containing environment variables </span>
.env

<span class="token comment" spellcheck="true"># Ignore IDE specific files</span>
.idea/
.vscode/
*.sw*
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="3-10本地-gitignore"><a href="#3-10本地-gitignore" class="headerlink" title="3.10本地.gitignore"></a>3.10本地<code>.gitignore</code></h3><p>本地<code>.gitignore</code>文件通常放置在存储库的根目录中。但是，您可以在存储库的不同子目录中创建多个<code>.gitignore</code>文件。 <code>.gitignore</code>文件中的模式相对于文件所在目录匹配。</p>
<p>在子目录中的文件中定义的模式优先于较高级目录中的模式。</p>
<p>本地<code>.gitignore</code>文件与其他开发人员共享，并且应包含对存储库的所有其他用户有用的模式。</p>
<h3 id="3-11-全局-gitignore"><a href="#3-11-全局-gitignore" class="headerlink" title="3.11.全局.gitignore"></a>3.11.全局<code>.gitignore</code></h3><p>Git还允许您创建全局<code>.gitignore</code>文件，您可以在其中为本地系统上的每个Git存储库定义忽略规则。</p>
<p>该文件可以命名为任意名称，并存储在任何位置。保留此文件的最常见位置是主目录。您必须手动<a href="https://www.myfreax.com/create-a-file-in-linux/">创建文件</a>并将Git配置为使用它。</p>
<p>例如，要将<code>~/.gitignore_global</code>设置为全局Git忽略文件，您可以执行以下操作：</p>
<p>创建文件：</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">touch</span> ~/.gitignore_global
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>将文件添加到Git配置：</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> config --global core.excludesfile ~/.gitignore_global
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>使用文本编辑器打开文件并向其中添加规则。</p>
<p>全局规则对于忽略您永远不想提交的特定文件（例如带有敏感信息或已编译的可执行文件的文件）特别有用。</p>
<h3 id="3-12-忽略以前提交的文件"><a href="#3-12-忽略以前提交的文件" class="headerlink" title="3.12.忽略以前提交的文件"></a>3.12.忽略以前提交的文件</h3><p>您的工作副本中的文件可以被追踪，也可以未被追踪。</p>
<p>要忽略先前提交的文件，您需要取消暂存并从索引中删除该文件，然后在<code>.gitignore</code>中为该文件添加规则：</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">rm</span> --cached filename
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><code>--cached</code>选项告诉git不要从工作树中删除文件，而只是从索引中删除它。</p>
<p>要递归删除目录，请使用<code>-r</code>选项：</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">rm</span> --cached filename
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>如果要从索引和本地文件系统中删除文件，请忽略<code>--cached</code>选项。</p>
<p>以递归方式删除文件时，使用<code>-n</code>选项将执行“空运行”并显示要删除的文件：</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">rm</span> -r -n directory
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>工具类</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello，world！</title>
    <url>/posts/cab2.html</url>
    <content><![CDATA[<p>博客问世，hello world!</p>
]]></content>
      <categories>
        <category>生活记录</category>
      </categories>
      <tags>
        <tag>hello world</tag>
      </tags>
  </entry>
  <entry>
    <title>windows 安装wsl2</title>
    <url>/posts/f43b.html</url>
    <content><![CDATA[<h1 id="Linux-WSL2-in-Windows-10"><a href="#Linux-WSL2-in-Windows-10" class="headerlink" title="Linux (WSL2)  in Windows 10"></a>Linux (WSL2)  in Windows 10</h1><h2 id="访问子系统文件方法"><a href="#访问子系统文件方法" class="headerlink" title="访问子系统文件方法"></a>访问子系统文件方法</h2><h3 id="在要浏览的Linux环境的Windows子系统中，运行以下命令-explorer-exe"><a href="#在要浏览的Linux环境的Windows子系统中，运行以下命令-explorer-exe" class="headerlink" title="在要浏览的Linux环境的Windows子系统中，运行以下命令 explorer.exe ."></a>在要浏览的Linux环境的Windows子系统中，运行以下命令 <code>explorer.exe .</code></h3><p><img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/image-20211008141453850.png" alt="image-20211008141453850"></p>
<h3 id="在文件资源路径中搜索-wsl"><a href="#在文件资源路径中搜索-wsl" class="headerlink" title="在文件资源路径中搜索  \\wsl$"></a>在文件资源路径中搜索  <code>\\wsl$</code></h3><p><img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/image-20211008141323242.png" alt="image-20211008141323242"></p>
<h2 id="wsl-命令"><a href="#wsl-命令" class="headerlink" title="wsl 命令"></a>wsl 命令</h2><h3 id="查看帮助"><a href="#查看帮助" class="headerlink" title="查看帮助"></a>查看帮助</h3><pre class="line-numbers language-yaml"><code class="language-yaml">wsl <span class="token punctuation">-</span>h
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="设置默认版本，选择linux默认运行在-wsl1-还是-wsl2"><a href="#设置默认版本，选择linux默认运行在-wsl1-还是-wsl2" class="headerlink" title="设置默认版本，选择linux默认运行在 wsl1 还是 wsl2"></a>设置默认版本，选择linux默认运行在 <strong>wsl1</strong> 还是 <strong>wsl2</strong></h3><pre class="line-numbers language-yaml"><code class="language-yaml">wsl <span class="token punctuation">-</span><span class="token punctuation">-</span>set<span class="token punctuation">-</span>default<span class="token punctuation">-</span>version 2
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="设置-某个linux发行版运行版本-需要先安装好-linux-后才可以转换"><a href="#设置-某个linux发行版运行版本-需要先安装好-linux-后才可以转换" class="headerlink" title="设置 某个linux发行版运行版本,需要先安装好 linux 后才可以转换"></a>设置 某个linux发行版运行版本,需要先安装好 linux 后才可以转换</h3><pre class="line-numbers language-yaml"><code class="language-yaml">wsl <span class="token punctuation">-</span><span class="token punctuation">-</span>set<span class="token punctuation">-</span>version &lt;distro<span class="token punctuation">></span> 2   eg<span class="token punctuation">:</span>wsl <span class="token punctuation">-</span><span class="token punctuation">-</span>set<span class="token punctuation">-</span>version ubuntu 1
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="ubuntu-版本转换"><a href="#ubuntu-版本转换" class="headerlink" title="ubuntu 版本转换"></a>ubuntu 版本转换</h3><pre class="line-numbers language-yaml"><code class="language-yaml">wsl <span class="token punctuation">-</span><span class="token punctuation">-</span>set<span class="token punctuation">-</span>version ubuntu 2
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="查看安装的-linux"><a href="#查看安装的-linux" class="headerlink" title="查看安装的 linux"></a>查看安装的 linux</h3><pre class="line-numbers language-yaml"><code class="language-yaml">wsl <span class="token punctuation">-</span><span class="token punctuation">-</span>list <span class="token punctuation">-</span><span class="token punctuation">-</span>verbose 或 wsl <span class="token punctuation">-</span>l <span class="token punctuation">-</span>v
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="停止所用运行Linux"><a href="#停止所用运行Linux" class="headerlink" title="停止所用运行Linux"></a>停止所用运行Linux</h3><pre class="line-numbers language-yaml"><code class="language-yaml">wsl <span class="token punctuation">-</span><span class="token punctuation">-</span>shutdowny
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="修改root用户密码"><a href="#修改root用户密码" class="headerlink" title="修改root用户密码"></a>修改root用户密码</h3><ul>
<li><p><code>wsl 默认是没有设置root密码的</code></p>
</li>
<li><p>设置 root 用户密码，这样要输三次命令，第一次当前用户密码，后两次就是设置密码以及确认密码</p>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 语法： sudo passwd 用户名 </span>
sudo passwd root
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p><strong>password updated successfully</strong> 代表密码更新成功 </p>
</li>
<li><p> 切换用户</p>
</li>
</ul>
<pre class="line-numbers language-yaml"><code class="language-yaml"> <span class="token comment" spellcheck="true"># 语法： su 用户名 </span>
su root
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="修个设置默认用户"><a href="#修个设置默认用户" class="headerlink" title="修个设置默认用户"></a>修个设置默认用户</h3><h4 id="查看自己安装的哪个版本"><a href="#查看自己安装的哪个版本" class="headerlink" title="查看自己安装的哪个版本"></a>查看自己安装的哪个版本<img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/image-20211008151611822.png" alt="image-20211008151611822"></h4><p><em>查看修改命令</em>，输入<code>ubuntu2004 /? </code>按回车会自动补全版本对应的命令 不要输入<code>ubuntu</code>要不然进入子系统了</p>
<p><img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/image-20211008151717515.png" alt="image-20211008151717515"></p>
<h4 id="设置默认用户"><a href="#设置默认用户" class="headerlink" title="设置默认用户"></a>设置默认用户</h4><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">语法</span><span class="token punctuation">:</span> ubuntu2004 config <span class="token punctuation">-</span><span class="token punctuation">-</span>default<span class="token punctuation">-</span>user 用户名(已存在)
PS C<span class="token punctuation">:</span>\WINDOWS\system32<span class="token punctuation">></span> ubuntu2004 config <span class="token punctuation">-</span><span class="token punctuation">-</span>default<span class="token punctuation">-</span>user root
没有报错就代表成功
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>重新打开已经是root用户了<img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/image-20211008151948185.png" alt="image-20211008151948185"></p>
<h3 id="启动虚拟机"><a href="#启动虚拟机" class="headerlink" title="启动虚拟机"></a>启动虚拟机</h3><ul>
<li><p>直接输入 系统名称：如 Ubuntu 、kali等 直接进入</p>
</li>
<li><p>或使用 wsl命令，例如</p>
<pre class="line-numbers language-yaml"><code class="language-yaml">wsl <span class="token punctuation">-</span>d ubuntu
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
</ul>
<h2 id="安装wsl-分发版"><a href="#安装wsl-分发版" class="headerlink" title="安装wsl 分发版"></a>安装wsl 分发版</h2><h3 id="安装-linux"><a href="#安装-linux" class="headerlink" title="安装 linux"></a>安装 linux</h3><ul>
<li><p>打开 应用商店（ <a href="https://aka.ms/wslstore">Microsoft Store</a>），搜索 <strong>wsl</strong> ,商店提供 ，<code>ubuntu</code>,<code>SUSE Linux Enterprise Server 12</code>,<code>Debian</code>,<code>Kail Linux</code></p>
</li>
<li><p>安装 ubuntu</p>
</li>
<li><p>设置用户名密码</p>
</li>
<li><p>设置 root密码</p>
<pre class="line-numbers language-yaml"><code class="language-yaml">sudo passwd root
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
</ul>
<h3 id="wsl-分发版上安装docker"><a href="#wsl-分发版上安装docker" class="headerlink" title="wsl 分发版上安装docker"></a>wsl 分发版上安装docker</h3><pre><code> sudo apt-get update
  sudo apt-get install -y \
      apt-transport-https \
      ca-certificates \
      curl \
      gnupg-agent \
      software-properties-common
  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
  sudo add-apt-repository \
     &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \
     $(lsb_release -cs) \
     stable&quot;
  sudo apt-get update
  sudo apt-get install docker-ce docker-ce-cli containerd.io
</code></pre>
<h3 id="docker相关命令"><a href="#docker相关命令" class="headerlink" title="docker相关命令"></a>docker相关命令</h3><h4 id="启动docker"><a href="#启动docker" class="headerlink" title="启动docker"></a>启动docker</h4><pre class="line-numbers language-yaml"><code class="language-yaml">sudo service docker start
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="运行容器测试"><a href="#运行容器测试" class="headerlink" title="运行容器测试"></a>运行容器测试</h4><pre class="line-numbers language-yaml"><code class="language-yaml">sudo docker run hello<span class="token punctuation">-</span>world
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="docker-以普通用户执行"><a href="#docker-以普通用户执行" class="headerlink" title="docker 以普通用户执行"></a>docker 以普通用户执行</h4><pre class="line-numbers language-yaml"><code class="language-yaml">sudo usermod <span class="token punctuation">-</span>aG docker your<span class="token punctuation">-</span>user
sudo service docker restart
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h4 id="windows-网络访问-linux"><a href="#windows-网络访问-linux" class="headerlink" title="windows 网络访问 linux"></a>windows 网络访问 linux</h4><ul>
<li><p>运行 nginx容器</p>
<pre class="line-numbers language-yaml"><code class="language-yaml">docker run <span class="token punctuation">-</span><span class="token punctuation">-</span>name nginx <span class="token punctuation">-</span>d <span class="token punctuation">-</span>p 8888<span class="token punctuation">:</span>80 nginx   
run：表示运行容器  <span class="token punctuation">-</span><span class="token punctuation">-</span>name：指定容器名称 <span class="token punctuation">-</span>d：表示进程在后台运行  <span class="token punctuation">-</span>p：指定映射端口 8888为外部访问端口 ，80位容器内部端口 nginx<span class="token punctuation">:</span>依赖表示镜像名称 可以带参数指定版本号
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>linux子系统内部访问</p>
<pre class="line-numbers language-yaml"><code class="language-yaml">curl http<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span><span class="token number">8888</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>windows访问</p>
<ol>
<li><p>查看 linuxIp</p>
<pre class="line-numbers language-yaml"><code class="language-yaml">ip addr
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>查看 eth0 ip,这里是 <code>192.168.161.203</code> 每个机器的都不一样</p>
<ul>
<li>访问：打开浏览器，访问 <code>http://192.168.161.203:8888</code> 得到nginx页面</li>
<li>访问 <code>http://127.0.0.1:8888</code> 得不到结果，拒绝访问</li>
</ul>
</li>
</ol>
</li>
</ul>
<h4 id="ubuntu-重启系统"><a href="#ubuntu-重启系统" class="headerlink" title="ubuntu 重启系统"></a>ubuntu 重启系统</h4><ul>
<li><p>在Linux 执行 重启或关机命令，会报错，需要执行 <code>wsl</code>命令</p>
<pre class="line-numbers language-yaml"><code class="language-yaml">ziyun@DESKTOP<span class="token punctuation">-</span>JVE2TQQ<span class="token punctuation">:</span>/mnt/c/WINDOWS/system32$ sudo reboot
System has not been booted with systemd as init system (PID 1). Can't operate.
Failed to talk to init daemon.
ziyun@DESKTOP<span class="token punctuation">-</span>JVE2TQQ<span class="token punctuation">:</span>/mnt/c/WINDOWS/system32$ sudo shutdown
System has not been booted with systemd as init system (PID 1). Can't operate.
ziyun@DESKTOP<span class="token punctuation">-</span>JVE2TQQ<span class="token punctuation">:</span>/mnt/c/WINDOWS/system32$
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>终止所有运行的linux</p>
<pre class="line-numbers language-yaml"><code class="language-yaml">wsl <span class="token punctuation">-</span><span class="token punctuation">-</span>shutdown
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>终止指定的linux</p>
<pre class="line-numbers language-yaml"><code class="language-yaml">wsl <span class="token punctuation">-</span><span class="token punctuation">-</span>terminate &lt;distro<span class="token punctuation">></span>
<span class="token comment" spellcheck="true"># 或 </span>
wsl <span class="token punctuation">-</span>t &lt;distro<span class="token punctuation">></span>   
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>查看 linux子系统列表</p>
<pre class="line-numbers language-yaml"><code class="language-yaml">wsl <span class="token punctuation">-</span>l  
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>关闭 ubutnu ,关闭没有任何显示</p>
<pre class="line-numbers language-yaml"><code class="language-yaml">wsl <span class="token punctuation">-</span>t Ubuntu
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>启动 ubuntu</p>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">-</span> 执行 `wsl <span class="token punctuation">-</span>d ubuntu`
<span class="token punctuation">-</span> 或者输入 ubuntu
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
</ul>
<h4 id="将ubuntu导出-安装的默认C盘目录"><a href="#将ubuntu导出-安装的默认C盘目录" class="headerlink" title="将ubuntu导出 安装的默认C盘目录"></a>将ubuntu导出 安装的默认C盘目录</h4><ul>
<li><p>导出到d盘dev目录</p>
<pre class="line-numbers language-yaml"><code class="language-yaml">wsl <span class="token punctuation">-</span><span class="token punctuation">-</span>export Ubuntu D<span class="token punctuation">:</span>/dev/ubuntu.tar  这个不能在系统终端上执行 ，需要在主系统上终端执行
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>导入</p>
<pre class="line-numbers language-yaml"><code class="language-yaml">wsl <span class="token punctuation">-</span><span class="token punctuation">-</span>import Ubuntu D<span class="token punctuation">:</span>/dev/Ubuntu  D<span class="token punctuation">:</span>/dev/ubuntu.tar
说明
<span class="token punctuation">-</span> –import <span class="token punctuation">:</span>导入
<span class="token punctuation">-</span> <span class="token key atrule">ubuntu</span><span class="token punctuation">:</span> 导入名称，可自定义
<span class="token punctuation">-</span> <span class="token key atrule">D:/dev/Ubuntu</span> <span class="token punctuation">:</span> 导入到那个目录，导入成功，有 ext4.vhdx 文件
<span class="token punctuation">-</span> D<span class="token punctuation">:</span>/dev/ubuntu.tar： 源文件
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h4 id="win10中WSL-2运行的Docker-Desktop运行文件从C盘迁移到其他目录"><a href="#win10中WSL-2运行的Docker-Desktop运行文件从C盘迁移到其他目录" class="headerlink" title="win10中WSL 2运行的Docker Desktop运行文件从C盘迁移到其他目录"></a>win10中WSL 2运行的Docker Desktop运行文件从C盘迁移到其他目录</h4><blockquote>
<p><code>**WSL**</code> </p>
<p>适用于 Linux 的 Windows 子系统，★适用于 Linux 的 Windows 子系统可让开发人员按原样运行 GNU/Linux 环境 - 包括大多数<a href="https://cloud.tencent.com/product/cli?from=10680">命令行工具</a>、实用工具和应用程序 - 且不会产生虚拟机开销。 ”</p>
<p><strong>什么是 WSL 2？</strong></p>
<p>★WSL 2 是适用于 Linux 的 Windows 子系统体系结构的一个新版本，它支持适用于 Linux 的 Windows 子系统在 Windows 上运行 ELF64 Linux 二进制文件。它的主要目标是提高文件系统性能，以及添加完全的系统调用兼容性。 ”</p>
</blockquote>
<ul>
<li><p>启用 WSL 后，docker 运行数据都在 WSL 发行版中，文件位置都只能由 WSL 管理！安装 docker 后，docker 会自动创建 2 个发行版：</p>
<ul>
<li>docker-desktop</li>
<li>docker-desktop-data<img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/image-20211008174721649.png" alt="image-20211008174721649"></li>
</ul>
</li>
<li><p>WSL 发行版默认都是安装在 C 盘，在<code>%LOCALAPPDATA%/Docker/wsl</code> 目录 docker 的运行数据、镜像文件都存在<code>%LOCALAPPDATA%/Docker/wsl/data/ext4.vhdx </code>中，C盘空间不大的没玩多久就要紧张了。。。</p>
</li>
<li><p>网上查了一下 wsl 发行版迁移，几乎都是说使用 LxRunOffline.exe</p>
<p>经过我试验，LxRunOffline.exe 确实可以迁移自己安装的发行版，却迁移不了wsl2 安装docker 自动创建的 2 个发行版</p>
<p>后面只好查别的方法</p>
</li>
<li><p>下面是操作方法：</p>
<ol>
<li><p>首先关闭 docker</p>
</li>
<li><p>关闭所有发行版：<code>wsl --shutdown</code></p>
</li>
<li><p>将 docker-desktop-data 导出到 <code>D:\SoftwareData\wsl\docker-desktop-data\docker-desktop-data.tar</code>（注意，原有的 docker images 不会一起导出）</p>
</li>
</ol>
<pre class="line-numbers language-yaml"><code class="language-yaml">    wsl <span class="token punctuation">-</span><span class="token punctuation">-</span>export docker<span class="token punctuation">-</span>desktop<span class="token punctuation">-</span>data D<span class="token punctuation">:</span>\SoftwareData\wsl\docker<span class="token punctuation">-</span>desktop<span class="token punctuation">-</span>data\docker<span class="token punctuation">-</span>desktop<span class="token punctuation">-</span>data.tar
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ol start="4">
<li><p>注销 docker-desktop-data：<code>wsl --unregister docker-desktop-data</code></p>
</li>
<li><p>重新导入 docker-desktop-data 到要存放的文件夹：D:\SoftwareData\wsl\docker-desktop-data\：</p>
<pre class="line-numbers language-yaml"><code class="language-yaml">wsl <span class="token punctuation">-</span><span class="token punctuation">-</span>import docker<span class="token punctuation">-</span>desktop<span class="token punctuation">-</span>data D<span class="token punctuation">:</span>\SoftwareData\wsl\docker<span class="token punctuation">-</span>desktop<span class="token punctuation">-</span>data\ D<span class="token punctuation">:</span>\SoftwareData\wsl\docker<span class="token punctuation">-</span>desktop<span class="token punctuation">-</span>data\docker<span class="token punctuation">-</span>desktop<span class="token punctuation">-</span>data.tar <span class="token punctuation">-</span><span class="token punctuation">-</span>version 2
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/image-20211008175644724.png" alt="image-20211008175644724"></p>
</li>
</ol>
</li>
</ul>
<ol start="6">
<li><p>只需要迁移 docker-desktop-data 一个发行版就行，另外一个不用管，它占用空间很小。</p>
<p>完成以上操作后，原来的<code>%LOCALAPPDATA%/Docker/wsl/data/ext4.vhdx</code> 就迁移到新目录了：</p>
</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/image-20211008175725622.png" alt="image-20211008175725622"></p>
<h4 id="国内加速地址"><a href="#国内加速地址" class="headerlink" title="国内加速地址"></a>国内加速地址</h4><ol>
<li>Docker中国区官方镜像： <a href="https://registry.docker-cn.com/">https://registry.docker-cn.com</a></li>
<li>腾讯源： <a href="https://mirror.ccs.tencentyun.com/">https://mirror.ccs.tencentyun.com</a></li>
<li>网易： <a href="http://hub-mirror.c.163.com/">http://hub-mirror.c.163.com</a></li>
<li>中科大： <a href="https://docker.mirrors.ustc.edu.cn/">https://docker.mirrors.ustc.edu.cn</a></li>
</ol>
<h4 id="Docker-配置国内镜像源加速-https-www-cnblogs-com-cao-lei-p-14448052-html"><a href="#Docker-配置国内镜像源加速-https-www-cnblogs-com-cao-lei-p-14448052-html" class="headerlink" title="Docker 配置国内镜像源加速(https://www.cnblogs.com/cao-lei/p/14448052.html)"></a>Docker 配置国内镜像源加速(<a href="https://www.cnblogs.com/cao-lei/p/14448052.html">https://www.cnblogs.com/cao-lei/p/14448052.html</a>)</h4><pre class="line-numbers language-yaml"><code class="language-yaml">vi /etc/docker/daemon.json 
<span class="token comment" spellcheck="true"># 内容如下： </span>
&amp;<span class="token comment" spellcheck="true">#123;  </span>
<span class="token key atrule">"registry-mirrors"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>    
<span class="token string">"https://xx4bwyg2.mirror.aliyuncs.com"</span><span class="token punctuation">,</span>    
<span class="token string">"http://f1361db2.m.daocloud.io"</span><span class="token punctuation">,</span>    
<span class="token string">"https://registry.docker-cn.com"</span><span class="token punctuation">,</span>    
<span class="token string">"http://hub-mirror.c.163.com"</span><span class="token punctuation">,</span>    
<span class="token string">"https://docker.mirrors.ustc.edu.cn"</span>  
<span class="token punctuation">]</span> 
&amp;<span class="token comment" spellcheck="true">#125;&amp;#123;&amp;#125; </span>
<span class="token comment" spellcheck="true"># 退出并保存 :wq </span>
<span class="token comment" spellcheck="true"># 使配置生效   systemctl daemon-reload </span>
<span class="token comment" spellcheck="true"># 重启         Docker systemctl restart docker</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><blockquote>
<p><a href="https://cloud.tencent.com/developer/article/1679501?from=article.detail.1594940">https://cloud.tencent.com/developer/article/1679501?from=article.detail.1594940</a></p>
<p><a href="https://www.hdboy.top/show/35">https://www.hdboy.top/show/35</a></p>
<p><a href="https://blog.csdn.net/qq_38856939/article/details/116528514">https://blog.csdn.net/qq_38856939/article/details/116528514</a></p>
</blockquote>
]]></content>
      <categories>
        <category>读写</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>使用AES算法加密Hexo相册</title>
    <url>/posts/6df1.html</url>
    <content><![CDATA[<p>本教程承接上篇<a href="/2019/07/22/hexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E4%B8%80%E7%BA%A7%E5%88%86%E7%B1%BB%E7%9B%B8%E5%86%8C/">Hexo博客添加一级分类相册</a>。</p>
<p>在上篇教程中，我们已经实现了hexo的分类相册功能。然后我发现那个大佬的相册竟然还有加密的功能（点击进入<a href="http://www.rayblog.cn/album/">大佬的相册</a>），在大佬的这篇<a href="http://www.rayblog.cn/posts/uncategorized/2017-07-05-establish-blog.html">教程</a>下面，还有一个参考资料：使用AES算法加密hexo文章，可惜的是链接已经失效了，不过也没有关系，在网上查找相关资料后，我也把它实现了，本篇教程就来实现相册加密功能。</p>
<p>先来科普一下AES加密算法：高级加密标准（英语：Advanced Encryption Standard，缩写：AES），在密码学中又称Rijndael加密法，是美国联邦政府采用的一种区块加密标准。这个标准用来替代原先的DES，已经被多方分析且广为全世界所使用。经过五年的甄选流程，高级加密标准由美国国家标准与技术研究院（NIST）于2001年11月26日发布于FIPS PUB 197，并在2002年5月26日成为有效的标准。2006年，高级加密标准已然成为对称密钥加密中最流行的算法之一。</p>
<h4 id="1、主题自带的加密"><a href="#1、主题自带的加密" class="headerlink" title="1、主题自带的加密"></a>1、主题自带的加密</h4><p>首先我发现本主题自带一个加密功能：如下图：</p>
<p><img src="https://images.liyangzone.com/article_img/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/%E5%8A%A0%E5%AF%86%E7%9B%B8%E5%86%8C%E6%95%99%E7%A8%8B/20190730_120352.png"></p>
<p>它的实现效果是这样的：</p>
<p><img src="https://images.liyangzone.com/article_img/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/%E5%8A%A0%E5%AF%86%E7%9B%B8%E5%86%8C%E6%95%99%E7%A8%8B/20190730_120754.png"></p>
<p>在进入界面的时候就要求输入密码，不输或输入错误都会跳转到首页。</p>
<p>在我看了源码之后发现是这样实现的，如果文章配置了加密就在页面里加上一段js代码，源码在<code>post.ejs</code>文件里，如下图；</p>
<p><img src="https://images.liyangzone.com/article_img/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/%E5%8A%A0%E5%AF%86%E7%9B%B8%E5%86%8C%E6%95%99%E7%A8%8B/20190730_121113.png"></p>
<p>页面内生成的js代码呢，是这样的：</p>
<p><img src="https://images.liyangzone.com/article_img/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/%E5%8A%A0%E5%AF%86%E7%9B%B8%E5%86%8C%E6%95%99%E7%A8%8B/20190730_121325.png"></p>
<p>我们可以看到密码是直接写在页面内的，主题作者是采用<code>SHA256</code>再加密一遍密码，再用这个值当密码，防止别人识破。然而这种方式是伪加密的，查看网页的源代码就可以看到文章的内容。这种方式可以阻挡99%的人，但是对付懂行的人就不行了，有心人费点心思就能破解。</p>
<h4 id="2、Hexo插件加密"><a href="#2、Hexo插件加密" class="headerlink" title="2、Hexo插件加密"></a>2、Hexo插件加密</h4><p>然后我以<code>hexo 加密</code>为关键字搜索相关教程，得到的结果如下：</p>
<p><img src="https://images.liyangzone.com/article_img/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/%E5%8A%A0%E5%AF%86%E7%9B%B8%E5%86%8C%E6%95%99%E7%A8%8B/20190730_115324.png"></p>
<p>里面的内容大同小异，不外乎两个hexo的插件：一个是<code>hexo-blog-encrypt</code>，另一个是<code>hexo-encrypt</code>。在我把两个插件都尝试过了之后，发现这两个插件只能加密<code>文章</code>，也就是hexo从md文件里读取到的文章内容。而我们的相册呢，是根据配置文件自动生成的，并没有在md文件里写着，实现不了加密。</p>
<p>好吧，那我就研究一下这两个插件的原理，看它们是如何实现文章加密的。</p>
<p>先使用<code>hexo-blog-encrypt</code>插件，给<a href="">hello world</a>这篇文章加密试试：<br>首先启用该插件，在根目录的_config.yml中启用该插件，添加以下代码:</p>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># Security  </span>
  <span class="token key atrule">encrypt</span><span class="token punctuation">:</span> 
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>然后设置文章的密码，在文章头部加上<code>password</code>字段,密码为2233:</p>
<pre class="line-numbers language-markdown"><code class="language-markdown">
<span class="token hr punctuation">---</span>
title: Hello，world！
date: 2019-07-15 17:25:30
password: 2233
tags: 
<span class="token list punctuation">-</span> hello world
categories:
<span class="token list punctuation">-</span> 日志  
<span class="token hr punctuation">---</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后<code>hexo-blog-encrypt</code>插件就会把文章加密了，如下图：</p>
<p><img src="https://images.liyangzone.com/article_img/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/%E5%8A%A0%E5%AF%86%E7%9B%B8%E5%86%8C%E6%95%99%E7%A8%8B/20190730_131238.png"></p>
<p>页面结构如下：</p>
<p><img src="https://images.liyangzone.com/article_img/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/%E5%8A%A0%E5%AF%86%E7%9B%B8%E5%86%8C%E6%95%99%E7%A8%8B/20190730_131459.png"></p>
<p>文章的内容被加密成了这么一坨字符串，解密后变成了这样：</p>
<p><img src="https://images.liyangzone.com/article_img/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/%E5%8A%A0%E5%AF%86%E7%9B%B8%E5%86%8C%E6%95%99%E7%A8%8B/20190730_131813.png"></p>
<p>文章的内容，就是两个P标签。</p>
<h4 id="3、插件的加密过程"><a href="#3、插件的加密过程" class="headerlink" title="3、插件的加密过程"></a>3、插件的加密过程</h4><p>那一坨字符串是怎么变成两个P标签的呢，我仔细研究后发现解密的功能在<code>blog-encrypt.js</code>这个文件里，在知道正确密码的情况下，执行了四步转换才将那个字符串解密，源码如下：</p>
<p><img src="https://images.liyangzone.com/article_img/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/%E5%8A%A0%E5%AF%86%E7%9B%B8%E5%86%8C%E6%95%99%E7%A8%8B/20190730_133345.png"></p>
<p>那么这四步都干了什么呢，我把上面加密后的一坨字符串和相关js都放到一个html里在浏览器控制台调试一下，看看究竟是怎么解密的：</p>
<p><img src="https://images.liyangzone.com/article_img/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/%E5%8A%A0%E5%AF%86%E7%9B%B8%E5%86%8C%E6%95%99%E7%A8%8B/20190730_133720.png"></p>
<p>控制台输出如下：</p>
<p><img src="https://images.liyangzone.com/article_img/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/%E5%8A%A0%E5%AF%86%E7%9B%B8%E5%86%8C%E6%95%99%E7%A8%8B/20190730_133817.png"></p>
<p>我们可以看到，在第四步输出了解密后的HTML标签。</p>
<p>解密步骤如下：</p>
<p>1、根据密码使用AES算法将密文解密，解密的代码为：</p>
<pre class="line-numbers language-js"><code class="language-js">  <span class="token keyword">let</span> content <span class="token operator">=</span> CryptoJS<span class="token punctuation">.</span>AES<span class="token punctuation">.</span><span class="token function">decrypt</span><span class="token punctuation">(</span>encriptHtmlStr<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>解密出来的内容是一个JS对象，里面有一个words数组，展开后如下图：</p>
<p><img src="https://images.liyangzone.com/article_img/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/%E5%8A%A0%E5%AF%86%E7%9B%B8%E5%86%8C%E6%95%99%E7%A8%8B/20190730_135141.png"></p>
<p>2、将上面那个JS对象转换为utf-8码，转换后为成为一个base64字符串。</p>
<p>3、解码base64字符串，解码后是一个经过js转码(escape)的字符串。</p>
<p>4、解码(unescape)上面的字符串，最终结果为HTML标签。</p>
<p>既然知道了解密的过程，那么可以推断加密过程就是上述步骤的逆操作，在查看<code>hexo-blog-encrypt</code>的源码之后（在<code>node_modules</code>目录下），果不其然，找到如下代码：</p>
<pre class="line-numbers language-js"><code class="language-js">data<span class="token punctuation">.</span>content <span class="token operator">=</span> <span class="token function">escape</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>
data<span class="token punctuation">.</span>content <span class="token operator">=</span> CryptoJS<span class="token punctuation">.</span>enc<span class="token punctuation">.</span>Utf8<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>
data<span class="token punctuation">.</span>content <span class="token operator">=</span> CryptoJS<span class="token punctuation">.</span>enc<span class="token punctuation">.</span>Base64<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>
data<span class="token punctuation">.</span>content <span class="token operator">=</span> CryptoJS<span class="token punctuation">.</span>AES<span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>content<span class="token punctuation">,</span> <span class="token function">String</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>CryptoJS是引入的<code>npm</code>插件<code>crypto-js</code></p>
<pre class="line-numbers language-js"><code class="language-js">
<span class="token keyword">const</span> CryptoJS <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'crypto-js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>那么我们也能写一个加密函数，在生成HTML字符串的时候加密它，然后把加密后的字符串渲染出来。</p>
<h4 id="4、加密辅助函数"><a href="#4、加密辅助函数" class="headerlink" title="4、加密辅助函数"></a>4、加密辅助函数</h4><p>然而在实际操作的时候我发现在ejs文件里面用常规的方法引入<code>npm</code>插件是不行的，无论是<code>import &#39;crypto-js&#39;</code>还是 <code>require(&#39;crypto-js&#39;)</code>都是不行的。那么如何在ejs里面调用外部函数呢？ </p>
<p>在查看<a href="https://hexo.io/zh-cn/api/helper.html">官方文档</a>之后发现需要自己写一个辅助函数（helper），才能在ejs里调用它：</p>
<p><img src="https://images.liyangzone.com/article_img/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/%E5%8A%A0%E5%AF%86%E7%9B%B8%E5%86%8C%E6%95%99%E7%A8%8B/20190730_192430.png"></p>
<p>然后我们在主题根目录下新建以下目录和文件<code>scripts/helpers/encrypt.js</code>，<code>encrypt.js</code>内代码如下：</p>
<pre class="line-numbers language-js"><code class="language-js">
<span class="token comment" spellcheck="true">/* global hexo */</span>


<span class="token string">'use strict'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> CryptoJS <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'crypto-js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

hexo<span class="token punctuation">.</span>extend<span class="token punctuation">.</span>helper<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">'aes'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

  content <span class="token operator">=</span> <span class="token function">escape</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>
  content <span class="token operator">=</span> CryptoJS<span class="token punctuation">.</span>enc<span class="token punctuation">.</span>Utf8<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>
  content <span class="token operator">=</span> CryptoJS<span class="token punctuation">.</span>enc<span class="token punctuation">.</span>Base64<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>
  content <span class="token operator">=</span> CryptoJS<span class="token punctuation">.</span>AES<span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> <span class="token function">String</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> content<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>注册一个名为<code>aes</code>的辅助函数，这样才能在ejs文件里使用它。</p>
<p>然后将<code>gallery.ejs</code>文件内中间的HTML部分改成如下代码：</p>
<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>photo-wrapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">if</span> <span class="token attr-name">(page.password</span> <span class="token attr-name">)</span> <span class="token attr-name">&amp;#123;</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>

            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/lib/crypto-js.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/js/gallery-encrypt.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hbe-security<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hbe-input-container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hbe-form-control<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pass<span class="token punctuation">"</span></span>  <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请输入密码查看内容<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:;<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn-decrypt<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn_decrypt<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>解密<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>  <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mygallery<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>waterfall<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>encrypt-blog<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">display</span><span class="token punctuation">:</span>none</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%-</span> <span class="token attr-name">aes(imageStr,</span> <span class="token attr-name">page.password)</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">&amp;#125;</span> <span class="token attr-name">else</span> <span class="token attr-name">&amp;#123;</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>waterfall<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>encrypt-blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%-</span> <span class="token attr-name">imageStr</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">&amp;#125;</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>初始化<code>justifiedGallery</code>插件的那句代码修改成下面的，就是改了一个id</p>
<pre class="line-numbers language-js"><code class="language-js">  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#encrypt-blog"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">justifiedGallery</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>margins<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> rowHeight<span class="token punctuation">:</span> <span class="token number">150</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这段代码的作用就是判断相册是否有密码，有则加密，没有则正常渲染，密码也是写在md文件的头部，加密后页面样式和HTML结构如下：</p>
<p><img src="https://images.liyangzone.com/article_img/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/%E5%8A%A0%E5%AF%86%E7%9B%B8%E5%86%8C%E6%95%99%E7%A8%8B/20190730_220409.png"></p>
<p><img src="https://images.liyangzone.com/article_img/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/%E5%8A%A0%E5%AF%86%E7%9B%B8%E5%86%8C%E6%95%99%E7%A8%8B/20190730_211445.png"></p>
<p>可以看到内容已经被加密成了一坨乱码，在这里，我手动加了一个<code>解密</code>按钮，原来插件是没有的，然后写点css美化一下，我是加到了<code>my.css</code>里面</p>
<pre class="line-numbers language-css"><code class="language-css"><span class="token number">.</span>hbe-input-container  <span class="token number">.</span>btn-decrypt&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>
  <span class="token property">vertical-align</span><span class="token punctuation">:</span> top<span class="token punctuation">;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">120</span>px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">32</span>px<span class="token punctuation">;</span>
  <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">32</span>px<span class="token punctuation">;</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">16</span>px<span class="token punctuation">;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#ffffff</span><span class="token punctuation">;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#3f90ff</span><span class="token punctuation">;</span>
  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
  <span class="token property">-webkit-border-radius</span><span class="token punctuation">:</span> <span class="token number">3</span>px<span class="token punctuation">;</span>
  <span class="token property">-moz-border-radius</span><span class="token punctuation">:</span> <span class="token number">3</span>px<span class="token punctuation">;</span>
  <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">3</span>px<span class="token punctuation">;</span>
&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="5、修改解密js文件"><a href="#5、修改解密js文件" class="headerlink" title="5、修改解密js文件"></a>5、修改解密js文件</h4><p>因为和文章的加密有点区别，而且插件的解密操作会在id为<code>encrypt-blog</code>的div上加上一些样式，会导致<code>justifiedGallery</code>样式错乱，所以是不能直接用文章的解密js文件（<code>/lib/blog-encrypt.js</code>）的。此文件在发布后才会生成，在<code>hexo-blog-encrypt</code>插件的目录（<code>node_modules/hexo-blog-encrypt</code>）下也能找到，需要做些修改才能解密相册，找到该文件后复制一份，重命名为<code>gallery-encrypt.js</code>,放到主题目录<code>source/js</code>下，替换文件尾部<code>$(document).ready()</code>里面的代码如下：</p>
<pre class="line-numbers language-js"><code class="language-js">
<span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span>
  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> password <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token function">getCookie</span><span class="token punctuation">(</span><span class="token function">GenerateCookieName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Get password from Cookie:$&amp;#123;password&amp;#125;`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>password <span class="token operator">!=</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">decryptAES</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// Delete cookie</span>
        <span class="token function">setCookie</span><span class="token punctuation">(</span>COOKIE_NAME<span class="token punctuation">,</span> password<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'encrypt-blog'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token string">'style'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#encrypt-blog"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">justifiedGallery</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>margins<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> rowHeight<span class="token punctuation">:</span> <span class="token number">150</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'pass'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onkeypress <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>keyPressEvent<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

      password <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'pass'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>keyPressEvent<span class="token punctuation">.</span>keyCode <span class="token operator">===</span> <span class="token number">13</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

        <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">decryptAES</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
          document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'encrypt-blog'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token string">'style'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

          <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#encrypt-blog"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">justifiedGallery</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>margins<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> rowHeight<span class="token punctuation">:</span> <span class="token number">150</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

          <span class="token function">setCookie</span><span class="token punctuation">(</span><span class="token function">GenerateCookieName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> password<span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#btn_decrypt'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

      password <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'pass'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">decryptAES</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'encrypt-blog'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token string">'style'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#encrypt-blog"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">justifiedGallery</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>margins<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> rowHeight<span class="token punctuation">:</span> <span class="token number">150</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">setCookie</span><span class="token punctuation">(</span><span class="token function">GenerateCookieName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> password<span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这段代码的作用就是在解密后清除id为<code>encrypt-blog</code>这个div的样式，然后再初始化 <code>justifiedGallery</code>插件，解决图片错乱的问题，还有给按钮绑定解密的操作。</p>
<p>至此，相册的加密功能也已经实现了。你可以前往<a href="/galleries/private/">体验一下</a>，看你能不能破解。</p>
<h4 id="6、注意事项"><a href="#6、注意事项" class="headerlink" title="6、注意事项"></a>6、注意事项</h4><p>需要注意的是上面HTML里引入的<code>crypto-js.js</code>这个文件，只有安装了<code>hexo-blog-encrypt</code>插件发布后才会生成，如果你不想安装这个插件，则需要手动安装<code>crypto-js</code>: <code>npm i crypto-js</code>, 然后在插件目录下找到<code>crypto-js.js</code>文件，复制出来放到<code>source/js</code>下，引用路径也要改一下。</p>
<p>博客源码已上传至github: <a href="https://github.com/liyang5945/liyang5945.github.io">点击前往</a>,觉得不错的可以给个STAR支持一下。</p>
]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>教程</tag>
        <tag>相册</tag>
        <tag>加密</tag>
      </tags>
  </entry>
  <entry>
    <title>Google搜索的一些技巧</title>
    <url>/posts/0.html</url>
    <content><![CDATA[<h1 id="使用Google搜索的一些技巧"><a href="#使用Google搜索的一些技巧" class="headerlink" title="使用Google搜索的一些技巧"></a>使用Google搜索的一些技巧</h1><p>本文转自： <a href="https://www.cnblogs.com/shenjp/p/14463433.html">https://www.cnblogs.com/shenjp/p/14463433.html</a></p>
<p>在开发的过程中，免不了要去搜索一些内容，经常使用Google搜索，刚好看到该文章对于搜索本有帮助，所以转过来分享一下，也当做自己的笔记使用。</p>
<h1 id="一、使用双引号进行强制精确匹配搜索"><a href="#一、使用双引号进行强制精确匹配搜索" class="headerlink" title="一、使用双引号进行强制精确匹配搜索"></a>一、使用双引号进行强制精确匹配搜索</h1><pre><code>&quot;what is javascript&quot;
</code></pre>
<p>　<img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/202110131118041.png" alt="img"> </p>
<h1 id="二、AND-运算符"><a href="#二、AND-运算符" class="headerlink" title="二、AND 运算符"></a>二、AND 运算符</h1><p>使用 AND 运算符，只会返回他们都相关的结果</p>
<pre><code>html AND css
</code></pre>
<p><img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/202110131118095.png" alt="img"></p>
<h1 id="三、OR-运算符"><a href="#三、OR-运算符" class="headerlink" title="三、OR 运算符"></a>三、OR 运算符</h1><p>使用 OR 运算符，获取搜索词中的某一个结果</p>
<pre><code>(javascript OR python) free course
</code></pre>
<p><img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/202110131118549.png" alt="img"></p>
<h1 id="四、-操作符将排除包含词的结果"><a href="#四、-操作符将排除包含词的结果" class="headerlink" title="四、- 操作符将排除包含词的结果"></a>四、- 操作符将排除包含词的结果</h1><pre><code>javascript -css
</code></pre>
<p><img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/202110131119443.png" alt="img"></p>
<h1 id="五、可以使用-通配符作为占位符，它将被任何单词或短语替换"><a href="#五、可以使用-通配符作为占位符，它将被任何单词或短语替换" class="headerlink" title="五、可以使用(*)通配符作为占位符，它将被任何单词或短语替换"></a>五、可以使用(*)通配符作为占位符，它将被任何单词或短语替换</h1><pre><code>&quot;how to start * in 6 months&quot;
</code></pre>
<p><img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/202110131119927.png" alt="img"></p>
<h1 id="六、在一个单一的网站搜索"><a href="#六、在一个单一的网站搜索" class="headerlink" title="六、在一个单一的网站搜索"></a>六、在一个单一的网站搜索</h1><pre><code>vue:github.com
</code></pre>
<p><img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/202110131119722.png" alt="img"></p>
<h1 id="七、查找特定的文件类型"><a href="#七、查找特定的文件类型" class="headerlink" title="七、查找特定的文件类型"></a>七、查找特定的文件类型</h1><pre><code>filetype:pdf learn css
</code></pre>
<p><img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/202110131119235.png" alt="img"></p>
<h1 id="八、搜索一个数字范围"><a href="#八、搜索一个数字范围" class="headerlink" title="八、搜索一个数字范围"></a>八、搜索一个数字范围</h1><pre><code>ecmascript 2016..2018
</code></pre>
<p><img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/202110131117825.png" alt="img"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>阅读</tag>
      </tags>
  </entry>
  <entry>
    <title>前端工程化</title>
    <url>/posts/91c6.html</url>
    <content><![CDATA[<h1 id="前端工程化"><a href="#前端工程化" class="headerlink" title="前端工程化"></a>前端工程化</h1><h1 id="前端工程化到底是什么？"><a href="#前端工程化到底是什么？" class="headerlink" title="前端工程化到底是什么？"></a>前端工程化到底是什么？</h1><h2 id="工程及工程化"><a href="#工程及工程化" class="headerlink" title="工程及工程化"></a><strong>工程及工程化</strong></h2><p>一个工程其实就是一个项目，比如一个网站或者一个 APP。普通的程序员，大部分情况下，都是处于其中的一个环节。要学习工程化，就需要先了解工程化的整个生命周期。</p>
<p><img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/a83aac87974f4c01bb2e9cc8c561dd04~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p>
<p>图示中已经是我简化过的内容了，实际的过程更加复杂，其中会牵扯到非常多的人力物力财力以及要花费相当大的管理成本。一个工程从立项到交付上线的整个过程中，一定会使用到各种工具。</p>
<p><img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/a1e4918d7cb3477e8449d6ad751005db~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p>
<p>那么<strong>工程化</strong>，其实就是<strong>完成项目过程中，用到的各种工具和技术</strong>。当然，这只是从简单的落地应用的角度来说的，工程化是非常复杂的。</p>
<p><img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/72bc7cf415b745eaa059d94332c21a62~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p>
<p>回到前端编程的范畴中，你会发现，整个项目的后半部分才是我们需要关注的。而这一部分，也就是我们所说的前端工程化的内容了。</p>
<h2 id="前端工程化-1"><a href="#前端工程化-1" class="headerlink" title="前端工程化"></a><strong>前端工程化</strong></h2><p>什么是前端工程化？<strong>前端工程化就是通过各种工具和技术，提升前端开发效率的过程。</strong></p>
<p>这句话有两个含义：</p>
<p>1：前端工程化的内容：各种工具和技术。</p>
<p>2：前端工程化的作用：通过使用工具，提升开发效率。</p>
<h3 id="开发中到底有哪些问题呢？"><a href="#开发中到底有哪些问题呢？" class="headerlink" title="开发中到底有哪些问题呢？"></a>开发中到底有哪些问题呢？</h3><p>1：项目上线前，代码需要压缩。</p>
<p><img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/2c848d40729a454db6db3b5917cfd485~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p>
<p><img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/d072455ccdc3428f9ce61d8f40447df5~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p>
<p>2：想要使用 ES6+ 或 CSS3 新特性，要解决兼容性问题。</p>
<p><a href="https://link.juejin.cn/?target=https://caniuse.com/">caniuse.com/</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/25031acfd2cc4e6eaa379723b97909d0~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p>
<p>3：想要使用 Less 增强 CSS 的编程性，但是浏览器不能直接支持 Less。</p>
<p><img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/914482679d90438fb138f424f02229bb~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p>
<p>4：多人协作开发，代码风格无法统一。</p>
<p><img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/90d30beb16c148219e7871ac2538ecb6~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p>
<h3 id="总结一下："><a href="#总结一下：" class="headerlink" title="总结一下："></a><strong>总结一下：</strong></h3><p>前端工程化解决的问题非常多，简而言之就是项目上线前的压缩代码，对 ES6+ 或 CSS3 新特性进行转换，对 Less 等 CSS 的预编译语言进行编译处理以及对不同代码风格的格式化等等，那相对应地也就出现了各种各样的工具，简单给工具分一下类别：</p>
<p><img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/dac005da1fb44643a0895c0e7de946e9~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p>
<p>每个类别下，都有很多不同的处理工具，我使用一个表格做了不完全的统计：</p>
<p><img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/0cf4fe5b82974b11a3ace7ddbdc95aa0~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p>
<p>但是一定要强调一下，现阶段工程化工具都异常强大，导致很多人对工程化存在误解，认为某个工具就是工程化了，比如webpack，这种思想要不得。</p>
<p><img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/e42b4d0d4a914e0aac0bed7bfc9c4342~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p>
<p>最后，前端工程化之所以成功和繁荣，有一个关键性角色，不容忽视，那就是 <strong>Node.js</strong>，可以这么说，<strong>前端工程化就是在 Node 的基础上发展的</strong>；</p>
<p><img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/26b1adf5382b4742aedf596d113d8715~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p>
<p>所以，作为前端程序员，Node 其实不是一个框架，更不是单纯写后台服务器的语言，不会 Node 的前端，一定不是好码农。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端工程化</tag>
      </tags>
  </entry>
  <entry>
    <title>sync-player：使用websocket实现异地同步看视频</title>
    <url>/posts/9904.html</url>
    <content><![CDATA[<p>前段时间我有这样一个需求，想和一个异地的人一起看电影，先后在网上找了一些方案，不过那几个方案都有一些缺点</p>
<ul>
<li><p><strong>coplay</strong> 一个浏览器插件，只能播放各大视频网站的视频，视频资源有限，我想要看的视频没有，比如一些经典电影和美剧之类</p>
</li>
<li><p><strong>微光APP</strong> 还是上面的问题，而且只有手机端</p>
</li>
<li><p><strong>向日葵等远程桌面</strong> 受限于网络问题，卡顿很严重，体验不好</p>
</li>
</ul>
<p>除了这几个方案之外我也尝试了直播的方案：</p>
<ul>
<li><p><strong>通过B站等直播平台进行直播，</strong> 缺点：有几十秒的延迟，而且不能保证两端播放进度同步，总会差个几秒，而且直播对上传带宽要求较高。</p>
</li>
<li><p><strong>自建直播平台，</strong>，我首先使用了腾讯云上的<code>云直播</code>解决方案，后来我又在自己的云服务器上使用<code>nginx+rtmp</code>搭建了直播服务，两个方案延迟差不多，大概在5-10秒，但还是无法解决两端视频不同步问题。</p>
</li>
</ul>
<p>作为一个切图仔，对用户体验还是有一定追求的，我是一个下载党，看电影必须下载到本地看，基本不看视频网站上的玩意</p>
<p>那么有没有能实现同步播放本地文件的方案呢，答案是肯定的，经过我的一些摸索和研究，我实现了本地文件的同步播放，同时支持PC和手机端，而且还支持外挂字幕等高级功能，如何实现请往下看。</p>
<h1 id="功能介绍-amp-特性："><a href="#功能介绍-amp-特性：" class="headerlink" title="功能介绍&amp;特性："></a>功能介绍&amp;特性：</h1><p>一个可以同步看视频的播放器，可用于异地同步观影、观剧，支持多人同时观看。<br>本项目有两个版本，web版运行在浏览器上，可跨平台，不限操作系统、设备，功能简单适用于要求不高的用户。还有基于SPlayer(射手影音)DIY的客户端版本(windows、MAC)，播放4K高清文件、外挂字幕，统统没问题。</p>
<h1 id="演示demo"><a href="#演示demo" class="headerlink" title="演示demo:"></a>演示demo:</h1><p>web版同步效果</p>
<p><img src="https://s1.ax1x.com/2020/09/19/wI60je.gif" alt="wI60je.gif"></p>
<p>客户端与web版同步效果</p>
<p><img src="https://s1.ax1x.com/2020/09/20/wofbYd.gif" alt="wofbYd.gif"></p>
<h1 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h1><p>基于websocket实现，与一些用websocket实现的聊天室类似，只不过这个聊天室里的消息换成了播放暂停的动作和时间信息，客户端收到消息后执行相应的动作:播放、暂停、快进，以达到同时播放的效果。</p>
<h1 id="项目所用到的"><a href="#项目所用到的" class="headerlink" title="项目所用到的"></a>项目所用到的</h1><ul>
<li>node.js </li>
<li>socket.io</li>
<li>HTML5 video API </li>
<li>vue.js</li>
</ul>
<h1 id="如何使用："><a href="#如何使用：" class="headerlink" title="如何使用："></a>如何使用：</h1><p>本项目的核心是websocket，所以至少需要一台服务器提供websocket服务，websocket服务可以自己部署，可以使用第三方平台GoEasy提供的websocket服务(可免费使用两个月)。</p>
<p>1、自己部署：websocket服务器可以是一台具有公网IP的云服务器，也可以是一台具有公网IP的普通PC，没有公网IP也可以。你也可以使用zerotier或其他VPN工具将两台设备组成一个大局域网，让它们能互相通信。websocket服务器操作系统不限，只要有node.js环境。</p>
<p>websocket服务端部署方法：安装node.js环境，将server目录移动到服务器上，进入server目录，执行以下命令</p>
<p>安装项目依赖包</p>
<pre class="line-numbers language-bash"><code class="language-bash">
<span class="token comment" spellcheck="true"># 安装项目依赖包</span>

<span class="token function">npm</span> <span class="token function">install</span> 

<span class="token comment" spellcheck="true"># 启动websocket服务</span>

node index.js
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>2、使用GoEasy的websocket服务</p>
<p>注册GoEasy开发者账号并创建一个应用，获得appkey，复制到本项目相应位置即可。</p>
<p>GoEasy官网：<a href="https://www.goeasy.io/">https://www.goeasy.io</a></p>
<p>无论是使用哪种websocket服务都可以，本项目写了两套代码，只需将不用的那套注释掉即可(默认GoEasy)。</p>
<p>除了websocket服务器之外，还需要两个http服务端，一个是web服务端(提供html、css、js等文件的访问)，一个是视频服务端(提供视频文件访问)。</p>
<p>你可以将web服务部端署到以下位置：</p>
<ul>
<li>具有公网IP的服务器</li>
<li>github-pages或国内的码云提供的静态web服务</li>
<li>localhost(本地服务器)，同一个局域网内的设备访问该服务器内网IP</li>
</ul>
<p>视频文件只需一个视频地址就行，也有以下几种选择：</p>
<ul>
<li>具有公网IP的服务器</li>
<li>localhost(本地服务器)，同一个局域网内的设备访问该服务器内网IP</li>
<li>第三方视频地址</li>
</ul>
<p><img src="https://s1.ax1x.com/2020/09/17/wfntdU.png" alt="wfntdU.png"></p>
<p>使用场景1：云服务器带宽足够大(至少要大于播放视频的码率)，云服务器既可以作为websocket服务端，也可以作为http服务端。上图中所有设备都访问云服务器的ip或域名。</p>
<p>使用场景2：云服务器的带宽很小，这时候它只能作为websocket服务端，这时可以用上图中的PC1和PC2作为http服务端，PC1和PHONE1在一个内网访问PC1的内网IP，PC2和PHONE2在一个内网访问PC2的内网IP，PC3可作为自己的http服务端，PHONE3若是有提供视频文件的服务端，也可以使用。</p>
<p><img src="https://s1.ax1x.com/2020/09/17/wfnYZT.png" alt="wfnYZT.png"></p>
<p>使用场景3：需要使用zerotier或其他VPN工具将异地设备组成一个大局域网，其中任意一台PC均可作为websocket服务端和http服务端(需要上传带宽足够大)。上图中各设备都访问那台PC的内网ip即可。</p>
<p>最简单的使用方法，下载nginx开启一个本地服务器，下载本项目client文件夹放到到nginx根目录里，视频文件也放到里面。注册goeasy开发者账号并创建一个应用，获得appkey，并填入到appkey到代码(<code>script/main.js</code>)相应位置。然后浏览器打开 <code>192.168.3.58/client/</code>，填入你的视频地址<code>192.168.3.58/movie/xxx.mp4</code>或网络视频地址，对方也这样操作一番，即可实现同步播放视频，不过这种方法只能白嫖两个月。</p>
<p>web版本的功能比较简单，而且受限于网络问题，快进之类的操作需要缓冲一段时间。如果你不满足web版功能，对用户体验有更高的要求，如支持更多文件格式、播放高清本地视频文件、外挂字幕等，我也找到了另一种方式来满足你的需求。</p>
<p>那就是DIY一个开源的播放器的源码：SPlayer(射手影音)。</p>
<p>射手影音官网：<a href="https://splayer.org/">https://splayer.org</a></p>
<p>源码地址：<a href="https://github.com/chiflix/splayerx">https://github.com/chiflix/splayerx</a></p>
<p>在以<strong>electron + 播放器</strong>为关键字一番搜索之后，我找到了这个基于electron实现的开源播放器，并下载了源码来研究。</p>
<p>经过一番研究之后，我找到了控制视频播放、暂停、快进的代码位置，并将控制同步的代码移植了进去，从而也实现了同步功能，并且与web版兼容。</p>
<p>具体方法请看：<a href="https://github.com/liyang5945/sync-player/blob/master/how-to-modify-splayer.md">修改教程</a></p>
<p>本项目部分图标样式来源于此项目: <a href="https://github.com/Justineo/coplay">coplay</a> </p>
<p>本项目github地址：<a href="https://github.com/liyang5945/sync-player">点击前往</a> ，欢迎⭐⭐⭐STAR⭐⭐⭐</p>
]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>websocket</tag>
      </tags>
  </entry>
  <entry>
    <title>vue项目watch内的函数重复触发问题</title>
    <url>/posts/47a9.html</url>
    <content><![CDATA[<h4 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h4><p>有两个页面A和B，每个页面里都有一个<code>getList()</code>方法。这个两个方法都需要传一个相同的参数C，参数C的选择过程又比较麻烦。为了避免在切换A、B两个界面重复选择参数C的问题，我将参数C存入vuex中，然后在两个页面里都使用watch监听参数C来执行<code>getList()</code>方法。然后发现一个问题，从A页面进入B页面后，在B页面重新选择参数C，A页面的<code>getList()</code>方法竟然也会被执行，反之亦然，从B页面到A页面后，在A页面改变参数C也会执行B页面的<code>getList()</code>方法。</p>
<p>后来发现是使用了因为使用了keep-alive所致，keep-alive会将Vue实例始终保持在内存中，因此该Vue实例始终存续，相应的watchers始终生效，查找相关资料后，发现许多人也遇到了这个问题，最后找到以下两种解决方案：</p>
<h4 id="解决方法1"><a href="#解决方法1" class="headerlink" title="解决方法1"></a>解决方法1</h4><p>通过router路径来判断是否执行<code>getList()</code></p>
<pre class="line-numbers language-js"><code class="language-js">watch<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token function">someValue</span><span class="token punctuation">(</span>newValue<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>fullPath <span class="token operator">===</span> <span class="token string">'A页面路由路径'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">// do something</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="解决方法2"><a href="#解决方法2" class="headerlink" title="解决方法2"></a>解决方法2</h4><p>添加一个flag参数来判断页面是否是active状态，使用keep-alive缓存的组件只会触发<code>activated</code>和<code>deactivated</code>事件，所以就在这两个事件触发时把flag置为true和false，只有在flag为true的时候才执行<code>getList()</code></p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
  data <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
      activatedFlag<span class="token punctuation">:</span> <span class="token boolean">false</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
  watch<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token string">'someValue'</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>val <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>activatedFlag<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getlist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
  activated <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>activatedFlag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
  deactivated <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>activatedFlag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果页面比较多，而且各页面里的函数名称不一致的话，可以把上面代码的watch部分去掉写成一个mixin，在需要的页面引入即可</p>
<pre class="line-numbers language-js"><code class="language-js">  <span class="token keyword">import</span> activeFlag <span class="token keyword">from</span> <span class="token string">"@/mixin/activeFlag"</span><span class="token punctuation">;</span>

  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    mixins<span class="token punctuation">:</span> <span class="token punctuation">[</span>activeFlag<span class="token punctuation">]</span><span class="token punctuation">,</span>
    watch<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token string">'someValue'</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
          <span class="token keyword">if</span><span class="token punctuation">(</span>val <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>activatedFlag<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getlistA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getlistB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>bug</tag>
      </tags>
  </entry>
  <entry>
    <title>一个js数组分类求和算法</title>
    <url>/posts/e90d.html</url>
    <content><![CDATA[<p>需求详情：一个数组内有N个元素，元素有类型、名称、数量1、数量2等属性，计算出各类型元素的数量、数量1、数量2的和。</p>
<p>实际需求就是做出下图这样一个表格，各类型的合计信息用红色字体显示：</p>
<p><img src="https://images.liyangzone.com/article_img/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/%E5%85%B1%E7%94%A8/20200228_152031js%E5%88%86%E7%B1%BB%E6%B1%82%E5%92%8C%E7%AE%97%E6%B3%95.png"></p>
<p>原始数据格式如下：</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> rawData <span class="token operator">=</span> <span class="token punctuation">[</span>
      <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> type<span class="token punctuation">:</span> <span class="token string">'类型A'</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'名称1'</span><span class="token punctuation">,</span> count1<span class="token punctuation">:</span> <span class="token number">13</span><span class="token punctuation">,</span> count2<span class="token punctuation">:</span> <span class="token number">24</span><span class="token punctuation">,</span> count3<span class="token punctuation">:</span> <span class="token number">34</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
      <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> type<span class="token punctuation">:</span> <span class="token string">'类型A'</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'名称2'</span><span class="token punctuation">,</span> count1<span class="token punctuation">:</span> <span class="token number">13</span><span class="token punctuation">,</span> count2<span class="token punctuation">:</span> <span class="token number">24</span><span class="token punctuation">,</span> count3<span class="token punctuation">:</span> <span class="token number">34</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
      <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> type<span class="token punctuation">:</span> <span class="token string">'类型A'</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'名称3'</span><span class="token punctuation">,</span> count1<span class="token punctuation">:</span> <span class="token number">13</span><span class="token punctuation">,</span> count2<span class="token punctuation">:</span> <span class="token number">24</span><span class="token punctuation">,</span> count3<span class="token punctuation">:</span> <span class="token number">34</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
      <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> type<span class="token punctuation">:</span> <span class="token string">'类型B'</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'名称4'</span><span class="token punctuation">,</span> count1<span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span> count2<span class="token punctuation">:</span> <span class="token number">23</span><span class="token punctuation">,</span> count3<span class="token punctuation">:</span> <span class="token number">33</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
      <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> type<span class="token punctuation">:</span> <span class="token string">'类型B'</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'名称5'</span><span class="token punctuation">,</span> count1<span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span> count2<span class="token punctuation">:</span> <span class="token number">23</span><span class="token punctuation">,</span> count3<span class="token punctuation">:</span> <span class="token number">33</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
      <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> type<span class="token punctuation">:</span> <span class="token string">'类型B'</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'名称6'</span><span class="token punctuation">,</span> count1<span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span> count2<span class="token punctuation">:</span> <span class="token number">23</span><span class="token punctuation">,</span> count3<span class="token punctuation">:</span> <span class="token number">33</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
      <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> type<span class="token punctuation">:</span> <span class="token string">'类型C'</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'名称7'</span><span class="token punctuation">,</span> count1<span class="token punctuation">:</span> <span class="token number">11</span><span class="token punctuation">,</span> count2<span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">,</span> count3<span class="token punctuation">:</span> <span class="token number">35</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
      <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> type<span class="token punctuation">:</span> <span class="token string">'类型C'</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'名称8'</span><span class="token punctuation">,</span> count1<span class="token punctuation">:</span> <span class="token number">11</span><span class="token punctuation">,</span> count2<span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">,</span> count3<span class="token punctuation">:</span> <span class="token number">35</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token punctuation">]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>算法思路：遍历该数组，按类型生成一个二维数组，再遍历该二级数组及其子元素，每遍历完一个类型的子元素后求和，并创建一个新的元素存储该类型元素的和，最后生成一个包含各类型元素数量的新数组，实现代码如下:</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token function">calcSum</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        newArr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>newItem<span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>newArr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">===</span> arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            k <span class="token operator">=</span> j<span class="token punctuation">;</span>
          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
          newArr<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
          <span class="token keyword">const</span> tempArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
          tempArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tempArr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
      newArr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>subArr <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> sum_name <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> sum_count1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> sum_count2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> sum_count3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

        subArr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>subItem <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
          sum_name <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
          sum_count1 <span class="token operator">+</span><span class="token operator">=</span> subItem<span class="token punctuation">.</span>count1<span class="token punctuation">;</span>
          sum_count2 <span class="token operator">+</span><span class="token operator">=</span> subItem<span class="token punctuation">.</span>count2<span class="token punctuation">;</span>
          sum_count3 <span class="token operator">+</span><span class="token operator">=</span> subItem<span class="token punctuation">.</span>count3<span class="token punctuation">;</span>
          result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>subItem<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
          type<span class="token punctuation">:</span> subArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>type<span class="token punctuation">,</span>
           name<span class="token punctuation">:</span> sum_name<span class="token punctuation">,</span>
           count1<span class="token punctuation">:</span> sum_count1<span class="token punctuation">,</span>
           count2<span class="token punctuation">:</span> sum_count2<span class="token punctuation">,</span>
           count3<span class="token punctuation">:</span> sum_count3<span class="token punctuation">,</span>
           isSumRow<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">//该属性标记为求和行</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>生产的二维数组格式如下：</p>
<pre class="line-numbers language-js"><code class="language-js"> newArr <span class="token operator">=</span> <span class="token punctuation">[</span>
        <span class="token punctuation">[</span>
          <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'类型A'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'名称1'</span><span class="token punctuation">,</span> <span class="token string">'count1'</span><span class="token punctuation">:</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token string">'count2'</span><span class="token punctuation">:</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token string">'count3'</span><span class="token punctuation">:</span> <span class="token number">34</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
          <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'类型A'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'名称2'</span><span class="token punctuation">,</span> <span class="token string">'count1'</span><span class="token punctuation">:</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token string">'count2'</span><span class="token punctuation">:</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token string">'count3'</span><span class="token punctuation">:</span> <span class="token number">34</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
          <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'类型A'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'名称3'</span><span class="token punctuation">,</span> <span class="token string">'count1'</span><span class="token punctuation">:</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token string">'count2'</span><span class="token punctuation">:</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token string">'count3'</span><span class="token punctuation">:</span> <span class="token number">34</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span>
          <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'类型B'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'名称4'</span><span class="token punctuation">,</span> <span class="token string">'count1'</span><span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">'count2'</span><span class="token punctuation">:</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">'count3'</span><span class="token punctuation">:</span> <span class="token number">33</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
          <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'类型B'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'名称5'</span><span class="token punctuation">,</span> <span class="token string">'count1'</span><span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">'count2'</span><span class="token punctuation">:</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">'count3'</span><span class="token punctuation">:</span> <span class="token number">33</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
          <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'类型B'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'名称6'</span><span class="token punctuation">,</span> <span class="token string">'count1'</span><span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">'count2'</span><span class="token punctuation">:</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">'count3'</span><span class="token punctuation">:</span> <span class="token number">33</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span>
          <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'类型C'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'名称7'</span><span class="token punctuation">,</span> <span class="token string">'count1'</span><span class="token punctuation">:</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token string">'count2'</span><span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">'count3'</span><span class="token punctuation">:</span> <span class="token number">35</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
          <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'类型C'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'名称8'</span><span class="token punctuation">,</span> <span class="token string">'count1'</span><span class="token punctuation">:</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token string">'count2'</span><span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">'count3'</span><span class="token punctuation">:</span> <span class="token number">35</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token punctuation">]</span>
      <span class="token punctuation">]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>最终数据格式如下,为了与普通的数据区分开，给求和的数据加上了一个isSumRow属性，用来生成一个className来标红：</p>
<pre class="line-numbers language-js"><code class="language-js"> result <span class="token operator">=</span> <span class="token punctuation">[</span>
            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'类型A'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'名称1'</span><span class="token punctuation">,</span> <span class="token string">'count1'</span><span class="token punctuation">:</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token string">'count2'</span><span class="token punctuation">:</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token string">'count3'</span><span class="token punctuation">:</span> <span class="token number">34</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'类型A'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'名称2'</span><span class="token punctuation">,</span> <span class="token string">'count1'</span><span class="token punctuation">:</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token string">'count2'</span><span class="token punctuation">:</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token string">'count3'</span><span class="token punctuation">:</span> <span class="token number">34</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'类型A'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'名称3'</span><span class="token punctuation">,</span> <span class="token string">'count1'</span><span class="token punctuation">:</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token string">'count2'</span><span class="token punctuation">:</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token string">'count3'</span><span class="token punctuation">:</span> <span class="token number">34</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'类型A'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'count1'</span><span class="token punctuation">:</span> <span class="token number">39</span><span class="token punctuation">,</span> <span class="token string">'count2'</span><span class="token punctuation">:</span> <span class="token number">72</span><span class="token punctuation">,</span> <span class="token string">'count3'</span><span class="token punctuation">:</span> <span class="token number">102</span><span class="token punctuation">,</span> <span class="token string">'isSumRow'</span><span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'类型B'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'名称4'</span><span class="token punctuation">,</span> <span class="token string">'count1'</span><span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">'count2'</span><span class="token punctuation">:</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">'count3'</span><span class="token punctuation">:</span> <span class="token number">33</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'类型B'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'名称5'</span><span class="token punctuation">,</span> <span class="token string">'count1'</span><span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">'count2'</span><span class="token punctuation">:</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">'count3'</span><span class="token punctuation">:</span> <span class="token number">33</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'类型B'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'名称6'</span><span class="token punctuation">,</span> <span class="token string">'count1'</span><span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">'count2'</span><span class="token punctuation">:</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">'count3'</span><span class="token punctuation">:</span> <span class="token number">33</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'类型B'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'count1'</span><span class="token punctuation">:</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token string">'count2'</span><span class="token punctuation">:</span> <span class="token number">69</span><span class="token punctuation">,</span> <span class="token string">'count3'</span><span class="token punctuation">:</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token string">'isSumRow'</span><span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'类型C'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'名称7'</span><span class="token punctuation">,</span> <span class="token string">'count1'</span><span class="token punctuation">:</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token string">'count2'</span><span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">'count3'</span><span class="token punctuation">:</span> <span class="token number">35</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'类型C'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'名称8'</span><span class="token punctuation">,</span> <span class="token string">'count1'</span><span class="token punctuation">:</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token string">'count2'</span><span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">'count3'</span><span class="token punctuation">:</span> <span class="token number">35</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'类型C'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'count1'</span><span class="token punctuation">:</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token string">'count2'</span><span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token string">'count3'</span><span class="token punctuation">:</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token string">'isSumRow'</span><span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
          <span class="token punctuation">]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>使用FLEX实现一种上下高度不固定的自适应布局</title>
    <url>/posts/340a.html</url>
    <content><![CDATA[<p>此布局的需求是：头部高度不固定，由子元素撑高，中间内容高度不固定，自动填满父容器剩余高度，底部高度固定。<br><img src="https://images.liyangzone.com/article_img/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/FLEX%E4%B8%8A%E4%B8%8B%E5%B8%83%E5%B1%80/20191221_103338.png"></p>
<p>这种布局是下面这种布局的变种：</p>
<p><img src="https://images.liyangzone.com/article_img/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/FLEX%E4%B8%8A%E4%B8%8B%E5%B8%83%E5%B1%80/20191221_101238.png"></p>
<p>头部和中间内容都变成了不固定的，一般用于后台管理系统，上部分是一些查询条件和操作按钮，查询条件个数不固定，中间部分是表格内容，底部一般用于分页，固定高度。</p>
<p>此种布局用flex可以很容易的实现：父容器设置高度为100%，flex-direction设置为column(主轴设置为竖向)，上部flex-shrink设置0，下部flex-grow设置1，底部flex-shrink设置0。</p>
<p>CSS部分：</p>
<pre class="line-numbers language-css"><code class="language-css">    * &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>
        <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>
    &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>

    html, body &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>
        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>
        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>
    &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>

    <span class="token number">.</span>wrapper &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>
        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>
        <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>
        <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
        <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span>
    &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>

    <span class="token number">.</span>head &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>
        <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid red<span class="token punctuation">;</span>
        <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">15</span>px<span class="token punctuation">;</span>
        <span class="token property">flex-shrink</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token property">margin-bottom</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>
    &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>

    <span class="token number">.</span>content &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>
        <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid blue<span class="token punctuation">;</span>
        <span class="token property">flex</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">15</span>px<span class="token punctuation">;</span>
        <span class="token property">margin-bottom</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>
        <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>
        <span class="token property">overflow</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span> //此行是关键 
    &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>

    <span class="token number">.</span>foot &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>
        <span class="token property">flex-shrink</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>
        <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid green<span class="token punctuation">;</span>
    &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>HTML部分：</p>
<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>head<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>子元素<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>子元素<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>子元素<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>子元素<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>foot<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>底部<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://images.liyangzone.com/article_img/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/FLEX%E4%B8%8A%E4%B8%8B%E5%B8%83%E5%B1%80/20191221_105339.png"></p>
<p>中间的内容用来放element-ui的表格，表格高度设置为100%，可以达到固定表头内容滚动的效果，一切看起来都很美好。</p>
<p><img src="https://images.liyangzone.com/article_img/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/FLEX%E4%B8%8A%E4%B8%8B%E5%B8%83%E5%B1%80/20191221_110422.png"></p>
<p>然而最近我重装了一次系统然后把chrome升级到79版本后，发现一个蛋疼的事情，这种方式居然失效了，出现了下面的情况：</p>
<p><img src="https://images.liyangzone.com/article_img/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/FLEX%E4%B8%8A%E4%B8%8B%E5%B8%83%E5%B1%80/20191221_135805.png"></p>
<p>中间的内容高度设置失效了，也变成了由子元素撑高。起初我怀疑是element-ui的锅，然后换了不同版本的element-ui后还是如此，然后我又怀疑可能是node版本的问题，因为我重装系统后把node由v8换成了v10,当我切换成v8后还是如此。后来我在同事的电脑上查看，他们居然没有出现这种情况，问题到底出现在了哪里？经过仔细排查后，这个锅最终落在了chrome头上，当我把chrome装回78版本后，一切又变得正常了。</p>
<p>然后我发现这个问题也在firefox上面出现了，这种布局似乎只能在chrome78及以下生效(IE11也生效)。然而我不能阻止用户把chrome升级到79版本或使用firefox浏览器，所以这个问题的根源也不在chrome或firefox,一定是别的什么地方出现了问题。</p>
<p>最终问题定位到了BFC(块格式化上下文,Block Formatting Context)上面，关于BFC的概念你可以前往<a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context">MDN</a>查看。</p>
<p>问题的关键就是要为page-body为这个div创建BFC，让它里面的元素不会影响到外面的元素，下列方式会创建块格式化上下文：</p>
<pre><code>根元素(&lt;html&gt;)
浮动元素（元素的 float 不是 none）
绝对定位元素（元素的 position 为 absolute 或 fixed）
行内块元素（元素的 display 为 inline-block）
表格单元格（元素的 display为 table-cell，HTML表格单元格默认为该值）
表格标题（元素的 display 为 table-caption，HTML表格标题默认为该值）
匿名表格单元格元素（元素的 display为 table、table-row、 table-row-group、table-header-group、table-footer-group（分别是HTML table、row、tbody、thead、tfoot的默认属性）或 inline-table）
overflow 值不为 visible 的块元素
display 值为 flow-root 的元素
contain 值为 layout、content或 paint 的元素
弹性元素（display为 flex 或 inline-flex元素的直接子元素）
网格元素（display为 grid 或 inline-grid 元素的直接子元素）
多列容器（元素的 column-count 或 column-width 不为 auto，包括 column-count 为 1）
column-span 为 all 的元素始终会创建一个新的BFC，即使该元素没有包裹在一个多列容器中（标准变更，Chrome bug）。
</code></pre>
<p>不过我试了多种方式，都没有生效，只有设置 <code>overflow: auto</code> 之后才生效。</p>
<p>这个问题的根本原因就是浏览器创建BFC的规则不一致，chrome78以下版本和IE11会为<code>display</code>为<code>flex</code>的直接子元素创建BFC，不管这个子元素的overflow值为什么(默认值为visible)， chrome79版本及firefox则不会，只有设置 了<code>overflow: auto</code>之后才会创建BFC，不确定这是chrome79的feature还是bug。</p>
<p>原生HTML+CSS源码地址:<a href="https://codepen.io/liyang5945/pen/povvVbe">点击前往</a>。<br>vue + element-ui版源码地址：<a href="https://codepen.io/liyang5945/pen/abzJybY">点击前往</a>。</p>
]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>FLEX布局</tag>
      </tags>
  </entry>
  <entry>
    <title>使用js-xlsx插件导出多级表头excel</title>
    <url>/posts/5d0a.html</url>
    <content><![CDATA[<p>最近项目里有这么一个需求，把一个多级表头的table导出为excel格式。然后在网上找到一篇文章：<a href="https://www.jianshu.com/p/9a465d7d1448">js-xlsx导出自定义合并列头实现思路</a>，我按照他的教程操作之后发现比较繁琐，这篇文章的思路就是就是新建一个excel，然后用js来读取它的多级表头数据，再把json格式的表头数据复制到项目中使用。核心就是这个json格式的多级表头数据，这样一个多级表头导出来是这个样子的:</p>
<p><img src="https://images.liyangzone.com/article_img/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/%E5%AF%BC%E5%87%BA%E5%A4%9A%E7%BA%A7%E8%A1%A8%E5%A4%B4excel/20200227_101309.png"></p>
<pre class="line-numbers language-json"><code class="language-json">&amp;#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token property">"!ref"</span><span class="token operator">:</span> <span class="token string">"A1:F3"</span><span class="token punctuation">,</span> <span class="token property">"A1"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span><span class="token property">"t"</span><span class="token operator">:</span> <span class="token string">"s"</span><span class="token punctuation">,</span> <span class="token property">"v"</span><span class="token operator">:</span> <span class="token string">"日期"</span><span class="token punctuation">,</span> <span class="token property">"r"</span><span class="token operator">:</span> <span class="token string">"日期"</span><span class="token punctuation">,</span> <span class="token property">"h"</span><span class="token operator">:</span> <span class="token string">"日期"</span><span class="token punctuation">,</span> <span class="token property">"w"</span><span class="token operator">:</span> <span class="token string">"日期"</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
    <span class="token property">"B1"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span><span class="token property">"t"</span><span class="token operator">:</span> <span class="token string">"s"</span><span class="token punctuation">,</span> <span class="token property">"v"</span><span class="token operator">:</span> <span class="token string">"配送信息"</span><span class="token punctuation">,</span> <span class="token property">"r"</span><span class="token operator">:</span> <span class="token string">"配送信息"</span><span class="token punctuation">,</span> <span class="token property">"h"</span><span class="token operator">:</span> <span class="token string">"配送信息"</span><span class="token punctuation">,</span> <span class="token property">"w"</span><span class="token operator">:</span> <span class="token string">"配送信息"</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
    <span class="token property">"B2"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span><span class="token property">"t"</span><span class="token operator">:</span> <span class="token string">"s"</span><span class="token punctuation">,</span> <span class="token property">"v"</span><span class="token operator">:</span> <span class="token string">"姓名"</span><span class="token punctuation">,</span> <span class="token property">"r"</span><span class="token operator">:</span> <span class="token string">"姓名"</span><span class="token punctuation">,</span> <span class="token property">"h"</span><span class="token operator">:</span> <span class="token string">"姓名"</span><span class="token punctuation">,</span> <span class="token property">"w"</span><span class="token operator">:</span> <span class="token string">"姓名"</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
    <span class="token property">"C2"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span><span class="token property">"t"</span><span class="token operator">:</span> <span class="token string">"s"</span><span class="token punctuation">,</span> <span class="token property">"v"</span><span class="token operator">:</span> <span class="token string">"地址"</span><span class="token punctuation">,</span> <span class="token property">"r"</span><span class="token operator">:</span> <span class="token string">"地址"</span><span class="token punctuation">,</span> <span class="token property">"h"</span><span class="token operator">:</span> <span class="token string">"地址"</span><span class="token punctuation">,</span> <span class="token property">"w"</span><span class="token operator">:</span> <span class="token string">"地址"</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
    <span class="token property">"C3"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span><span class="token property">"t"</span><span class="token operator">:</span> <span class="token string">"s"</span><span class="token punctuation">,</span> <span class="token property">"v"</span><span class="token operator">:</span> <span class="token string">"省份"</span><span class="token punctuation">,</span> <span class="token property">"r"</span><span class="token operator">:</span> <span class="token string">"省份"</span><span class="token punctuation">,</span> <span class="token property">"h"</span><span class="token operator">:</span> <span class="token string">"省份"</span><span class="token punctuation">,</span> <span class="token property">"w"</span><span class="token operator">:</span> <span class="token string">"省份"</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
    <span class="token property">"D3"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span><span class="token property">"t"</span><span class="token operator">:</span> <span class="token string">"s"</span><span class="token punctuation">,</span> <span class="token property">"v"</span><span class="token operator">:</span> <span class="token string">"市区"</span><span class="token punctuation">,</span> <span class="token property">"r"</span><span class="token operator">:</span> <span class="token string">"市区"</span><span class="token punctuation">,</span> <span class="token property">"h"</span><span class="token operator">:</span> <span class="token string">"市区"</span><span class="token punctuation">,</span> <span class="token property">"w"</span><span class="token operator">:</span> <span class="token string">"市区"</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
    <span class="token property">"E3"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span><span class="token property">"t"</span><span class="token operator">:</span> <span class="token string">"s"</span><span class="token punctuation">,</span> <span class="token property">"v"</span><span class="token operator">:</span> <span class="token string">"地址"</span><span class="token punctuation">,</span> <span class="token property">"r"</span><span class="token operator">:</span> <span class="token string">"地址"</span><span class="token punctuation">,</span> <span class="token property">"h"</span><span class="token operator">:</span> <span class="token string">"地址"</span><span class="token punctuation">,</span> <span class="token property">"w"</span><span class="token operator">:</span> <span class="token string">"地址"</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
    <span class="token property">"F3"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span><span class="token property">"t"</span><span class="token operator">:</span> <span class="token string">"s"</span><span class="token punctuation">,</span> <span class="token property">"v"</span><span class="token operator">:</span> <span class="token string">"邮编"</span><span class="token punctuation">,</span> <span class="token property">"r"</span><span class="token operator">:</span> <span class="token string">"邮编"</span><span class="token punctuation">,</span> <span class="token property">"h"</span><span class="token operator">:</span> <span class="token string">"邮编"</span><span class="token punctuation">,</span> <span class="token property">"w"</span><span class="token operator">:</span> <span class="token string">"邮编"</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
    <span class="token property">"!margins"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span><span class="token property">"left"</span><span class="token operator">:</span> <span class="token number">0.7</span><span class="token punctuation">,</span> <span class="token property">"right"</span><span class="token operator">:</span> <span class="token number">0.7</span><span class="token punctuation">,</span> <span class="token property">"top"</span><span class="token operator">:</span> <span class="token number">0.75</span><span class="token punctuation">,</span> <span class="token property">"bottom"</span><span class="token operator">:</span> <span class="token number">0.75</span><span class="token punctuation">,</span> <span class="token property">"header"</span><span class="token operator">:</span> <span class="token number">0.3</span><span class="token punctuation">,</span> <span class="token property">"footer"</span><span class="token operator">:</span> <span class="token number">0.3</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
    <span class="token property">"!merges"</span><span class="token operator">:</span> <span class="token punctuation">[</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span><span class="token property">"s"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span><span class="token property">"c"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token property">"r"</span><span class="token operator">:</span> <span class="token number">0</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token property">"e"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span><span class="token property">"c"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token property">"r"</span><span class="token operator">:</span> <span class="token number">2</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>
      <span class="token property">"s"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span><span class="token property">"c"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token property">"r"</span><span class="token operator">:</span> <span class="token number">0</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token property">"e"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span><span class="token property">"c"</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token property">"r"</span><span class="token operator">:</span> <span class="token number">0</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span>
    &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span><span class="token property">"s"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span><span class="token property">"c"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token property">"r"</span><span class="token operator">:</span> <span class="token number">1</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token property">"e"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span><span class="token property">"c"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token property">"r"</span><span class="token operator">:</span> <span class="token number">2</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span><span class="token property">"s"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span><span class="token property">"c"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token property">"r"</span><span class="token operator">:</span> <span class="token number">1</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token property">"e"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span><span class="token property">"c"</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token property">"r"</span><span class="token operator">:</span> <span class="token number">1</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">]</span>
  &amp;#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我暂时没看出来这种格式的规律是什么，如果想要修改表头格式的化就感觉比较麻烦，需要修改excel再导出一次。</p>
<p>后来在开源项目<a href="https://panjiachen.gitee.io/vue-element-admin/">vue-element-admin</a>上也找到了这个功能，使用方法比较简单。</p>
<h3 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h3><p>使用npm安装<code>xlsx</code>和<code>file-saver</code>插件</p>
<pre class="line-numbers language-shell"><code class="language-shell">npm install xlsx --save
npm install file-saver --save
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>下载Export2Excel.js文件，放到<code>src/vendor</code>目录下，下载地址：<a href="https://raw.githubusercontent.com/PanJiaChen/vue-element-admin/master/src/vendor/Export2Excel.js">Export2Excel.js</a>(github地址，打不开请科学上网）</p>
<p>然后提取合并的表头数据，这种格式的表头数据比上面那种浅显易懂，如何合并可参考下面的图片，把蓝色部分合并单元格的坐标提取出来即可，下图的表头数据为：</p>
<p><img src="https://images.liyangzone.com/article_img/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/%E5%AF%BC%E5%87%BA%E5%A4%9A%E7%BA%A7%E8%A1%A8%E5%A4%B4excel/20200227_111320.png"></p>
<pre class="line-numbers language-js"><code class="language-js">
<span class="token keyword">const</span> multiHeader <span class="token operator">=</span>
                   <span class="token punctuation">[</span>
                     <span class="token punctuation">[</span><span class="token string">'日期'</span><span class="token punctuation">,</span> <span class="token string">'配送信息'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                     <span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">'姓名'</span><span class="token punctuation">,</span> <span class="token string">'地址'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">]</span>
                   <span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 前两行的表头数据，二维数组，不够的用空白补全</span>
<span class="token keyword">const</span> header <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">'省份'</span><span class="token punctuation">,</span> <span class="token string">'市区'</span><span class="token punctuation">,</span> <span class="token string">'地址'</span><span class="token punctuation">,</span> <span class="token string">'邮编'</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 最后一行的表头数据，合并过的也要用空白补全</span>
<span class="token keyword">const</span> merges <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A1:A3'</span><span class="token punctuation">,</span> <span class="token string">'B1:F1'</span><span class="token punctuation">,</span> <span class="token string">'B2:B3'</span><span class="token punctuation">,</span> <span class="token string">'C2:F2'</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//合并单元格的数据</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>vue文件源码：</p>
<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">20</span>px <span class="token number">0</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>small<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleDownload<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>导出EXCEl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table</span>
      <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center-table<span class="token punctuation">"</span></span>
      <span class="token attr-name">:data</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tableData<span class="token punctuation">"</span></span>
      <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>small<span class="token punctuation">"</span></span>
    <span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span>
        <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>date<span class="token punctuation">"</span></span>
        <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>日期<span class="token punctuation">"</span></span>
        <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>150<span class="token punctuation">"</span></span>
      <span class="token punctuation">/></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>配送信息<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span>
          <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span>
          <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>姓名<span class="token punctuation">"</span></span>
          <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>120<span class="token punctuation">"</span></span>
        <span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>地址<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span>
            <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>province<span class="token punctuation">"</span></span>
            <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>省份<span class="token punctuation">"</span></span>
            <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>120<span class="token punctuation">"</span></span>
          <span class="token punctuation">/></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span>
            <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>city<span class="token punctuation">"</span></span>
            <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>市区<span class="token punctuation">"</span></span>
            <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>120<span class="token punctuation">"</span></span>
          <span class="token punctuation">/></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span>
            <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span>
            <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>地址<span class="token punctuation">"</span></span>
          <span class="token punctuation">/></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span>
            <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zip<span class="token punctuation">"</span></span>
            <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>邮编<span class="token punctuation">"</span></span>
            <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>120<span class="token punctuation">"</span></span>
          <span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
  name<span class="token punctuation">:</span> <span class="token string">'MergeHeader'</span><span class="token punctuation">,</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
      tableData<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        date<span class="token punctuation">:</span> <span class="token string">'2016-05-03'</span><span class="token punctuation">,</span>
        name<span class="token punctuation">:</span> <span class="token string">'王小虎'</span><span class="token punctuation">,</span>
        province<span class="token punctuation">:</span> <span class="token string">'上海'</span><span class="token punctuation">,</span>
        city<span class="token punctuation">:</span> <span class="token string">'普陀区'</span><span class="token punctuation">,</span>
        address<span class="token punctuation">:</span> <span class="token string">'上海市普陀区金沙江路 1518 弄'</span><span class="token punctuation">,</span>
        zip<span class="token punctuation">:</span> <span class="token number">200333</span>
      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        date<span class="token punctuation">:</span> <span class="token string">'2016-05-02'</span><span class="token punctuation">,</span>
        name<span class="token punctuation">:</span> <span class="token string">'王小虎'</span><span class="token punctuation">,</span>
        province<span class="token punctuation">:</span> <span class="token string">'上海'</span><span class="token punctuation">,</span>
        city<span class="token punctuation">:</span> <span class="token string">'普陀区'</span><span class="token punctuation">,</span>
        address<span class="token punctuation">:</span> <span class="token string">'上海市普陀区金沙江路 1518 弄'</span><span class="token punctuation">,</span>
        zip<span class="token punctuation">:</span> <span class="token number">200333</span>
      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        date<span class="token punctuation">:</span> <span class="token string">'2016-05-04'</span><span class="token punctuation">,</span>
        name<span class="token punctuation">:</span> <span class="token string">'王小虎'</span><span class="token punctuation">,</span>
        province<span class="token punctuation">:</span> <span class="token string">'上海'</span><span class="token punctuation">,</span>
        city<span class="token punctuation">:</span> <span class="token string">'普陀区'</span><span class="token punctuation">,</span>
        address<span class="token punctuation">:</span> <span class="token string">'上海市普陀区金沙江路 1518 弄'</span><span class="token punctuation">,</span>
        zip<span class="token punctuation">:</span> <span class="token number">200333</span>
      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        date<span class="token punctuation">:</span> <span class="token string">'2016-05-01'</span><span class="token punctuation">,</span>
        name<span class="token punctuation">:</span> <span class="token string">'王小虎'</span><span class="token punctuation">,</span>
        province<span class="token punctuation">:</span> <span class="token string">'上海'</span><span class="token punctuation">,</span>
        city<span class="token punctuation">:</span> <span class="token string">'普陀区'</span><span class="token punctuation">,</span>
        address<span class="token punctuation">:</span> <span class="token string">'上海市普陀区金沙江路 1518 弄'</span><span class="token punctuation">,</span>
        zip<span class="token punctuation">:</span> <span class="token number">200333</span>
      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        date<span class="token punctuation">:</span> <span class="token string">'2016-05-08'</span><span class="token punctuation">,</span>
        name<span class="token punctuation">:</span> <span class="token string">'王小虎'</span><span class="token punctuation">,</span>
        province<span class="token punctuation">:</span> <span class="token string">'上海'</span><span class="token punctuation">,</span>
        city<span class="token punctuation">:</span> <span class="token string">'普陀区'</span><span class="token punctuation">,</span>
        address<span class="token punctuation">:</span> <span class="token string">'上海市普陀区金沙江路 1518 弄'</span><span class="token punctuation">,</span>
        zip<span class="token punctuation">:</span> <span class="token number">200333</span>
      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        date<span class="token punctuation">:</span> <span class="token string">'2016-05-06'</span><span class="token punctuation">,</span>
        name<span class="token punctuation">:</span> <span class="token string">'王小虎'</span><span class="token punctuation">,</span>
        province<span class="token punctuation">:</span> <span class="token string">'上海'</span><span class="token punctuation">,</span>
        city<span class="token punctuation">:</span> <span class="token string">'普陀区'</span><span class="token punctuation">,</span>
        address<span class="token punctuation">:</span> <span class="token string">'上海市普陀区金沙江路 1518 弄'</span><span class="token punctuation">,</span>
        zip<span class="token punctuation">:</span> <span class="token number">200333</span>
      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        date<span class="token punctuation">:</span> <span class="token string">'2016-05-07'</span><span class="token punctuation">,</span>
        name<span class="token punctuation">:</span> <span class="token string">'王小虎'</span><span class="token punctuation">,</span>
        province<span class="token punctuation">:</span> <span class="token string">'上海'</span><span class="token punctuation">,</span>
        city<span class="token punctuation">:</span> <span class="token string">'普陀区'</span><span class="token punctuation">,</span>
        address<span class="token punctuation">:</span> <span class="token string">'上海市普陀区金沙江路 1518 弄'</span><span class="token punctuation">,</span>
        zip<span class="token punctuation">:</span> <span class="token number">200333</span>
      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">]</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
  methods<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token function">handleDownload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/vendor/Export2Excel'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>excel <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
          <span class="token keyword">const</span> multiHeader <span class="token operator">=</span>
                            <span class="token punctuation">[</span>
                              <span class="token punctuation">[</span><span class="token string">'日期'</span><span class="token punctuation">,</span> <span class="token string">'配送信息'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//第一行</span>
                              <span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">'姓名'</span><span class="token punctuation">,</span> <span class="token string">'地址'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//第二行</span>
                            <span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 前两行的表头数据，二维数组，不够的用空白补全</span>
          <span class="token keyword">const</span> header <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">'省份'</span><span class="token punctuation">,</span> <span class="token string">'市区'</span><span class="token punctuation">,</span> <span class="token string">'地址'</span><span class="token punctuation">,</span> <span class="token string">'邮编'</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 最后一行的表头数据</span>
          <span class="token keyword">const</span> filterVal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'date'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'province'</span><span class="token punctuation">,</span> <span class="token string">'city'</span><span class="token punctuation">,</span> <span class="token string">'address'</span><span class="token punctuation">,</span> <span class="token string">'zip'</span><span class="token punctuation">]</span>
          <span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tableData
          <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">formatJson</span><span class="token punctuation">(</span>filterVal<span class="token punctuation">,</span> list<span class="token punctuation">)</span>
          <span class="token keyword">const</span> merges <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A1:A3'</span><span class="token punctuation">,</span> <span class="token string">'B1:F1'</span><span class="token punctuation">,</span> <span class="token string">'B2:B3'</span><span class="token punctuation">,</span> <span class="token string">'C2:F2'</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 合并单元格的数据，如何合并参考上面图片的蓝色背景部分</span>
          excel<span class="token punctuation">.</span><span class="token function">export_json_to_excel</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            multiHeader<span class="token punctuation">,</span>
            header<span class="token punctuation">,</span>
            merges<span class="token punctuation">,</span>
            data
          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
    <span class="token function">formatJson</span><span class="token punctuation">(</span>filterVal<span class="token punctuation">,</span> jsonData<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> jsonData<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>v <span class="token operator">=</span><span class="token operator">></span> filterVal<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>j <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> v<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">
    <span class="token number">.</span>center-table td, <span class="token number">.</span>center-table th &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>
        <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
    &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>界面如图：</p>
<p><img src="https://images.liyangzone.com/article_img/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/%E5%AF%BC%E5%87%BA%E5%A4%9A%E7%BA%A7%E8%A1%A8%E5%A4%B4excel/20200227_111142.png"></p>
<p>导出来的excel如图：</p>
<p><img src="https://images.liyangzone.com/article_img/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/%E5%AF%BC%E5%87%BA%E5%A4%9A%E7%BA%A7%E8%A1%A8%E5%A4%B4excel/20200227_111833.png"></p>
]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>excel</tag>
        <tag>多级表头</tag>
      </tags>
  </entry>
  <entry>
    <title>前端概念术语累积</title>
    <url>/posts/d692.html</url>
    <content><![CDATA[<h1 id="前端概念术语累积"><a href="#前端概念术语累积" class="headerlink" title="前端概念术语累积"></a>前端概念术语累积</h1><h2 id="1-Link-prefetching-FAQ"><a href="#1-Link-prefetching-FAQ" class="headerlink" title="1.Link prefetching FAQ"></a>1.Link prefetching FAQ</h2><h3 id="1-1什么是链接预取？"><a href="#1-1什么是链接预取？" class="headerlink" title="1.1什么是链接预取？"></a>1.1<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Link_prefetching_FAQ#what_is_link_prefetching.3f">什么是链接预取？</a></h3><p>链接预取是一种浏览器机制，其利用浏览器空闲时间来下载或预取用户在不久的将来可能访问的文档。网页向浏览器提供一组预取提示，并在浏览器完成当前页面的加载后开始静默地拉取指定的文档并将其存储在缓存中。当用户访问其中一个预取文档时，便可以快速的从浏览器缓存中得到。</p>
<h3 id="什么是预取提示？"><a href="#什么是预取提示？" class="headerlink" title="什么是预取提示？"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Link_prefetching_FAQ#what_are_the_prefetching_hints.3f">什么是预取提示？</a></h3><p>浏览器会查找关系类型(rel)为 next 或 prefetch 的 HTML<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/link">``</a> 或 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers">HTTP <code>Link:</code> header</a>。下面是一个使用 link 标签的例子：</p>
<pre><code>&lt;link rel=&quot;prefetch&quot; href=&quot;/images/big.jpeg&quot;&gt;
</code></pre>
<p>同样效果的使用 HTTP Link: header 的例子：</p>
<pre><code>Link: &lt;/images/big.jpeg&gt;; rel=prefetch
</code></pre>
<p>Link: header 也可以通过使用 HTML meta 标签定义在 HTML 文档中：</p>
<pre><code>&lt;meta http-equiv=&quot;Link&quot; content=&quot;&lt;/images/big.jpeg&gt;; rel=prefetch&quot;&gt;
</code></pre>
<p><code>Link:</code> header 的格式在 <a href="https://tools.ietf.org/html/rfc5988">RFC 5988</a> section 5 中有所描述</p>
<p>具体<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Link_prefetching_FAQ">&lt;link rel=”prefetch</a></p>
<h2 id="2-lt-link-rel-”prefetch"><a href="#2-lt-link-rel-”prefetch" class="headerlink" title="2.&lt;link rel=”prefetch"></a>2.&lt;link rel=”prefetch</h2>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>阅读</tag>
      </tags>
  </entry>
  <entry>
    <title>对象属性和方法集合</title>
    <url>/posts/9337.html</url>
    <content><![CDATA[<h1 id="对象属性和方法集合"><a href="#对象属性和方法集合" class="headerlink" title="对象属性和方法集合"></a>对象属性和方法集合</h1><h1 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h1><p><code>**Object**</code> 构造函数创建一个对象包装器。</p>
<h2 id="1-语法"><a href="#1-语法" class="headerlink" title="1.语法"></a>1.语法</h2><pre><code>// 对象初始化器（Object initialiser）或对象字面量（literal）
&#123; [ nameValuePair1[, nameValuePair2[, ...nameValuePairN] ] ] &#125;

// 以构造函数形式来调用
new Object([value])
</code></pre>
<h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object#%E5%8F%82%E6%95%B0">参数</a></h3><ul>
<li><p><code>nameValuePair1, nameValuePair2, ... nameValuePair*N*</code></p>
<p>成对的名称（字符串）与值（任何值），其中名称通过冒号与值分隔。</p>
</li>
<li><p><code>value</code></p>
<p>任何值。</p>
</li>
</ul>
<h2 id="2-描述"><a href="#2-描述" class="headerlink" title="2.描述"></a>2.描述</h2><p>在JavaScript中，几乎所有的对象都是<code>Object</code>类型的实例，它们都会从<code>Object.prototype</code>继承属性和方法。<code>Object</code> 构造函数为给定值创建一个对象包装器。<code>Object</code>构造函数，会根据给定的参数创建对象，具体有以下情况：</p>
<ul>
<li>如果给定值是 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/null"><code>null</code></a> 或 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined"><code>undefined</code></a>，将会创建并返回一个空对象</li>
<li>如果传进去的是一个基本类型的值，则会构造其包装类型的对象</li>
<li>如果传进去的是引用类型的值，仍然会返回这个值，经他们复制的变量保有和源对象相同的引用地址</li>
</ul>
<p>当以非构造函数形式被调用时，<code>Object</code> 的行为等同于 <code>new Object()</code>。</p>
<p>可查看 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Object_initializer">对象初始化/字面量语法</a>。</p>
<h2 id="3-Object-构造函数的属性"><a href="#3-Object-构造函数的属性" class="headerlink" title="3.Object 构造函数的属性"></a>3.Object 构造函数的属性</h2><ul>
<li><p><code>Object.length</code></p>
<p>值为 1。</p>
</li>
<li><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object"><code>Object.prototype</code> (en-US)</a></p>
<p>可以为所有 Object 类型的对象添加属性。</p>
</li>
</ul>
<h2 id="4-静态方法"><a href="#4-静态方法" class="headerlink" title="4.静态方法"></a>4.静态方法</h2><h3 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign()"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/assign"><code>Object.assign()</code></a></h3><ul>
<li><p>通过复制一个或多个对象来创建一个新的对象。</p>
</li>
<li><p>方法用于将所有可枚举属性的值从一个或多个源对象分配到目标对象。它将返回目标对象。</p>
</li>
<li><p>语法</p>
<pre class="line-numbers language-js"><code class="language-js">Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token operator">...</span>sources<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li><p>参数</p>
</li>
<li><p><code>target</code></p>
<p>目标对象。</p>
</li>
<li><p><code>sources</code></p>
<p>源对象。</p>
</li>
<li><p>返回值</p>
<p>目标对象。</p>
</li>
<li><p>描述</p>
</li>
</ul>
<p>如果目标对象中的属性具有相同的键，则属性将被源对象中的属性覆盖。后面的源对象的属性将类似地覆盖前面的源对象的属性。</p>
<ul>
<li><p>demo</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> target <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> source <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> b<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> c<span class="token punctuation">:</span> <span class="token number">5</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> returnedTarget <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> source<span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// expected output: Object &amp;#123; a: 1, b: 4, c: 5 &amp;#125;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>returnedTarget<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// expected output: Object &amp;#123; a: 1, b: 4, c: 5 &amp;#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/assign#example_cloning_an_object">复制一个对象</a></p>
<pre><code>const obj = &#123; a: 1 &#125;;
const copy = Object.assign(&#123;&#125;, obj);
console.log(copy); // &#123; a: 1 &#125;
</code></pre>
</li>
<li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/assign#example_merging_objects">合并对象</a></p>
</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> o1 <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> a<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> o2 <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> b<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> o3 <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> c<span class="token punctuation">:</span> <span class="token number">3</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">,</span> o3<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// &amp;#123; a: 1, b: 2, c: 3 &amp;#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// &amp;#123; a: 1, b: 2, c: 3 &amp;#125;, 注意目标对象自身也会改变。</span>

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li></li>
<li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create"><code>Object.create()</code></a></p>
<p>使用指定的原型对象和属性创建一个新对象。</p>
</li>
<li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty"><code>Object.defineProperty()</code></a></p>
<p>给对象添加一个属性并指定该属性的配置。</p>
</li>
<li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties"><code>Object.defineProperties()</code></a></p>
<p>给对象添加多个属性并分别指定它们的配置。</p>
</li>
<li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/entries"><code>Object.entries()</code></a></p>
<p>返回给定对象自身可枚举属性的 <code>[key, value]</code> 数组。</p>
</li>
<li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze"><code>Object.freeze()</code></a></p>
<p>冻结对象：其他代码不能删除或更改任何属性。</p>
</li>
<li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor"><code>Object.getOwnPropertyDescriptor()</code></a></p>
<p>返回对象指定的属性配置。</p>
</li>
<li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames"><code>Object.getOwnPropertyNames()</code></a></p>
<p>返回一个数组，它包含了指定对象所有的可枚举或不可枚举的属性名。</p>
</li>
<li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols"><code>Object.getOwnPropertySymbols()</code></a></p>
<p>返回一个数组，它包含了指定对象自身所有的符号属性。</p>
</li>
<li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/GetPrototypeOf"><code>Object.getPrototypeOf()</code></a></p>
<p>返回指定对象的原型对象。</p>
</li>
<li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/is"><code>Object.is()</code></a></p>
<p>比较两个值是否相同。所有 NaN 值都相等（这与==和===不同）。</p>
</li>
<li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible"><code>Object.isExtensible()</code></a></p>
<p>判断对象是否可扩展。</p>
</li>
<li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen"><code>Object.isFrozen()</code></a></p>
<p>判断对象是否已经冻结。</p>
</li>
<li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed"><code>Object.isSealed()</code></a></p>
<p>判断对象是否已经密封。</p>
</li>
<li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/keys"><code>Object.keys()</code></a></p>
<p>返回一个包含所有给定对象<strong>自身</strong>可枚举属性名称的数组。</p>
</li>
<li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions"><code>Object.preventExtensions()</code></a></p>
<p>防止对象的任何扩展。</p>
</li>
<li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/seal"><code>Object.seal()</code></a></p>
<p>防止其他代码删除对象的属性。</p>
</li>
<li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf"><code>Object.setPrototypeOf()</code></a></p>
<p>设置对象的原型（即内部 <code>[[Prototype]]</code> 属性）。</p>
</li>
<li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/values"><code>Object.values()</code></a></p>
<p>返回给定对象自身可枚举值的数组。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>使用nginx和LiveReload搭建简单的热更新web开发环境</title>
    <url>/posts/6b36.html</url>
    <content><![CDATA[<p>如今web前端开发已经进入工程化、模块化的时代，各种框架、工具层出不穷。在工程化开发中，热更新已经由webpack、gulp等工具替我们实现了，不过有时候我们要调试一些比较简单的东西，比如测试一个css效果或js插件，使用这些工具的话却又显得有些笨重（要安装一堆npm插件），有没有更简单的实现热更新的方法呢，我们可以借助liveReload插件来实现。</p>
<p>LiveReload插件原理，LiveReload是基于WebSocket协议实现（WebSocket协议可以向主动向客户端发送消息，HTTP协议不能），在本地开启一个WebSocket服务，并且检测文件变化，浏览器打开一个页面时候，引入固定的LiveReload.js（chrome插件会帮忙加上）会建立WebSocket连接，当检测到文件变化，则自动推送消息给浏览器，实现刷新。</p>
<p>LiveReload安装：LiveReload需要客户端与浏览器插件配合才能实现，进入<a href="http://livereload.com/">livereload.com</a>下载客户端并安装（MAC，windows，linux全平台都有）。下图为windows客户端界面，打开后本地WebSocket服务就会立即启动，然后把相关文件夹添加进去即可。</p>
<p><img src="https://images.liyangzone.com/article_img/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF%E7%83%AD%E6%9B%B4%E6%96%B0%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/20191111_174217.png"></p>
<p>然后安装浏览器插件，这里我已FireFox浏览器为例（Chrome浏览器访问插件商店需要梯子，也可以在第三方网站下载然后手动安装），搜索liveReload即可，注意是这个图标，别装错了：</p>
<p><img src="https://images.liyangzone.com/article_img/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF%E7%83%AD%E6%9B%B4%E6%96%B0%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/20191111_174100.png"></p>
<p>nginx相关：nginx是一个高性能的HTTP和反向代理web服务器，在这里我们仅仅用它来搭建一个本地服务器来预览效果，有点大材小用的感觉。在windows下的安装也比较简单，从官网下载对应系统的zip包解压后，运行nginx.exe程序即可。运行之前最好改一下配置文件，配置文件为<code>conf/nginx.conf</code>,我们主要修改根目录和端口，我作了如下修改，端口号改为8088、根目录改为<code>D:/develop/nginx_root</code>。</p>
<p><img src="https://images.liyangzone.com/article_img/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF%E7%83%AD%E6%9B%B4%E6%96%B0%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/nginx-config.png"></p>
<p>访问地址有三种，localhost:8088、127.0.0.1:8088、和局域网ip地址，类似这种：192.168.XX.XX:8088，局域网地址也可以在同一个内网的其他设备上访问（需关闭本机防火墙），比如手机或其他PC设备。<br>启动liveReload客户端，再打开浏览器，点击插件图标，即可启用liveReload，效果如图：</p>
<p><img src="https://images.liyangzone.com/article_img/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF%E7%83%AD%E6%9B%B4%E6%96%B0%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/livedemo1.gif"></p>
<p>插件会在页面上插入一个script标签，这个js文件的作用就是与客户端的WebSocket服务建立连接，当文件发生改动的时候，WebSocket服务器就会向浏览器发送通知，从而实现热更新，效果如图：</p>
<p><img src="https://images.liyangzone.com/article_img/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF%E7%83%AD%E6%9B%B4%E6%96%B0%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/livedemo.gif"></p>
<p>以上功能也能用其他工具实现，nginx也可以用其他http服务替代，比如：比如.net系的IIS，JAVA系的tomcat，npm插件http-server，使用nodejs/python也能开启一个简单的http服务。liveReload客户端可以用npm插件livereload来实现（他们的作用都是开启本地WebSocket服务并监听文件）。<br>npm安装http-server：npm install http-server -g  启动本地http服务：在所在文件夹打开命令行，输入：http-serve即可，可在后面加参数 -p + 端口号，例如： http-serve -p 8888。<br>npm安装livereload: npm install livereload -g 启动本地WebSocket服务：在所在文件夹打开命令行，输入：livereload即可。<br>缺点就是需要打开两个命令行，不如直接打开客户端来得方便。<br><img src="https://images.liyangzone.com/article_img/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF%E7%83%AD%E6%9B%B4%E6%96%B0%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/20191121_203144.png"></p>
]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>nginx</tag>
        <tag>LiveReload</tag>
        <tag>热更新</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux常用命令</title>
    <url>/posts/bc66.html</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Github actions</title>
    <url>/posts/e497.html</url>
    <content><![CDATA[<h1 id="Github-actions-使用"><a href="#Github-actions-使用" class="headerlink" title="Github actions 使用"></a>Github actions 使用</h1><h2 id="一、GitHub-Actions-是什么？"><a href="#一、GitHub-Actions-是什么？" class="headerlink" title="一、GitHub Actions 是什么？"></a>一、GitHub Actions 是什么？</h2><p>大家知道，持续集成由很多操作组成，比如抓取代码、运行测试、登录远程服务器，发布到第三方服务等等。GitHub 把这些操作就称为 actions。</p>
<p>很多操作在不同项目里面是类似的，完全可以共享。GitHub 注意到了这一点，想出了一个很妙的点子，允许开发者把每个操作写成独立的脚本文件，存放到代码仓库，使得其他开发者可以引用。</p>
<p>如果你需要某个 action，不必自己写复杂的脚本，直接引用他人写好的 action 即可，整个持续集成过程，就变成了一个 actions 的组合。这就是 GitHub Actions 最特别的地方。</p>
<p>GitHub 做了一个<a href="https://github.com/marketplace?type=actions">官方市场</a>，可以搜索到他人提交的 actions。另外，还有一个 <a href="https://github.com/sdras/awesome-actions">awesome actions</a> 的仓库，也可以找到不少 action。</p>
<p><img src="https://www.wangbase.com/blogimg/asset/201909/bg2019091105.jpg" alt="img"></p>
<p>上面说了，每个 action 就是一个独立脚本，因此可以做成代码仓库，使用<code>userName/repoName</code>的语法引用 action。比如，<code>actions/setup-node</code>就表示<code>github.com/actions/setup-node</code>这个<a href="https://github.com/actions/setup-node">仓库</a>，它代表一个 action，作用是安装 Node.js。事实上，GitHub 官方的 actions 都放在 <a href="https://github.com/actions">github.com/actions</a> 里面。</p>
<p>既然 actions 是代码仓库，当然就有版本的概念，用户可以引用某个具体版本的 action。下面都是合法的 action 引用，用的就是 Git 的指针概念，详见<a href="https://help.github.com/en/articles/about-actions#versioning-your-action">官方文档</a>。</p>
<blockquote>
<pre class="line-numbers language-bash"><code class="language-bash">actions/setup-node@74bc508 <span class="token comment" spellcheck="true"># 指向一个 commit</span>
actions/setup-node@v1.0    <span class="token comment" spellcheck="true"># 指向一个标签</span>
actions/setup-node@master  <span class="token comment" spellcheck="true"># 指向一个分支</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</blockquote>
<h2 id="二、基本概念"><a href="#二、基本概念" class="headerlink" title="二、基本概念"></a>二、基本概念</h2><p>GitHub Actions 有一些自己的术语。</p>
<p>（1）<strong>workflow</strong> （工作流程）：持续集成一次运行的过程，就是一个 workflow。</p>
<p>（2）<strong>job</strong> （任务）：一个 workflow 由一个或多个 jobs 构成，含义是一次持续集成的运行，可以完成多个任务。</p>
<p>（3）<strong>step</strong>（步骤）：每个 job 由多个 step 构成，一步步完成。</p>
<p>（4）<strong>action</strong> （动作）：每个 step 可以依次执行一个或多个命令（action）。</p>
<h2 id="三、workflow-文件"><a href="#三、workflow-文件" class="headerlink" title="三、workflow 文件"></a>三、workflow 文件</h2><p>GitHub Actions 的配置文件叫做 workflow 文件，存放在代码仓库的<code>.github/workflows</code>目录。</p>
<p>workflow 文件采用 <a href="https://www.ruanyifeng.com/blog/2016/07/yaml.html">YAML 格式</a>，文件名可以任意取，但是后缀名统一为<code>.yml</code>，比如<code>foo.yml</code>。一个库可以有多个 workflow 文件。GitHub 只要发现<code>.github/workflows</code>目录里面有<code>.yml</code>文件，就会自动运行该文件。</p>
<p>workflow 文件的配置字段非常多，详见<a href="https://help.github.com/en/articles/workflow-syntax-for-github-actions">官方文档</a>。下面是一些基本字段。</p>
<p><strong>（1）<code>name</code></strong></p>
<p><code>name</code>字段是 workflow 的名称。如果省略该字段，默认为当前 workflow 的文件名。</p>
<blockquote>
<pre class="line-numbers language-bash"><code class="language-bash">name: GitHub Actions Demo
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</blockquote>
<p><strong>（2）<code>on</code></strong></p>
<p><code>on</code>字段指定触发 workflow 的条件，通常是某些事件。</p>
<blockquote>
<pre class="line-numbers language-bash"><code class="language-bash">on: push
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</blockquote>
<p>上面代码指定，<code>push</code>事件触发 workflow。</p>
<p><code>on</code>字段也可以是事件的数组。</p>
<blockquote>
<pre class="line-numbers language-bash"><code class="language-bash">on: <span class="token punctuation">[</span>push, pull_request<span class="token punctuation">]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</blockquote>
<p>上面代码指定，<code>push</code>事件或<code>pull_request</code>事件都可以触发 workflow。</p>
<p>完整的事件列表，请查看<a href="https://help.github.com/en/articles/events-that-trigger-workflows">官方文档</a>。除了代码库事件，GitHub Actions 也支持外部事件触发，或者定时运行。</p>
<p><strong>（3）<code>on.&lt;push|pull_request&gt;.&lt;tags|branches&gt;</code></strong></p>
<p>指定触发事件时，可以限定分支或标签。</p>
<blockquote>
<pre class="line-numbers language-bash"><code class="language-bash">on:
  push:
    branches:    
      - master
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</blockquote>
<p>上面代码指定，只有<code>master</code>分支发生<code>push</code>事件时，才会触发 workflow。</p>
<p><strong>（4）<code>jobs.&lt;job_id&gt;.name</code></strong></p>
<p>workflow 文件的主体是<code>jobs</code>字段，表示要执行的一项或多项任务。</p>
<p><code>jobs</code>字段里面，需要写出每一项任务的<code>job_id</code>，具体名称自定义。<code>job_id</code>里面的<code>name</code>字段是任务的说明。</p>
<blockquote>
<pre class="line-numbers language-javascript"><code class="language-javascript">jobs<span class="token punctuation">:</span>
  my_first_job<span class="token punctuation">:</span>
    name<span class="token punctuation">:</span> My first job
  my_second_job<span class="token punctuation">:</span>
    name<span class="token punctuation">:</span> My second job
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</blockquote>
<p>上面代码的<code>jobs</code>字段包含两项任务，<code>job_id</code>分别是<code>my_first_job</code>和<code>my_second_job</code>。</p>
<p><strong>（5）<code>jobs.&lt;job_id&gt;.needs</code></strong></p>
<p><code>needs</code>字段指定当前任务的依赖关系，即运行顺序。</p>
<blockquote>
<pre class="line-numbers language-javascript"><code class="language-javascript">jobs<span class="token punctuation">:</span>
  job1<span class="token punctuation">:</span>
  job2<span class="token punctuation">:</span>
    needs<span class="token punctuation">:</span> job1
  job3<span class="token punctuation">:</span>
    needs<span class="token punctuation">:</span> <span class="token punctuation">[</span>job1<span class="token punctuation">,</span> job2<span class="token punctuation">]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</blockquote>
<p>上面代码中，<code>job1</code>必须先于<code>job2</code>完成，而<code>job3</code>等待<code>job1</code>和<code>job2</code>的完成才能运行。因此，这个 workflow 的运行顺序依次为：<code>job1</code>、<code>job2</code>、<code>job3</code>。</p>
<p><strong>（6）<code>jobs.&lt;job_id&gt;.runs-on</code></strong></p>
<p><code>runs-on</code>字段指定运行所需要的虚拟机环境。它是必填字段。目前可用的虚拟机如下。</p>
<blockquote>
<ul>
<li><code>ubuntu-latest</code>，<code>ubuntu-18.04</code>或<code>ubuntu-16.04</code></li>
<li><code>windows-latest</code>，<code>windows-2019</code>或<code>windows-2016</code></li>
<li><code>macOS-latest</code>或<code>macOS-10.14</code></li>
</ul>
</blockquote>
<p>下面代码指定虚拟机环境为<code>ubuntu-18.04</code>。</p>
<blockquote>
<pre class="line-numbers language-javascript"><code class="language-javascript">runs<span class="token operator">-</span>on<span class="token punctuation">:</span> ubuntu<span class="token number">-18.04</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</blockquote>
<p><strong>（7）<code>jobs.&lt;job_id&gt;.steps</code></strong></p>
<p><code>steps</code>字段指定每个 Job 的运行步骤，可以包含一个或多个步骤。每个步骤都可以指定以下三个字段。</p>
<blockquote>
<ul>
<li><code>jobs.&lt;job_id&gt;.steps.name</code>：步骤名称。</li>
<li><code>jobs.&lt;job_id&gt;.steps.run</code>：该步骤运行的命令或者 action。</li>
<li><code>jobs.&lt;job_id&gt;.steps.env</code>：该步骤所需的环境变量。</li>
</ul>
</blockquote>
<p>下面是一个完整的 workflow 文件的范例。</p>
<blockquote>
<pre class="line-numbers language-javascript"><code class="language-javascript">name<span class="token punctuation">:</span> Greeting <span class="token keyword">from</span> Mona
on<span class="token punctuation">:</span> push

jobs<span class="token punctuation">:</span>
  my<span class="token operator">-</span>job<span class="token punctuation">:</span>
    name<span class="token punctuation">:</span> My Job
    runs<span class="token operator">-</span>on<span class="token punctuation">:</span> ubuntu<span class="token operator">-</span>latest
    steps<span class="token punctuation">:</span>
    <span class="token operator">-</span> name<span class="token punctuation">:</span> Print a greeting
      env<span class="token punctuation">:</span>
        MY_VAR<span class="token punctuation">:</span> Hi there<span class="token operator">!</span> My name is
        FIRST_NAME<span class="token punctuation">:</span> Mona
        MIDDLE_NAME<span class="token punctuation">:</span> The
        LAST_NAME<span class="token punctuation">:</span> Octocat
      run<span class="token punctuation">:</span> <span class="token operator">|</span>
        echo $MY_VAR $FIRST_NAME $MIDDLE_NAME $LAST_NAME<span class="token punctuation">.</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</blockquote>
<p>上面代码中，<code>steps</code>字段只包括一个步骤。该步骤先注入四个环境变量，然后执行一条 Bash 命令。</p>
<h2 id="四、实例：React-项目发布到-GitHub-Pages"><a href="#四、实例：React-项目发布到-GitHub-Pages" class="headerlink" title="四、实例：React 项目发布到 GitHub Pages"></a>四、实例：React 项目发布到 GitHub Pages</h2><p>下面是一个实例，通过 GitHub Actions 构建一个 React 项目，并发布到 GitHub Pages。最终代码都在<a href="https://github.com/ruanyf/github-actions-demo">这个仓库</a>里面，发布后的参考网址为<a href="https://ruanyf.github.io/github-actions-demo">ruanyf.github.io/github-actions-demo</a>。</p>
<p>第一步，GitHub Actions 目前还处在测试阶段，需要到<a href="https://github.com/features/actions/signup/">这个网址</a>申请测试资格。申请以后，可能需要几天才能通过。据说，2019年11月就会放开。</p>
<p>获得资格后，仓库顶部的菜单会出现<code>Actions</code>一项。</p>
<p><img src="https://www.wangbase.com/blogimg/asset/201909/bg2019091106.jpg" alt="img"></p>
<p>第二步，这个示例需要将构建成果发到 GitHub 仓库，因此需要 GitHub 密钥。按照<a href="https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line">官方文档</a>，生成一个密钥。然后，将这个密钥储存到当前仓库的<code>Settings/Secrets</code>里面。</p>
<p><img src="https://www.wangbase.com/blogimg/asset/201909/bg2019091107.jpg" alt="img"></p>
<p>上图是储存秘密的环境变量的地方。环境变量的名字可以随便起，这里用的是<code>ACCESS_TOKEN</code>。如果你不用这个名字，后面脚本里的变量名也要跟着改。</p>
<p>第三步，本地计算机使用<a href="https://github.com/facebook/create-react-app"><code>create-react-app</code></a>，生成一个标准的 React 应用。</p>
<blockquote>
<pre class="line-numbers language-bash"><code class="language-bash">$ npx create-react-app github-actions-demo
$ <span class="token function">cd</span> github-actions-demo
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</blockquote>
<p>然后，打开<code>package.json</code>文件，加一个<code>homepage</code>字段，表示该应用发布后的根目录（参见<a href="https://create-react-app.dev/docs/deployment#building-for-relative-paths">官方文档</a>）。</p>
<blockquote>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token string">"homepage"</span><span class="token punctuation">:</span> <span class="token string">"https://[username].github.io/github-actions-demo"</span><span class="token punctuation">,</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</blockquote>
<p>上面代码中，将<code>[username]</code>替换成你的 GitHub 用户名，参见<a href="https://github.com/ruanyf/github-actions-demo/blob/master/package.json#L10">范例</a>。</p>
<p>第四步，在这个仓库的<code>.github/workflows</code>目录，生成一个 workflow 文件，名字可以随便取，这个示例是<code>ci.yml</code>。</p>
<p>我们选用一个别人已经写好的 action：<a href="https://github.com/marketplace/actions/deploy-to-github-pages">JamesIves/github-pages-deploy-action</a>，它提供了 workflow 的范例文件，直接拷贝过来就行了（查看<a href="https://github.com/ruanyf/github-actions-demo/blob/master/.github/workflows/ci.yml">源码</a>）。</p>
<blockquote>
<pre class="line-numbers language-javascript"><code class="language-javascript">name<span class="token punctuation">:</span> GitHub Actions Build and Deploy Demo
on<span class="token punctuation">:</span>
  push<span class="token punctuation">:</span>
    branches<span class="token punctuation">:</span>
      <span class="token operator">-</span> master
jobs<span class="token punctuation">:</span>
  build<span class="token operator">-</span>and<span class="token operator">-</span>deploy<span class="token punctuation">:</span>
    runs<span class="token operator">-</span>on<span class="token punctuation">:</span> ubuntu<span class="token operator">-</span>latest
    steps<span class="token punctuation">:</span>
    <span class="token operator">-</span> name<span class="token punctuation">:</span> Checkout
      uses<span class="token punctuation">:</span> actions<span class="token operator">/</span>checkout@master

    <span class="token operator">-</span> name<span class="token punctuation">:</span> Build and Deploy
      uses<span class="token punctuation">:</span> JamesIves<span class="token operator">/</span>github<span class="token operator">-</span>pages<span class="token operator">-</span>deploy<span class="token operator">-</span>action@master
      env<span class="token punctuation">:</span>
        ACCESS_TOKEN<span class="token punctuation">:</span> $<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> secrets<span class="token punctuation">.</span>ACCESS_TOKEN <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        BRANCH<span class="token punctuation">:</span> gh<span class="token operator">-</span>pages
        FOLDER<span class="token punctuation">:</span> build
        BUILD_SCRIPT<span class="token punctuation">:</span> npm install <span class="token operator">&amp;&amp;</span> npm run build
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</blockquote>
<p>上面这个 workflow 文件的要点如下。</p>
<blockquote>
<ol>
<li>整个流程在<code>master</code>分支发生<code>push</code>事件时触发。</li>
<li>只有一个<code>job</code>，运行在虚拟机环境<code>ubuntu-latest</code>。</li>
<li>第一步是获取源码，使用的 action 是<code>actions/checkout</code>。</li>
<li>第二步是构建和部署，使用的 action 是<code>JamesIves/github-pages-deploy-action</code>。</li>
<li>第二步需要四个环境变量，分别为 GitHub 密钥、发布分支、构建成果所在目录、构建脚本。其中，只有 GitHub 密钥是秘密变量，需要写在双括号里面，其他三个都可以直接写在文件里。</li>
</ol>
</blockquote>
<p>第五步，保存上面的文件后，将整个仓库推送到 GitHub。</p>
<p>GitHub 发现了 workflow 文件以后，就会自动运行。你可以在网站上实时查看<a href="https://github.com/ruanyf/github-actions-demo/commit/24fbf6a875351297f31434fd44bc3146accf9e59/checks">运行日志</a>，日志默认保存30天。</p>
<p><img src="https://www.wangbase.com/blogimg/asset/201909/bg2019091108.jpg" alt="img"></p>
<p>等到 workflow 运行结束，访问 <a href="https://ruanyf.github.io/github-actions-demo/">GitHub Page</a>，会看到构建成果已经发上网了。</p>
<p><img src="https://www.wangbase.com/blogimg/asset/201909/bg2019091109.jpg" alt="img"></p>
<p>以后，每次修改后推送源码，GitHub Actions 都会自动运行，将构建产物发布到网页。</p>
<h2 id="五、参考链接"><a href="#五、参考链接" class="headerlink" title="五、参考链接"></a>五、参考链接</h2><ul>
<li><a href="https://help.github.com/en/categories/automating-your-workflow-with-github-actions">GitHub Pages 官方文档</a></li>
<li><a href="https://lukeboyle.com/blog-posts/2019/08/github-actions-for-web-apps/">Github Actions for web apps</a>, Luke Boyle</li>
<li><a href="https://medium.com/@adam.zolyak/my-first-week-with-github-actions-5d92de4c4851">My First Week With GitHub Actions</a>, Adam Zolyak</li>
</ul>
]]></content>
      <categories>
        <category>阅读</category>
      </categories>
      <tags>
        <tag>Github</tag>
        <tag>Actions</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown使用</title>
    <url>/posts/e4e.html</url>
    <content><![CDATA[<h1 id="Markdown使用"><a href="#Markdown使用" class="headerlink" title="Markdown使用"></a>Markdown使用</h1><h2 id="Markdown是什么？"><a href="#Markdown是什么？" class="headerlink" title="Markdown是什么？"></a>Markdown是什么？</h2><p><strong>Markdown</strong>是一种轻量级<strong>标记语言</strong>，它以纯文本形式(<em>易读、易写、易更改</em>)编写文档，并最终以HTML格式发布。<br><strong>Markdown</strong>也可以理解为将以MARKDOWN语法编写的语言转换成HTML内容的工具。</p>
<h3 id="谁创造了它？"><a href="#谁创造了它？" class="headerlink" title="谁创造了它？"></a><em>谁</em>创造了它？</h3><p>它由<a href="http://www.aaronsw.com/"><strong>Aaron Swartz</strong></a>和<strong>John Gruber</strong>共同设计，<strong>Aaron Swartz</strong>是一位有着<strong>开挂</strong>一般人生经历的程序员。维基百科对他的<a href="http://zh.wikipedia.org/wiki/%E4%BA%9A%E4%BC%A6%C2%B7%E6%96%AF%E6%B2%83%E8%8C%A8">介绍</a>是：<strong>软件工程师、作家、政治组织者、互联网活动家、维基百科人</strong>。</p>
<p>他有着足以让你跪拜的人生经历：</p>
<ul>
<li><strong>14岁</strong>参与RSS 1.0规格标准的制订。</li>
<li><strong>2004</strong>年入读<strong>斯坦福</strong>，之后退学。</li>
<li><strong>2005</strong>年创建<a href="http://infogami.org/">Infogami</a>，之后与<a href="http://www.reddit.com/">Reddit</a>合并成为其合伙人。</li>
<li><strong>2010</strong>年创立求进会（Demand Progress），积极参与禁止网络盗版法案（SOPA）活动，最终该提案被撤回。</li>
<li><strong>2011</strong>年7月19日，因被控从MIT和JSTOR下载480万篇学术论文并以免费形式上传于网络被捕。</li>
<li><strong>2013</strong>年1月自杀身亡。<img src="https://github.com/younghz/Markdown/raw/master/resource/Aaron_Swartz.jpg" alt="Aaron Swartz"></li>
</ul>
<h3 id="为什么要使用它？"><a href="#为什么要使用它？" class="headerlink" title="为什么要使用它？"></a><em>为什么</em>要使用它？</h3><ul>
<li>它是易读（看起来舒服）、易写（语法简单）、易更改<strong>纯文本</strong>。处处体现着<strong>极简主义</strong>的影子。</li>
<li>兼容HTML，可以转换为HTML格式发布。</li>
<li>跨平台使用。</li>
<li>越来越多的网站支持Markdown。</li>
<li>更方便清晰地组织你的电子邮件。（Markdown-here, Airmail）</li>
<li>摆脱Word（我不是认真的）。</li>
</ul>
<hr>
<h2 id="尝试一下"><a href="#尝试一下" class="headerlink" title="尝试一下"></a>尝试一下</h2><h3 id="斜体和粗体"><a href="#斜体和粗体" class="headerlink" title="斜体和粗体"></a>斜体和粗体</h3><pre><code>*斜体*或_斜体_
**粗体**
***加粗斜体***
~~删除线~~
</code></pre>
<p>view</p>
<p><em>斜体</em>或<em>斜体</em></p>
<p><strong>粗体</strong></p>
<p>*<strong>加粗斜体*</strong></p>
<p><del>删除线</del></p>
<h3 id="分级标题"><a href="#分级标题" class="headerlink" title="分级标题"></a>分级标题</h3><pre><code># 一级标题
## 二级标题
### 三级标题
#### 四级标题
##### 五级标题
###### 六级标题
</code></pre>
<h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><p>Markdown 支持两种形式的链接语法： 行内式和参考式两种形式，行内式一般使用较多。</p>
<h4 id="行内式"><a href="#行内式" class="headerlink" title="行内式"></a>行内式</h4><p>语法说明：</p>
<p>[]里写链接文字，里写链接地址, 中的<code>”“</code>中可以为链接指定title属性，title属性可加可不加。title属性的效果是鼠标悬停在链接上会出现指定的 title文字。链接地址与链接标题前有一个空格。</p>
<pre class="line-numbers language-markdown"><code class="language-markdown">欢迎来到<span class="token url">[wakenhong's blog](https://wakenhong.zone)</span>

欢迎来到<span class="token url">[wakenhong's blog](https://wakenhong <span class="token string">"wakenhong's blog"</span>)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>view</p>
<p>欢迎来到<a href="http://wakenhong.zone/">wakenhong’s blog</a></p>
<p>欢迎来到<a href="http://wakenhong.zone/">wakenhong’s blog</a></p>
<h4 id="参考式"><a href="#参考式" class="headerlink" title="参考式"></a>参考式</h4><p>参考式超链接一般用在学术论文上面，或者另一种情况，如果某一个链接在文章中多处使用，那么使用引用 的方式创建链接将非常好，它可以让你对链接进行统一的管理。</p>
<p>语法说明：<br>参考式链接分为两部分，文中的写法 [链接文字][链接标记]，在文本的任意位置添加[链接标记]:链接地址 “链接标题”，链接地址与链接标题前有一个空格。</p>
<p>如果链接文字本身可以做为链接标记，你也可以写成[链接文字][]<br>[链接文字]：链接地址的形式，见代码的最后一行。</p>
<pre><code>我经常去的几个网站[Google][1],[YouTube][2],[YouTube][]。

[1]:http://www.google.com
[2]:https://www.youtube.com &quot;YouTube&quot;
[YouTube]:https://www.youtube.com
</code></pre>
<p>我经常去的几个网站<a href="http://www.google.com/">Google</a>,<a href="https://www.youtube.com/">YouTube</a>,<a href="https://www.youtube.com/">YouTube</a>。</p>
<h4 id="自动链接"><a href="#自动链接" class="headerlink" title="自动链接"></a>自动链接</h4><p>语法说明：<br>Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用&lt;&gt;包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如：</p>
<pre class="line-numbers language-markdown"><code class="language-markdown">&lt;http://example.com/>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>address@example.com</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>view</p>
<p><a href="http://example.com/">http://example.com/</a><br><a href="mailto:address@example.com">address@example.com</a></p>
<hr>
<h4 id="锚点"><a href="#锚点" class="headerlink" title="锚点"></a>锚点</h4><p>网页中，锚点其实就是页内超链接，也就是链接本文档内部的某些元素，实现当前页面中的跳转。比如我这里写下一个锚点，点击回到目录，就能跳转到目录。 在目录中点击这一节，就能跳过来。还有下一节的注脚。这些根本上都是用锚点来实现的。</p>
<p>注意：</p>
<ol>
<li>Markdown Extra 只支持在标题后插入锚点，其它地方无效。</li>
<li>Leanote 编辑器右侧显示效果区域暂时不支持锚点跳转，所以点来点去发现没有跳转不必惊慌，但是你发布成笔记或博文后是支持跳转的。</li>
</ol>
<pre class="line-numbers language-markdown"><code class="language-markdown"> 跳转测试<span class="token entity" title="&#123;">&amp;#123;</span>#toc-heading-18<span class="token entity" title="&#125;">&amp;#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>跳转到<a href="https://liyangzone.com/2019/07/17/markdown%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/#toc-heading-18">页尾</a>，这个有点问题，会跳转到新标签页的页尾，因为hexo会在生成的a标签上加上<code>target=&quot;_blank&quot;</code>这个属性，暂时无法解决</p>
<hr>
<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><p>有序列表则使用数字接着一个英文句点。</p>
<pre class="line-numbers language-markdown"><code class="language-markdown"><span class="token list punctuation">1.</span> 有序列表项 一
<span class="token list punctuation">2.</span> 有序列表项 二
<span class="token list punctuation">3.</span> 有序列表项 三
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>view</p>
<ol>
<li>有序列表项 一</li>
<li>有序列表项 二</li>
<li>有序列表项 三</li>
</ol>
<h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><p>使用 *，+，- 表示无序列表。</p>
<pre class="line-numbers language-markdown"><code class="language-markdown"><span class="token list punctuation">-</span> 无序列表项 一
<span class="token list punctuation">-</span> 无序列表项 二
<span class="token list punctuation">-</span> 无序列表项 三
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>view</p>
<ul>
<li>无序列表项 一</li>
<li>无序列表项 二</li>
<li>无序列表项 三</li>
</ul>
<h4 id="定义型列表"><a href="#定义型列表" class="headerlink" title="定义型列表"></a>定义型列表</h4><p>语法说明：</p>
<p>定义型列表由名词和解释组成。一行写上定义，紧跟一行写上解释。解释的写法:紧跟一个缩进TabTab</p>
<pre class="line-numbers language-markdown"><code class="language-markdown">代码块 1 Markdown
:    轻量级文本标记语言，可以转换成html，pdf等格式（左侧有一个可见的冒号和四个不可见的空格）

代码块 2
:   这是代码块的定义（左侧有一个可见的冒号和四个不可见的空格）

<span class="token code keyword">        代码块（左侧有八个不可见的空格）</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>view</p>
<ul>
<li><p>代码块 1 Markdown</p>
<p>轻量级文本标记语言，可以转换成html，pdf等格式（左侧有一个可见的冒号和四个不可见的空格）</p>
</li>
<li><p>代码块 2</p>
<p>这是代码块的定义（左侧有一个可见的冒号和四个不可见的空格）</p>
</li>
</ul>
<pre><code>    代码块（左侧有八个不可见的空格）
</code></pre>
<h4 id="列表缩进"><a href="#列表缩进" class="headerlink" title="列表缩进"></a>列表缩进</h4><p>语法说明：</p>
<p>列表项目标记通常是放在最左边，但是其实也可以缩进，最多 3 个空格，项目标记后面则一定要接着至少一个空格或制表符。</p>
<pre class="line-numbers language-markdown"><code class="language-markdown"><span class="token list punctuation">*</span>   轻轻的我走了， 正如我轻轻的来； 我轻轻的招手， 作别西天的云彩。
那河畔的金柳， 是夕阳中的新娘； 波光里的艳影， 在我的心头荡漾。 
软泥上的青荇， 油油的在水底招摇； 在康河的柔波里， 我甘心做一条水草！ 
<span class="token list punctuation">*</span>   那榆荫下的一潭， 不是清泉， 是天上虹； 揉碎在浮藻间， 沉淀着彩虹似的梦。 
寻梦？撑一支长篙， 向青草更青处漫溯； 满载一船星辉， 在星辉斑斓里放歌。 
但我不能放歌， 悄悄是别离的笙箫； 夏虫也为我沉默， 沉默是今晚的康桥！ 
悄悄的我走了， 正如我悄悄的来； 我挥一挥衣袖， 不带走一片云彩。
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>view</p>
<ul>
<li>轻轻的我走了， 正如我轻轻的来； 我轻轻的招手， 作别西天的云彩。<br>那河畔的金柳， 是夕阳中的新娘； 波光里的艳影， 在我的心头荡漾。<br>软泥上的青荇， 油油的在水底招摇； 在康河的柔波里， 我甘心做一条水草！</li>
<li>那榆荫下的一潭， 不是清泉， 是天上虹； 揉碎在浮藻间， 沉淀着彩虹似的梦。<br>寻梦？撑一支长篙， 向青草更青处漫溯； 满载一船星辉， 在星辉斑斓里放歌。<br>但我不能放歌， 悄悄是别离的笙箫； 夏虫也为我沉默， 沉默是今晚的康桥！<br>悄悄的我走了， 正如我悄悄的来； 我挥一挥衣袖， 不带走一片云彩。</li>
</ul>
<h4 id="包含段落的列表"><a href="#包含段落的列表" class="headerlink" title="包含段落的列表"></a>包含段落的列表</h4><p>语法说明：</p>
<p>列表项目可以包含多个段落，每个项目下的段落都必须缩进 4 个空格或是 1 个制表符（显示效果与代码一致）：</p>
<pre class="line-numbers language-markdown"><code class="language-markdown"><span class="token list punctuation">*</span>   轻轻的我走了， 正如我轻轻的来； 我轻轻的招手， 作别西天的云彩。
那河畔的金柳， 是夕阳中的新娘； 波光里的艳影， 在我的心头荡漾。 
软泥上的青荇， 油油的在水底招摇； 在康河的柔波里， 我甘心做一条水草！

<span class="token code keyword">     那榆荫下的一潭， 不是清泉， 是天上虹； 揉碎在浮藻间， 沉淀着彩虹似的梦。 </span>
寻梦？撑一支长篙， 向青草更青处漫溯； 满载一船星辉， 在星辉斑斓里放歌。 
但我不能放歌， 悄悄是别离的笙箫； 夏虫也为我沉默， 沉默是今晚的康桥！

<span class="token list punctuation">*</span>    悄悄的我走了， 正如我悄悄的来； 我挥一挥衣袖， 不带走一片云彩。
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>view</p>
<ul>
<li><p>轻轻的我走了， 正如我轻轻的来； 我轻轻的招手， 作别西天的云彩。<br>那河畔的金柳， 是夕阳中的新娘； 波光里的艳影， 在我的心头荡漾。<br>软泥上的青荇， 油油的在水底招摇； 在康河的柔波里， 我甘心做一条水草！</p>
<p>那榆荫下的一潭， 不是清泉， 是天上虹； 揉碎在浮藻间， 沉淀着彩虹似的梦。<br>寻梦？撑一支长篙， 向青草更青处漫溯； 满载一船星辉， 在星辉斑斓里放歌。<br>但我不能放歌， 悄悄是别离的笙箫； 夏虫也为我沉默， 沉默是今晚的康桥！</p>
</li>
<li><p>悄悄的我走了， 正如我悄悄的来； 我挥一挥衣袖， 不带走一片云彩。</p>
</li>
</ul>
<h4 id="包含引用的列表"><a href="#包含引用的列表" class="headerlink" title="包含引用的列表"></a>包含引用的列表</h4><p>语法说明：</p>
<p>如果要在列表项目内放进引用，那 &gt; 就需要缩进：</p>
<pre class="line-numbers language-markdown"><code class="language-markdown"><span class="token list punctuation">*</span>   阅读的方法:
<span class="token code keyword">    > 打开书本。</span>
<span class="token code keyword">    > 打开电灯。</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>view</p>
<ul>
<li><p>阅读的方法:</p>
<blockquote>
<p>打开书本。<br>打开电灯。</p>
</blockquote>
</li>
</ul>
<h4 id="包含代码区块的引用"><a href="#包含代码区块的引用" class="headerlink" title="包含代码区块的引用"></a>包含代码区块的引用</h4><p>语法说明：<br>如果要放代码区块的话，该区块就需要缩进两次，也就是 8 个空格或是 2 个制表符：</p>
<h4 id="一个特殊情况"><a href="#一个特殊情况" class="headerlink" title="一个特殊情况"></a>一个特殊情况</h4><p>在特殊情况下，项目列表很可能会不小心产生，像是下面这样的写法：</p>
<pre class="line-numbers language-markdown"><code class="language-markdown"><span class="token list punctuation">1986.</span> What a great season.
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>会显示成：</p>
<ol>
<li>What a great season.</li>
</ol>
<p>换句话说，也就是在行首出现数字-句点-空白，要避免这样的状况，你可以在句点前面加上反斜杠：</p>
<pre class="line-numbers language-markdown"><code class="language-markdown">1986\. What a great season.
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>才会正常显示成：</p>
<p>\1986. What a great season.</p>
<hr>
<h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>语法说明：</p>
<p>引用需要在被引用的文本前加上&gt;符号。</p>
<pre class="line-numbers language-markdown"><code class="language-markdown"><span class="token blockquote punctuation">></span> 这是一个有两段文字的引用,
无意义的占行文字1.
无意义的占行文字2.

<span class="token blockquote punctuation">></span> 无意义的占行文字3.
无意义的占行文字4.
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>view</p>
<blockquote>
<p>这是一个有两段文字的引用,<br>无意义的占行文字1.<br>无意义的占行文字2.</p>
</blockquote>
<blockquote>
<p>无意义的占行文字3.<br>无意义的占行文字4.</p>
</blockquote>
<h4 id="引用的多层嵌套"><a href="#引用的多层嵌套" class="headerlink" title="引用的多层嵌套"></a>引用的多层嵌套</h4><p>区块引用可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的 &gt; ：</p>
<pre class="line-numbers language-markdown"><code class="language-markdown"><span class="token blockquote punctuation">>>></span> 请问 Markdwon 怎么用？ - 小白

<span class="token blockquote punctuation">>></span> 自己看教程！ - 愤青

<span class="token blockquote punctuation">></span> 教程在哪？ - 小白
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<blockquote>
<blockquote>
<p>请问 Markdwon 怎么用？ - 小白</p>
</blockquote>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>自己看教程！ - 愤青</p>
</blockquote>
</blockquote>
<blockquote>
<p>教程在哪？ - 小白</p>
</blockquote>
<h4 id="引用其它要素"><a href="#引用其它要素" class="headerlink" title="引用其它要素"></a>引用其它要素</h4><p>引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等：</p>
<pre class="line-numbers language-markdown"><code class="language-markdown"><span class="token blockquote punctuation">></span> <span class="token list punctuation">1.</span>   这是第一行列表项。
<span class="token blockquote punctuation">></span> <span class="token list punctuation">2.</span>   这是第二行列表项。
<span class="token blockquote punctuation">></span> 
<span class="token blockquote punctuation">></span> 给出一些例子代码：
<span class="token blockquote punctuation">></span> 
<span class="token blockquote punctuation">></span><span class="token code keyword">     return shell_exec("echo $input | $markdown_script");</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<ol>
<li>这是第一行列表项。</li>
<li>这是第二行列表项。</li>
</ol>
<p>给出一些例子代码：</p>
<pre><code>return shell_exec(&quot;echo $input | $markdown_script&quot;);
</code></pre>
</blockquote>
<hr>
<h3 id="插入图像"><a href="#插入图像" class="headerlink" title="插入图像"></a>插入图像</h3><h4 id="行内式-1"><a href="#行内式-1" class="headerlink" title="行内式"></a>行内式</h4><p>图片的创建方式与超链接相似，而且和超链接一样也有两种写法，行内式和参考式写法。</p>
<p>语法中图片Alt的意思是如果图片因为某些原因不能显示，就用定义的图片Alt文字来代替图片。 图片Title则和链接中的Title一样，表示鼠标悬停与图片上时出现的文字。 Alt 和 Title 都不是必须的，可以省略，但建议写上</p>
<p>语法说明：![图片Alt]图片地址“图片Title”</p>
<pre class="line-numbers language-markdown"><code class="language-markdown">美丽风景： 
<span class="token url">![美丽风景](https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/110404-152108304476cb.jpg <span class="token string">"美丽风景"</span>)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/110404-152108304476cb.jpg" alt="美丽风景" style="zoom:150%;" />

<h4 id="参考式-1"><a href="#参考式-1" class="headerlink" title="参考式"></a>参考式</h4><p>语法说明：</p>
<p>在文档要插入图片的地方写![图片Alt][标记]</p>
<p>在文档的最后写上[标记]:图片地址 “Title”</p>
<pre class="line-numbers language-markdown"><code class="language-markdown"><span class="token url">![美丽风景](https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/110404-152108304476cb.jpg <span class="token string">"美丽风景"</span>)</span>

[scenery]:https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/110404-152108304476cb.jpg "美丽风景"
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>view</p>
<img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/110404-152108304476cb.jpg" alt="美丽风景" style="zoom:150%;" />

<h3 id="内容目录"><a href="#内容目录" class="headerlink" title="内容目录"></a>内容目录</h3><p>在段落中填写 [TOC] 以显示全文内容的目录结构。</p>
<p>效果参见最上方的目录</p>
<p>[TOC]</p>
<h3 id="注脚"><a href="#注脚" class="headerlink" title="注脚"></a>注脚</h3><p>语法说明：</p>
<p>在需要添加注脚的文字后加上脚注名字[^注脚名字],称为加注。 然后在文本的任意位置一般在最后一般在最后添加脚注，脚注前必须有对应的脚注名字。</p>
<p>注意：经测试注脚与注脚之间必须空一行，不然会失效。成功后会发现，即使你没有把注脚写在文末，经Markdown转换后，也会自动归类到文章的最后。</p>
<pre class="line-numbers language-markdown"><code class="language-markdown">使用 Markdown[^1]可以效率的书写文档, 直接转换成 HTML[^2], 你可以使用 Leanote[^Le] 编辑器进行书写。

[^1]:Markdown是一种纯文本标记语言

[^2]:HyperText Markup Language 超文本标记语言

[^Le]:开源笔记平台，支持Markdown和笔记直接发为博文
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>view</p>
<p>使用 Markdown<a href="https://liyangzone.com/2019/07/17/markdown%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/Markdown%E6%98%AF%E4%B8%80%E7%A7%8D%E7%BA%AF%E6%96%87%E6%9C%AC%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80">^1</a>可以效率的书写文档, 直接转换成 HTML[^2], 你可以使用 Leanote<a href="https://liyangzone.com/2019/07/17/markdown%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/%E5%BC%80%E6%BA%90%E7%AC%94%E8%AE%B0%E5%B9%B3%E5%8F%B0%EF%BC%8C%E6%94%AF%E6%8C%81Markdown%E5%92%8C%E7%AC%94%E8%AE%B0%E7%9B%B4%E6%8E%A5%E5%8F%91%E4%B8%BA%E5%8D%9A%E6%96%87">^Le</a> 编辑器进行书写。</p>
<p>[^2]: HyperText Markup Language 超文本标记语言</p>
<p>注：脚注自动被搬运到最后面，请到文章末尾查看，并且脚注后方的链接可以直接跳转回到加注的地方</p>
<h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>语法说明：</p>
<p>不管是哪种方式，第一行为表头，第二行分隔表头和主体部分，第三行开始每一行为一个表格行。<br>列于列之间用管道符|隔开。原生方式的表格每一行的两边也要有管道符。<br>第二行还可以为不同的列指定对齐方向。默认为左对齐，在-右边加上:就右对齐。</p>
<ol>
<li>简单方式写表格：</li>
</ol>
<pre class="line-numbers language-markdown"><code class="language-markdown">学号|姓名|分数
-|-|-
小明|男|75
小红|女|79
小陆|男|92
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>2.原生方式写表格：</p>
<pre class="line-numbers language-markdown"><code class="language-markdown">|学号|姓名|分数|
|-|-|-|
|小明|男|75|
|小红|女|79|
|小陆|男|92|
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>3.为表格第二列指定方向：</p>
<pre class="line-numbers language-markdown"><code class="language-markdown">产品|价格
-|-:
Leanote 高级账号|60元/年
Leanote 超级账号|120元/年
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>view</p>
<ol>
<li>简单方式写表格：</li>
</ol>
<table>
<thead>
<tr>
<th align="left">学号</th>
<th align="left">姓名</th>
<th align="left">分数</th>
</tr>
</thead>
<tbody><tr>
<td align="left">小明</td>
<td align="left">男</td>
<td align="left">75</td>
</tr>
<tr>
<td align="left">小红</td>
<td align="left">女</td>
<td align="left">79</td>
</tr>
<tr>
<td align="left">小陆</td>
<td align="left">男</td>
<td align="left">92</td>
</tr>
</tbody></table>
<p>2.原生方式写表格：</p>
<table>
<thead>
<tr>
<th align="left">学号</th>
<th align="left">姓名</th>
<th align="left">分数</th>
</tr>
</thead>
<tbody><tr>
<td align="left">小明</td>
<td align="left">男</td>
<td align="left">75</td>
</tr>
<tr>
<td align="left">小红</td>
<td align="left">女</td>
<td align="left">79</td>
</tr>
<tr>
<td align="left">小陆</td>
<td align="left">男</td>
<td align="left">92</td>
</tr>
</tbody></table>
<p>3.为表格第二列指定方向：</p>
<table>
<thead>
<tr>
<th align="left">产品</th>
<th align="left">价格</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Leanote 高级账号</td>
<td align="left">60元/年</td>
</tr>
<tr>
<td align="left">Leanote 超级账号</td>
<td align="left">120元/年</td>
</tr>
</tbody></table>
<h3 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h3><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p>
<pre class="line-numbers language-markdown"><code class="language-markdown"><span class="token hr punctuation">* * *</span>

<span class="token hr punctuation">***</span>

<span class="token hr punctuation">*****</span>

<span class="token hr punctuation">- - -</span>

<span class="token hr punctuation">---------------------------------------</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>显示效果都一样</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>对于程序员来说这个功能是必不可少的，插入程序代码的方式有两种，一种是利用缩进TabTab, 另一种是利用”`”符号（一般在ESC键下方）包裹代码。</p>
<p>语法说明：</p>
<ol>
<li>插入行内代码，即插入一个单词或者一句代码的情况，使用<code>code</code>这样的形式插入。</li>
<li>插入多行代码，可以使用缩进或者“<code>code “</code>,具体看示例</li>
</ol>
<p><strong>注意： 缩进式插入前方必须有空行</strong></p>
<h4 id="行内式-2"><a href="#行内式-2" class="headerlink" title="行内式"></a>行内式</h4><pre><code>C语言里的函数 `scanf()` 怎么使用？
</code></pre>
<p>view<br>C语言里的函数 <code>scanf()</code> 怎么使用？</p>
<h4 id="缩进式多行代码"><a href="#缩进式多行代码" class="headerlink" title="缩进式多行代码"></a>缩进式多行代码</h4><p>缩进 4 个空格或是 1 个制表符</p>
<p>一个代码区块会一直持续到没有缩进的那一行（或是文件结尾）。</p>
<pre><code>    #include &lt;stdio.h&gt;
    int main(void)
    &#123;
        printf(&quot;Hello world&quot;);
    &#125;
</code></pre>
<p>view</p>
<pre class="line-numbers language-c"><code class="language-c">    <span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
    <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="用六个-包裹多行代码"><a href="#用六个-包裹多行代码" class="headerlink" title="用六个`包裹多行代码"></a>用六个`包裹多行代码</h4><pre class="line-numbers language-j"><code class="language-j"><span class="token conjunction variable">`</span> <span class="token conjunction variable">`</span> <span class="token conjunction variable">`</span>
<span class="token verb keyword">#</span>include <span class="token verb keyword">&lt;</span>stdi<span class="token verb keyword">o.</span>h<span class="token verb keyword">></span>
int main<span class="token punctuation">(</span>void<span class="token punctuation">)</span>
<span class="token conjunction variable">&amp;</span><span class="token verb keyword">#</span><span class="token number">123</span><span class="token verb keyword">;</span>
    printf<span class="token punctuation">(</span><span class="token conjunction variable">"</span>Hello world<span class="token conjunction variable">"</span><span class="token punctuation">)</span><span class="token verb keyword">;</span>
<span class="token conjunction variable">&amp;</span><span class="token verb keyword">#</span><span class="token number">125</span><span class="token verb keyword">;</span>
<span class="token conjunction variable">`</span> <span class="token conjunction variable">`</span> <span class="token conjunction variable">`</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>另外说明一下，第一个 ```后可以加上代码的类型，js代码就加上js,css就加上css，渲染出来的样式会有区别。比如下面这段，虽然内容基本差不多，第一个是js，第二个是json，渲染出来就是不一样的。如果不加的话文字都是白色的</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> object <span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
  <span class="token string">"avatar"</span><span class="token punctuation">:</span> <span class="token string">"http://image.luokangyuan.com/1_qq_27922023.jpg"</span><span class="token punctuation">,</span>
  <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"码酱"</span><span class="token punctuation">,</span>
  <span class="token string">"introduction"</span><span class="token punctuation">:</span> <span class="token string">"我不是大佬，只是在追寻大佬的脚步"</span><span class="token punctuation">,</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
  <span class="token string">"avatar"</span><span class="token punctuation">:</span> <span class="token string">"http://image.luokangyuan.com/1_qq_27922023.jpg"</span><span class="token punctuation">,</span>
  <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"码酱"</span><span class="token punctuation">,</span>
  <span class="token string">"introduction"</span><span class="token punctuation">:</span> <span class="token string">"我不是大佬，只是在追寻大佬的脚步"</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> object <span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
  <span class="token string">"avatar"</span><span class="token punctuation">:</span> <span class="token string">"http://image.luokangyuan.com/1_qq_27922023.jpg"</span><span class="token punctuation">,</span>
  <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"码酱"</span><span class="token punctuation">,</span>
  <span class="token string">"introduction"</span><span class="token punctuation">:</span> <span class="token string">"我不是大佬，只是在追寻大佬的脚步"</span><span class="token punctuation">,</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="HTML-原始码"><a href="#HTML-原始码" class="headerlink" title="HTML 原始码"></a>HTML 原始码</h4><p>在代码区块里面， &amp; 、 &lt; 和 &gt; 会自动转成 HTML 实体，这样的方式让你非常容易使用 Markdown 插入范例用的 HTML 原始码，只需要复制贴上，剩下的 Markdown 都会帮你处理，例如：</p>
<p>第一个例子：</p>
<pre class="line-numbers language-markdown"><code class="language-markdown"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
   © 2018 <span class="token italic"><span class="token punctuation">*</span><span class="token punctuation">*</span><span class="token punctuation">*</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>view</p>
<p>© 2018 ***</p>
<blockquote>
<p>结语 :</p>
<p>借鉴于<a href="https://liyangzone.com/2019/07/17/markdown%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/#toc-heading-6">https://liyangzone.com/2019/07/17/markdown%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/#toc-heading-6</a> 留下笔记以备后期</p>
</blockquote>
]]></content>
      <categories>
        <category>阅读</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客添加一级分类相册功能</title>
    <url>/posts/427b.html</url>
    <content><![CDATA[<p>最近在折腾自己的博客，在折腾的过程中也参观了许多大牛的博客，发现不少博主都有个相册页面，我也想在自己的博客上面加个相册功能。但是我现在用的这个主题呢，虽然有个相册的功能，但是我感觉有点简陋，点击照片是个弹出的轮播图，照片多了的话还要一张一张的翻。如下图：</p>
<p><img src="https://images.liyangzone.com/article_img/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/%E6%B7%BB%E5%8A%A0%E7%9B%B8%E5%86%8C%E6%95%99%E7%A8%8B/2019-07-22-01.jpg"></p>
<span id="more"></span>

<p>后来在网上找了不少教程，可是实现的结果大部分都是这种：</p>
<p><img src="https://images.liyangzone.com/article_img/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/%E6%B7%BB%E5%8A%A0%E7%9B%B8%E5%86%8C%E6%95%99%E7%A8%8B/%E4%B8%8D%E5%B8%A6%E5%88%86%E7%B1%BB%E7%9A%84%E7%9B%B8%E5%86%8C.jpg"></p>
<p>虽然有了分类的功能，但是所有照片都是在一个页面上，图片多了会影响页面加载速度，页面也会变得很长，移动端会浪费大量流量，用户体验不是很好。</p>
<p>该博客地址：<a href="http://lawlite.me/photos/">http://lawlite.me/photos</a></p>
<p>而我想要的呢，是个类似<code>QQ空间</code>的相册，要有个相册目录界面，然后可以从目录页跳转至相册列表界面。 然后我翻遍了整个互联网终于找到了一个有相册分类功能的博客，该博客的相册界面是这样的：</p>
<p><img src="https://images.liyangzone.com/article_img/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/%E6%B7%BB%E5%8A%A0%E7%9B%B8%E5%86%8C%E6%95%99%E7%A8%8B/%E5%88%86%E7%B1%BB%E7%9B%B8%E5%86%8C1.jpg"><br><img src="https://images.liyangzone.com/article_img/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/%E6%B7%BB%E5%8A%A0%E7%9B%B8%E5%86%8C%E6%95%99%E7%A8%8B/20190722-153547.jpg"></p>
<p>该博客地址：<a href="http://www.rayblog.cn/album/">http://www.rayblog.cn/album</a></p>
<p>好吧，这就是我想要的效果，而且博客下面还有教程，我研究了半天，把代码都拷到本机运行了之后，发现他这个教程也只是实现了相册的列表界面，至于目录界面是怎么弄出来的只是一笔带过。并没有实现的细节。我个人猜测他的目录界面是一个<code>album/index.md</code>文件，然后md文件里手动写的HTML代码。 </p>
<p>虽然这种方式我也能实现，但我并不想这么做，因为我感觉在markdown文件里面写HTML和js不是很优雅，也有些繁琐，假如要添加一个相册的话还要手动修改里面的HTML代码，添加对应的链接。</p>
<p>后来我仔细研究了这个主题的源码，发现这个主题的<code>友情链接</code>界面实现的方式是这样的，读取<code>sources/_data/friends.json</code>文件,该文件内容如下：</p>
<pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">[</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>
  <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/1_qq_27922023.jpg"</span><span class="token punctuation">,</span>
  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"码酱"</span><span class="token punctuation">,</span>
  <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"我不是大佬，只是在追寻大佬的脚步"</span><span class="token punctuation">,</span>
  <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://luokangyuan.com/"</span><span class="token punctuation">,</span>
  <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span>
&amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>
  <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/4027734.jpeg"</span><span class="token punctuation">,</span>
  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"闪烁之狐"</span><span class="token punctuation">,</span>
  <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬"</span><span class="token punctuation">,</span>
  <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://blinkfox.github.io/"</span><span class="token punctuation">,</span>
  <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span>
&amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>
  <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/avatar.jpg"</span><span class="token punctuation">,</span>
  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"ja_rome"</span><span class="token punctuation">,</span>
  <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"平凡的脚步也可以走出伟大的行程"</span><span class="token punctuation">,</span>
  <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"ttps://me.csdn.net/jlh912008548"</span><span class="token punctuation">,</span>
  <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span>
&amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>该文件包含每个友链的头像、名字、介绍、地址、标题信息，然后hexo会按照friends.ejs模板文件里的结构渲染出来列表，实现的效果就是这样的:<br><img src="https://images.liyangzone.com/article_img/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/%E6%B7%BB%E5%8A%A0%E7%9B%B8%E5%86%8C%E6%95%99%E7%A8%8B/2019-07-22-02.jpg"></p>
<p>就是三个a标签，里面包含头像、地址等信息，点击后跳到对应的地址。</p>
<p>那么我们也能自定义一个相册的配置文件和模板文件，然后hexo读取这个配置文件，自动生成目录界面和列表界面，这样的话，只需要修改这个配置文件就能完成对相册的各种操作（增删改）。</p>
<p>好吧，有了思路，就已经成功一半了，至于代码实现呢，就只是时间问题了。花了一个周末的时间我终于把它实现了。下面是具体实现过程:</p>
<h4 id="1、添加【相册】菜单"><a href="#1、添加【相册】菜单" class="headerlink" title="1、添加【相册】菜单"></a>1、添加【相册】菜单</h4><p>这里要修改几个文件：</p>
<p>该主题的配置文件<code>_config.yml</code> ，不要跟站点根目录下的同名文件搞混了，在<code>menu</code>下添加以下代码:</p>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">Galleries</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> /galleries
    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fa<span class="token punctuation">-</span>photo
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>该主题的语言配置文件目录 <code>languages</code>下的 <code>default.yml</code>和<code>zh-CN.yml</code>，分别是英文和中文的配置文件，分别添加以下内容，</p>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">galleries</span><span class="token punctuation">:</span> galleries

<span class="token key atrule">galleries</span><span class="token punctuation">:</span> 相册
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>该主题目录下<code>layout/_partial/navigation.ejs</code>和<code>layout/_partial/mobile-nav.ejs</code>文件里添加</p>
<pre class="line-numbers language-js"><code class="language-js">    menuMap<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">"Galleries"</span><span class="token punctuation">,</span> <span class="token string">"相册"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>至于添加到什么位置，你打开文件就知道了，里面会有类似格式的代码，很容易找到的。</p>
<p>做完以上操作后，你就会发现<code>相册</code>的菜单已经出现了：</p>
<p><img src="https://images.liyangzone.com/article_img/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/%E6%B7%BB%E5%8A%A0%E7%9B%B8%E5%86%8C%E6%95%99%E7%A8%8B/2019-07-22-03.jpg"></p>
<p>点击就能跳转到<code>galleries</code>下，然而浏览器会提示你：</p>
<p><img src="https://images.liyangzone.com/article_img/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/%E6%B7%BB%E5%8A%A0%E7%9B%B8%E5%86%8C%E6%95%99%E7%A8%8B/2019-07-22-04.jpg"></p>
<p>因为站点下并没有<code>galleries/index.html</code>这个文件，如何生成这个文件呢?<br>在站点根目录<code>source</code>下新建<code>galleries</code>目录，然后在该目录下新建<code>index.md</code>，就会生成<code>index.html</code>文件了，然而却是这个效果：</p>
<p><img src="https://images.liyangzone.com/article_img/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/%E6%B7%BB%E5%8A%A0%E7%9B%B8%E5%86%8C%E6%95%99%E7%A8%8B/2019-07-22-05.jpg"></p>
<h4 id="2、生成相册目录和相册列表"><a href="#2、生成相册目录和相册列表" class="headerlink" title="2、生成相册目录和相册列表"></a>2、生成相册目录和相册列表</h4><p>这是为什么呢？因为hexo把这个文件当成一个普通的文章来渲染了，而我们需要自定义样式，不能让它渲染成普通的文章。要让它渲染成一个<code>layout</code>,也就是我们自定义的模板。需要以下操作：<br>在<code>index.md</code>文件里添加以下内容，注意，那几个中划线也不要少了。</p>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span>
<span class="token key atrule">title</span><span class="token punctuation">:</span> 相册
<span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"galleries"</span>
<span class="token punctuation">---</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>首先添加自定义CSS样式文件，该<code>主题</code>目录下的<code>source/css</code>里新建<code>gallery.css</code>文件，复制以下css样式进去：</p>
<pre class="line-numbers language-css"><code class="language-css"><span class="token number">.</span>gallery-wrapper&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>
  <span class="token property">padding-top</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>
&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>
<span class="token number">.</span>gallery-wrapper <span class="token number">.</span>gallery-box&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>
  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">5</span>px <span class="token important">!important</span><span class="token punctuation">;</span>
&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>

<span class="token number">.</span>gallery-wrapper <span class="token number">.</span>gallery-item &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>
  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span>
  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span>
  <span class="token property">padding-bottom</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
  <span class="token property">-moz-box-shadow</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">1</span>px <span class="token number">3</span>px <span class="token number">0</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0.22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">-webkit-box-shadow</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">1</span>px <span class="token number">3</span>px <span class="token number">0</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0.22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">1</span>px <span class="token number">3</span>px <span class="token number">0</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0.22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>

<span class="token number">.</span>gallery-cover-box&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>
  <span class="token property">padding-top</span><span class="token punctuation">:</span> <span class="token number">60%</span><span class="token punctuation">;</span>
  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> center center no-repeat<span class="token punctuation">;</span>
  <span class="token property">-webkit-background-size</span><span class="token punctuation">:</span> cover<span class="token punctuation">;</span>
  <span class="token property">background-size</span><span class="token punctuation">:</span> cover<span class="token punctuation">;</span>
&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>

<span class="token number">.</span>gallery-cover-box <span class="token number">.</span>gallery-cover-img &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>
  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>
  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>
  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-<span class="token number">50%</span>,-<span class="token number">50%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>
<span class="token number">.</span>gallery-item <span class="token number">.</span>gallery-name&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">14</span>px<span class="token punctuation">;</span>
  <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">24</span>px<span class="token punctuation">;</span>
  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#666</span><span class="token punctuation">;</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>

<span class="token number">.</span>waterfall &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>
  <span class="token property">column-count</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">;</span>
  <span class="token property">column-gap</span><span class="token punctuation">:</span> <span class="token number">1</span>em<span class="token punctuation">;</span>
&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>
<span class="token number">.</span>photo-wrapper&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>
  <span class="token property">padding-top</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>
&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>
<span class="token number">.</span>photo-item &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>
  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>
  <span class="token property">padding-bottom</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token property">margin-bottom</span><span class="token punctuation">:</span> <span class="token number">14</span>px<span class="token punctuation">;</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token property">-moz-page-break-inside</span><span class="token punctuation">:</span> avoid<span class="token punctuation">;</span>
  <span class="token property">-webkit-column-break-inside</span><span class="token punctuation">:</span> avoid<span class="token punctuation">;</span>
  <span class="token property">break-inside</span><span class="token punctuation">:</span> avoid<span class="token punctuation">;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>
  <span class="token property">-moz-box-shadow</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">1</span>px <span class="token number">3</span>px <span class="token number">0</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0.22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">-webkit-box-shadow</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">1</span>px <span class="token number">3</span>px <span class="token number">0</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0.22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">1</span>px <span class="token number">3</span>px <span class="token number">0</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0.22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>
<span class="token number">.</span>photo-item img &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>
&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>
<span class="token number">.</span>photo-item <span class="token number">.</span>photo-name&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">14</span>px<span class="token punctuation">;</span>
  <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>
  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
  <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>
  <span class="token property">margin-bottom</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>
  <span class="token property">border-top</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#dddddd</span><span class="token punctuation">;</span>
&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/*适配移动端布局*/</span>
<span class="token atrule"><span class="token rule">@media</span> only screen and <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 601px<span class="token punctuation">)</span> &amp;#123<span class="token punctuation">;</span></span>
  <span class="token number">.</span>waterfall &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>
    <span class="token property">column-count</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token property">column-gap</span><span class="token punctuation">:</span> <span class="token number">1</span>em<span class="token punctuation">;</span>
  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>
&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在该主题<code>layout</code>目录下新建<code>galleries.ejs</code>文件，添加以下代码：</p>
<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/css/gallery.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

&lt;%- partial('_partial/bg-cover') %>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">if</span> <span class="token attr-name">(site.data</span> <span class="token attr-name">&amp;&amp;</span> <span class="token attr-name">site.data.galleries)</span> <span class="token attr-name">&amp;#123;</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>
        &lt;% var galleries = site.data.galleries; %>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gallery-wrapper row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            &lt;% for (var i = 0, len = galleries.length; i &lt; len; i++) <span class="token entity" title="&#123;">&amp;#123;</span> %>
            &lt;% var gallery = galleries[i]; %>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col s6 m4 l4 xl3 gallery-box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./&lt;%- gallery.name %<span class="token punctuation">></span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gallery-item<span class="token punctuation">"</span></span> <span class="token attr-name">data-aos</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zoom-in-up<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gallery-cover-box<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url">url(http://图片地址.com/&lt;%- gallery.cover%>)</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gallery-name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%-</span> <span class="token attr-name">gallery.name</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">&amp;#125;</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">&amp;#125;</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span>


<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>同目录下新建<code>gallery.ejs</code>，添加以下代码：</p>
<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/css/gallery.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/libs/fancybox/jquery.fancybox.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/libs/justifiedGallery/justifiedGallery.min.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

&lt;%- partial('_partial/post-cover') %>
&lt;%
let galleries = [];
if (site.data &amp;&amp; site.data.galleries) <span class="token entity" title="&#123;">&amp;#123;</span>
    galleries = site.data.galleries;
<span class="token entity" title="&#125;">&amp;#125;</span>
var pageTitle = page.title;
function getCurrentGallery(galleries, pageTitle) <span class="token entity" title="&#123;">&amp;#123;</span>
    for (let i = 0; i &lt; galleries.length; i++) <span class="token entity" title="&#123;">&amp;#123;</span>
        if (galleries[i]['name'] == pageTitle) <span class="token entity" title="&#123;">&amp;#123;</span>
            return galleries[i];
        <span class="token entity" title="&#125;">&amp;#125;</span>
    <span class="token entity" title="&#125;">&amp;#125;</span>
<span class="token entity" title="&#125;">&amp;#125;</span>
var currentGallery = getCurrentGallery(galleries, pageTitle)

var photos = currentGallery.photos;

let imageStr = ''

for (var i = 0, len = photos.length; i &lt; len; i++) <span class="token entity" title="&#123;">&amp;#123;</span>
    var photo = photos[i];

    imageStr += "&lt;a href=\"http://图片地址.com/" + photo + "\"" +
            "     class=\"photo-item\" rel=\"example_group\"" +
            "     data-fancybox=\"images\">" +
            "      &lt;img src=\"http://图片地址.com/" + photo + "\"" +
            "       alt=" + photo + ">\n" +
            "    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>"

<span class="token entity" title="&#125;">&amp;#125;</span>
%>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>photo-wrapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>waterfall<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mygallery<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%-</span> <span class="token attr-name">imageStr</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>


<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/libs/fancybox/fancybox.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/libs/justifiedGallery/justifiedGallery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">

  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"a[rel=example_group]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fancybox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#mygallery"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">justifiedGallery</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>margins<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> rowHeight<span class="token punctuation">:</span> <span class="token number">150</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>以上代码实现的功能呢，就是读取相册配置文件并把相册目录和相册列表都渲染成HTML，用<code>&lt;% %&gt;</code>包起来的代码是<code>ejs</code>语法，调试的话是在本地控制台输出的而不是浏览器，就是你输入<code>hexo s</code>的地方，我这里用的是WebStorm自带的终端，看下图：</p>
<p><img src="https://images.liyangzone.com/article_img/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/%E6%B7%BB%E5%8A%A0%E7%9B%B8%E5%86%8C%E6%95%99%E7%A8%8B/2019-07-22-06.jpg"></p>
<p>另外上面代码里引用了两个<code>jquery插件</code>，分别是<code>fancybox</code>和<code>justifiedGallery</code>, 一个是点击弹出的轮播插件，一个是自动调整图片布局的插件，需要自行下载并放到相应目录，当然，你也可以用浏览器调试工具直接在我的博客上下载，在sources里找到对应的文件，另存为就行。</p>
<h4 id="3、制作相册配置文件"><a href="#3、制作相册配置文件" class="headerlink" title="3、制作相册配置文件"></a>3、制作相册配置文件</h4><p>在<code>站点</code>目录<code>sources/_data/</code>下新建一个<code>galleries.json</code>的文件，模板如下：</p>
<pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">[</span>
  &amp;#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"2017"</span><span class="token punctuation">,</span>
    <span class="token property">"cover"</span><span class="token operator">:</span> <span class="token string">"2017/IMG_20171109_124516.jpg"</span><span class="token punctuation">,</span>
    <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"2017年记录"</span><span class="token punctuation">,</span>
    <span class="token property">"photos"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token string">"2017/IMG_20170924_110224.jpg"</span><span class="token punctuation">,</span>
      <span class="token string">"2017/IMG_20170924_113412.jpg"</span><span class="token punctuation">,</span>
      <span class="token string">"2017/IMG_20171109_124516.jpg"</span><span class="token punctuation">,</span>
      <span class="token string">"2017/IMG_20171125_125304.jpg"</span><span class="token punctuation">,</span>
      <span class="token string">"2017/IMG_20171126_181605.jpg"</span>
    <span class="token punctuation">]</span>
  &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
  &amp;#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"2018"</span><span class="token punctuation">,</span>
    <span class="token property">"cover"</span><span class="token operator">:</span> <span class="token string">"2018/IMG_20181124_125818.jpg"</span><span class="token punctuation">,</span>
    <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"2018年记录"</span><span class="token punctuation">,</span>
    <span class="token property">"photos"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token string">"2018/IMG_20180204_113055.jpg"</span><span class="token punctuation">,</span>
      <span class="token string">"2018/IMG_20180204_113302.jpg"</span><span class="token punctuation">,</span>
      <span class="token string">"2018/IMG_20180204_113442.jpg"</span><span class="token punctuation">,</span>
      <span class="token string">"2018/IMG_20180208_083336.jpg"</span>
    <span class="token punctuation">]</span>
  &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
  &amp;#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"2019"</span><span class="token punctuation">,</span>
    <span class="token property">"cover"</span><span class="token operator">:</span> <span class="token string">"2019/IMG_20190331_165713_1.jpg"</span><span class="token punctuation">,</span>
    <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"2019年记录"</span><span class="token punctuation">,</span>
    <span class="token property">"photos"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token string">"2019/IMG_20190118_200104.jpg"</span><span class="token punctuation">,</span>
      <span class="token string">"2019/IMG_20190118_200120.jpg"</span><span class="token punctuation">,</span>
      <span class="token string">"2019/IMG_20190118_200456.jpg"</span>
    <span class="token punctuation">]</span>
  &amp;#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token punctuation">]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>就是一个包含多个相册的列表JSON，每个相册有以下字段，<code>name</code>是相册标题，<code>cover</code>是封面图片，从相册里随便选一个就行，<code>description</code>是相册介绍，<code>photos</code>是图片列表。图片较少的话手动复制进去就行，如果你图片较多的话推荐使用脚本之类的东西自动生成，我是使用了上面博客里的js文件生成的。我这里使用了七牛对象存储做为图床，需要在代码里加上七牛的地址才能正常显示。</p>
<p>配置文件建好了之后还没完，只剩最后一个步骤了，在<code>galleries</code>下建立对应的相册名称目录和文件，比如我这三个相册需要建 2017 2018 2019三个目录，然后下面再分别新建<code>index.md</code>文件，文件内容为:</p>
<pre class="line-numbers language-html"><code class="language-html">---
title: 2017
layout: "gallery"
---
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>建好相应目录和文件之后，如果你的图片路径也没有错的话，相册目录和列表就都会渲染出来了，如下所示：</p>
<p><img src="https://images.liyangzone.com/article_img/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/%E6%B7%BB%E5%8A%A0%E7%9B%B8%E5%86%8C%E6%95%99%E7%A8%8B/2019-07-22-07.jpg"></p>
<p><img src="https://images.liyangzone.com/article_img/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/%E6%B7%BB%E5%8A%A0%E7%9B%B8%E5%86%8C%E6%95%99%E7%A8%8B/20190722_161044.jpg"></p>
<p><img src="https://images.liyangzone.com/article_img/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/%E6%B7%BB%E5%8A%A0%E7%9B%B8%E5%86%8C%E6%95%99%E7%A8%8B/20190722_160930.jpg"></p>
<h4 id="4、照片列表的布局选择"><a href="#4、照片列表的布局选择" class="headerlink" title="4、照片列表的布局选择"></a>4、照片列表的布局选择</h4><p>上面的博客用的布局都比较简单粗暴，都是固定的大小和宽高比。但是不同的图片有不同的宽高比，用这种模式的话图片有两种显示方式，一是强制缩放到固定的宽高，二是裁切只显示一部分，但是都有缺点，第一个会图片会变形，第二个图片显示不全。那么有没有两全齐美的办法呢？答案是肯定的。首先我选用的是瀑布流布局，用CCS3的新特性实现的，这种模式的特点是等宽布局，固定列数，图片高度自适应，如下图：</p>
<p><img src="https://images.liyangzone.com/article_img/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/%E6%B7%BB%E5%8A%A0%E7%9B%B8%E5%86%8C%E6%95%99%E7%A8%8B/20190115114259.jpg"></p>
<p>看起来似乎没什么问题，高端大气上档次，然而做好了我发现图片的排列顺序是这个样子的，是按列竖向排列的，不太符合阅读习惯，PASS。</p>
<p>另外一种布局呢是等高布局，如图；<br><img src="https://images.liyangzone.com/article_img/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/%E6%B7%BB%E5%8A%A0%E7%9B%B8%E5%86%8C%E6%95%99%E7%A8%8B/20190723_110706.jpg"></p>
<p>这种布局是等高布局，图片高度一致，宽度自适应，图片托管网站flickr就是用的这种模式，但是用CSS方法是实现不了的，因为每一行最后张图片不一定能正好撑满这一行，需要用js动态设置图片的宽高来实现，上面引用的<code>justifiedGallery</code>插件就是来完成这个的。<br>下面代码的功能就是初始化这个插件，间距是5px，每一行的高度是150px。</p>
<pre class="line-numbers language-js"><code class="language-js">  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#mygallery"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">justifiedGallery</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>margins<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> rowHeight<span class="token punctuation">:</span> <span class="token number">150</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这两种布局呢，上面的代码里都是包含了的。是可以手动切换的。只需要把上面那句代码注释掉就会切换到瀑布流布局，效果如下图：<br><img src="https://images.liyangzone.com/article_img/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/%E6%B7%BB%E5%8A%A0%E7%9B%B8%E5%86%8C%E6%95%99%E7%A8%8B/20190723_134939.jpg"></p>
<p>当然，你要是对我写的样式不满意的话也可以自己修改代码，边框和文件名都是可以去掉的。</p>
<h4 id="5、图床相关事项"><a href="#5、图床相关事项" class="headerlink" title="5、图床相关事项"></a>5、图床相关事项</h4><p>2019-08-28更新:</p>
<p>最初我是采用的七牛对象存储当为图床，但是我发现一个问题，在相册列表界面下，相册图片较多或图片体积很大的情况下加载速度会很慢，也会浪费大量的流量。七牛CDN免费流量只有10G，然而我还作死的把几个图片的链接地址放到了某论坛上，图片也没有做任何处理，一个图片为几MB大小，在我放出外链几个小时之后，CDN流量就爆了，超出了约60G：</p>
<p><img src="https://images.liyangzone.com/article_img/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/%E6%B7%BB%E5%8A%A0%E7%9B%B8%E5%86%8C%E6%95%99%E7%A8%8B/20190828_223502.jpg"></p>
<p>为了防止类似的事情发生，以及减少CDN流量消耗，可以使用以下两种方案：</p>
<p>一是手动生成图片的缩略图到另外一个新目录，保持与原相册目录结构一致。比如我一个图片路径为 /gallery/2017/XXX.jpg,缩略图结构应为/gallery-tiny/2017/XXX.jpg。</p>
<p>在相册列表界面应使用缩略图而不是使用原图。上面代码中 <code>a标签</code>里的地址是大图地址，点击弹出的时候才会加载，<code>img</code>标签里的地址是缩略图地址。</p>
<p>缩略图大小我调整为600px宽度，这样每个图片体积可减少到100KB以下。这样一个100张图片的相册，缩略图也不超过10MB。缩略图我使用 <code>Light Image Resizer</code> 软件批量生成。</p>
<p>上面对应的代码需要改为:</p>
<pre class="line-numbers language-js"><code class="language-js">
 imageStr <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"&lt;a href=\"http://imgs.liyangzone.com/"</span> <span class="token operator">+</span> photo <span class="token operator">+</span> <span class="token string">"\""</span> <span class="token operator">+</span>
            <span class="token string">"     class=\"photo-item\" rel=\"example_group\""</span> <span class="token operator">+</span>
            <span class="token string">"     data-fancybox=\"images\">"</span> <span class="token operator">+</span>
            <span class="token string">"      &lt;img src=\"http://imgs.liyangzone.com/gallery-tiny/"</span> <span class="token operator">+</span> photo <span class="token operator">+</span> <span class="token string">"\""</span> <span class="token operator">+</span>
            <span class="token string">"       alt="</span> <span class="token operator">+</span> photo <span class="token operator">+</span> <span class="token string">">"</span> <span class="token operator">+</span>
            <span class="token string">"    &lt;/a>"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>二是使用七牛自带的<code>图片样式</code>功能，该功能提供简单快捷的图片格式转换、缩略、剪裁功能。只需要填写几个参数，即可对图片进行缩略操作，生成各种缩略图。比如我建立了一个名为 <code>w33</code> 的图片样式，该样式的功能就是生成原图33%大小的缩略图。假如一个100×100的图片，在图片地址后面加上这个样式后就变成33×33大小的了。对应代码需改为：</p>
<pre class="line-numbers language-js"><code class="language-js">
 imageStr <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"&lt;a href=\"http://imgs.liyangzone.com/"</span> <span class="token operator">+</span> photo <span class="token operator">+</span> <span class="token string">"!w95\""</span> <span class="token operator">+</span>
            <span class="token string">"     class=\"photo-item\" rel=\"example_group\""</span> <span class="token operator">+</span>
            <span class="token string">"     data-fancybox=\"images\">"</span> <span class="token operator">+</span>
            <span class="token string">"      &lt;img src=\"http://imgs.liyangzone.com/"</span> <span class="token operator">+</span> photo <span class="token operator">+</span> <span class="token string">"!w33\""</span> <span class="token operator">+</span>
            <span class="token string">"       alt="</span> <span class="token operator">+</span> photo <span class="token operator">+</span> <span class="token string">">"</span> <span class="token operator">+</span>
            <span class="token string">"    &lt;/a>"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>列表页使用33%大小的样式，查看大图使用95%大小的。上面的叹号是样式分隔符，七牛默认的分隔符有四个:</p>
<pre class="line-numbers language-html"><code class="language-html">- _ ! /
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>也可以改成下面的：</p>
<pre class="line-numbers language-html"><code class="language-html">~ ` @ $ ^ &amp; * ( ) + = <span class="token entity" title="&#123;">&amp;#123;</span> <span class="token entity" title="&#125;">&amp;#125;</span> [ ] | : ; " ' &lt; >
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>生成的图片地址是这样的,你可以复制到地址栏查看效果：</p>
<pre class="line-numbers language-html"><code class="language-html">http://imgs.liyangzone.com/2017/IMG_20170508_163002.jpg!w33
http://imgs.liyangzone.com/2017/IMG_20170508_163002.jpg!w75
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>另外建议开启七牛的原图保护功能并配置Referer防盗链，防止被恶意刷流量。</p>
<p>我目前使用的是第一种方案，只是把缩略图放到腾讯CDN了，不想麻烦的可以使用第二种。</p>
<p>博客源码已上传至github: <a href="https://github.com/liyang5945/liyang5945.github.io">点击前往</a>,觉得不错的可以给个STAR支持一下。</p>
]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>教程</tag>
        <tag>相册</tag>
      </tags>
  </entry>
  <entry>
    <title>vite vue3 ts初体验</title>
    <url>/posts/undefined.html</url>
    <content><![CDATA[<h1 id="体验vite-vue3-ts搭建项目的全过程！"><a href="#体验vite-vue3-ts搭建项目的全过程！" class="headerlink" title="体验vite + vue3 + ts搭建项目的全过程！"></a>体验vite + vue3 + ts搭建项目的全过程！</h1><h2 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1.环境准备"></a>1.环境准备</h2><pre class="line-numbers language-bash"><code class="language-bash">Node.js版本 <span class="token operator">>=</span> 12
<span class="token comment" spellcheck="true"># 查看Node版本：</span>
node -v
复制代码
建议将Node.js升级到最新的稳定版本
<span class="token comment" spellcheck="true"># 使用 nvm 安装最新稳定版 Node.js</span>
nvm <span class="token function">install</span> stable
复制代码
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/8bc394e6736a42f0849f6ccfed4ad1b2~tplv-k3u1fbpfcp-watermark.awebp" alt="截屏2021-06-12 下午12.29.41.png"> </p>
<p>关于 nvm 的使用请查阅 <a href="https://juejin.cn/post/6935008264413413413">链接</a></p>
<h3 id="使用-Vite-快速搭建"><a href="#使用-Vite-快速搭建" class="headerlink" title="使用 Vite 快速搭建"></a>使用 Vite 快速搭建</h3><ul>
<li><p>使用 Npm</p>
<p><code>npm init @vitejs/app</code></p>
</li>
<li><p>Yarn</p>
<p><code>yarn create @vitejs/app</code></p>
</li>
</ul>
<p>按照提示完成如下步骤</p>
<ol>
<li><p>输入项目名称</p>
<p><img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/c2fcc23335f343e4aed97df30af64297~tplv-k3u1fbpfcp-watermark.awebp" alt="截屏2021-06-12 下午12.34.01.png"></p>
</li>
<li><p>选择 Framework + 模板</p>
<p><img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/929e3d20753e48798913cbbe0ebcfb58~tplv-k3u1fbpfcp-watermark.awebp" alt="截屏2021-06-12 下午12.40.24.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/c3bab2e77e04481a86658eda07d328ec~tplv-k3u1fbpfcp-watermark.awebp" alt="截屏2021-06-12 下午12.41.39.png"></p>
</li>
</ol>
<p>或者可以用命令行直接操作</p>
<pre class="line-numbers language-js"><code class="language-js"># npm <span class="token number">6</span><span class="token punctuation">.</span>x
npm init @vitejs<span class="token operator">/</span>app vite<span class="token operator">-</span>vue3 <span class="token operator">--</span>template vue<span class="token operator">-</span>ts

# npm <span class="token number">7</span><span class="token operator">+</span> <span class="token punctuation">(</span>需要额外的双横线<span class="token punctuation">)</span>
npm init @vitejs<span class="token operator">/</span>app vite<span class="token operator">-</span>vue3 <span class="token operator">--</span> <span class="token operator">--</span>template vue<span class="token operator">-</span>ts

# yarn
yarn create @vitejs<span class="token operator">/</span>app vite<span class="token operator">-</span>vue3 <span class="token operator">--</span>template vue<span class="token operator">-</span>ts
复制代码
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="3">
<li>安装依赖</li>
</ol>
<p><code>npm install</code></p>
<ol start="4">
<li>启动项目</li>
</ol>
<p><code>npm run dev</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/77f9a603a058432cbc526ad4b65ac13f~tplv-k3u1fbpfcp-watermark.awebp" alt="截屏2021-06-12 下午1.17.43.png"></p>
<p>如果想要打印出 <code>IP + port</code> ，use <code>--host</code></p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token string">"scripts"</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token string">"dev"</span><span class="token punctuation">:</span> <span class="token string">"vite --host"</span><span class="token punctuation">,</span>
    <span class="token operator">...</span>
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
复制代码
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>接下来集成 Vue Router、Vuex、Axios、Stylus/Sass/Less</p>
<h3 id="修改-Vite-配置文件"><a href="#修改-Vite-配置文件" class="headerlink" title="修改 Vite 配置文件"></a>修改 Vite 配置文件</h3><p><img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/69ec88bcbad943cb87511dc9d58e82b4~tplv-k3u1fbpfcp-watermark.awebp" alt="截屏2021-06-12 下午1.14.58.png"> </p>
<p>Vite配置文件 <code>vite.config.ts</code> 位于项目的根路径，项目的全局配置文件，启动时会自动读取该文件。 本次咱们就配置 <code>@</code> 指向 <code>src</code> 目录、服务端口、打包路径、代理等。 如果要了解更多关于vite的配置请查阅 <a href="https://link.juejin.cn/?target=https://vitejs.dev/config/">官网</a></p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> defineConfig <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">'vite'</span>
<span class="token keyword">import</span> vue <span class="token keyword">from</span> <span class="token string">'@vitejs/plugin-vue'</span>
<span class="token keyword">import</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> resolve <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">'path'</span>
<span class="token comment" spellcheck="true">// https://vitejs.dev/config/</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token function">vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  resolve<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    alias<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
      <span class="token string">'@'</span><span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'./src'</span><span class="token punctuation">)</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
  base<span class="token punctuation">:</span> <span class="token string">'./'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 打包路径</span>
  server<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    port<span class="token punctuation">:</span> <span class="token number">4000</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 服务端口号</span>
    open<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 服务启动时是否自动打开浏览器</span>
    cors<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">// 允许跨域</span>
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
复制代码
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="集成路由"><a href="#集成路由" class="headerlink" title="集成路由"></a>集成路由</h3><ol>
<li><p>安装支持vue3的路由（<code>vue-router@4</code>）</p>
<p><code>npm i vue-router@4</code></p>
</li>
<li><p>创建 <code>src/router/index.ts</code> 文件</p>
</li>
</ol>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> createRouter<span class="token punctuation">,</span> createWebHashHistory<span class="token punctuation">,</span> RouteRecordRaw <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">'vue-router'</span>

<span class="token keyword">const</span> routes<span class="token punctuation">:</span> Array<span class="token operator">&lt;</span>RouteRecordRaw<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    path<span class="token punctuation">:</span> <span class="token string">'/home'</span><span class="token punctuation">,</span>
    name<span class="token punctuation">:</span> <span class="token string">'Home'</span><span class="token punctuation">,</span>
    component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment" spellcheck="true">/* webpackChunkName: "Home" */</span> <span class="token string">'@/views/home.vue'</span><span class="token punctuation">)</span>
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span> redirect<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> name<span class="token punctuation">:</span> <span class="token string">'Home'</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token punctuation">]</span>

<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
  history<span class="token punctuation">:</span> <span class="token function">createWebHashHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  routes
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> router
复制代码
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol>
<li>main.ts 文件中挂载</li>
</ol>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> createApp <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>
<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'@/App.vue'</span>

<span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">'@/router/index'</span>

<span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span>
复制代码
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="集成Vuex"><a href="#集成Vuex" class="headerlink" title="集成Vuex"></a>集成Vuex</h3><ol>
<li><p>安装支持Vue3的状态管理工具 <code>vuex@next</code></p>
<p><code>npm i vuex@next</code></p>
</li>
<li><p>创建 <code>src/store/index.ts</code> 文件</p>
</li>
</ol>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> createStore <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span>

<span class="token keyword">const</span> defaultState <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
  count<span class="token punctuation">:</span> <span class="token number">0</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// Create a new store instance.</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">createStore</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
  <span class="token function">state</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> defaultState
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
  mutations<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token function">increment</span><span class="token punctuation">(</span>state<span class="token punctuation">:</span> <span class="token keyword">typeof</span> defaultState<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
      state<span class="token punctuation">.</span>count <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
  actions<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token function">increment</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
      context<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'increment'</span><span class="token punctuation">)</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
  getters<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token function">double</span><span class="token punctuation">(</span>state<span class="token punctuation">:</span> <span class="token keyword">typeof</span> defaultState<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token number">2</span> <span class="token operator">*</span> state<span class="token punctuation">.</span>count
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
复制代码
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol>
<li>main.ts 文件挂载</li>
</ol>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> createApp <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>
<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'@/App.vue'</span>

<span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">'@/router/index'</span>
<span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'@/store/index'</span>

<span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span>
复制代码
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="集成HTTP工具-Axios"><a href="#集成HTTP工具-Axios" class="headerlink" title="集成HTTP工具 Axios"></a>集成HTTP工具 Axios</h3><ol>
<li><p>安装 <code>Axios</code> (跟vue版本无关，安装最新即可)</p>
<p><code>npm i axios</code></p>
</li>
<li><p>配置 <code>Axios</code></p>
</li>
</ol>
<pre class="line-numbers language-javascript"><code class="language-javascript">根据常规规范，axios封装的方法放在 src<span class="token operator">/</span>utils<span class="token operator">/</span>http<span class="token punctuation">.</span>ts
<span class="token comment" spellcheck="true">/*
 * @Descripttion:
 * @version:
 * @Author: zoucw (326359613@qq.com)
 * @Date: 2021-03-29 16:59:24
 * @LastEditors: Please set LastEditors
 * @LastEditTime: 2021-05-28 17:56:07
 */</span>
<span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span>
<span class="token keyword">import</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> Message <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">'element-plus'</span>
<span class="token comment" spellcheck="true">// 创建axios实例</span>
<span class="token comment" spellcheck="true">// 创建请求时可以用的配置选项</span>

<span class="token keyword">const</span> instance <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
  withCredentials<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  timeout<span class="token punctuation">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>
  baseURL<span class="token punctuation">:</span> <span class="token string">''</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">// axios的全局配置</span>
instance<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>post <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
  <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'application/x-www-form-urlencoded'</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
instance<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>common <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
  <span class="token string">'Auth-Type'</span><span class="token punctuation">:</span> <span class="token string">'company-web'</span><span class="token punctuation">,</span>
  <span class="token string">'X-Requested-With'</span><span class="token punctuation">:</span> <span class="token string">'XMLHttpRequest'</span><span class="token punctuation">,</span>
  token<span class="token punctuation">:</span> <span class="token string">'sdfjlsdfjlsdjflsjflsfjlskd'</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 添加请求拦截器(post只能接受字符串类型数据)</span>
instance<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>
  <span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> config
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token punctuation">)</span>

<span class="token keyword">const</span> errorHandle <span class="token operator">=</span> <span class="token punctuation">(</span>status<span class="token punctuation">,</span> other<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token number">400</span><span class="token punctuation">:</span>
      Message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'信息校验失败'</span><span class="token punctuation">)</span>
      <span class="token keyword">break</span>
    <span class="token keyword">case</span> <span class="token number">401</span><span class="token punctuation">:</span>
      Message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'认证失败'</span><span class="token punctuation">)</span>
      <span class="token keyword">break</span>
    <span class="token keyword">case</span> <span class="token number">403</span><span class="token punctuation">:</span>
      Message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'token校验失败'</span><span class="token punctuation">)</span>
      <span class="token keyword">break</span>
    <span class="token keyword">case</span> <span class="token number">404</span><span class="token punctuation">:</span>
      Message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'请求的资源不存在'</span><span class="token punctuation">)</span>
      <span class="token keyword">break</span>
    <span class="token keyword">default</span><span class="token punctuation">:</span>
      Message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>other<span class="token punctuation">)</span>
      <span class="token keyword">break</span>
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 添加响应拦截器</span>
instance<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>
  <span class="token comment" spellcheck="true">// 响应包含以下信息data,status,statusText,headers,config</span>
  <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span> <span class="token operator">?</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">:</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    Message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    <span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> response <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> err
    <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
      <span class="token function">errorHandle</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>status<span class="token punctuation">,</span> response<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
      <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    Message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'请求失败'</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span>
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> instance
复制代码
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol>
<li>使用 <code>Axios</code></li>
</ol>
<p>在需要使用的地方引入<code>http.ts</code>文件</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> Http <span class="token keyword">from</span> <span class="token string">'@/utils/http'</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> getData <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
      Http<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">:</span> Object<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
      store<span class="token punctuation">,</span>
      getData
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
复制代码
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="集成CSS预编译器"><a href="#集成CSS预编译器" class="headerlink" title="集成CSS预编译器"></a>集成CSS预编译器</h3><p>本项目以sass为例，相关的loader Vite 已经集成好了，无需额外配置</p>
<ol>
<li><p>安装</p>
<p><code>npm i sass -D</code></p>
<p>安装其他的亦可</p>
</li>
</ol>
<p>2.使用</p>
<pre class="line-numbers language-css"><code class="language-css">&lt;style lang=<span class="token string">"scss"</span>>&lt;/style>
复制代码
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h3><p>随着前端发展愈发的规范后，项目的规模也会越来越庞大，涉及到的开发人员也越来越多，一个项目多人协作的场景也越来越多，代码的规范就是一个大问题了，光靠口头的强调远远不够，需要有一套规范来约束，节省人工成本，效率还高。</p>
<p>下面我们介绍一套规范组合以及相关的配置（<code>EditorConfig + Prettier + ESlint</code>）</p>
<ul>
<li>解决团队之间代码不规范导致的可读性差、可维护性差的问题</li>
<li>解决团队成员使用不同编辑器导致代码规范不统一的问题</li>
<li>提前发下代码风格问题，给出相应提示，及时修复</li>
<li>减少代码审查过程中反反复复的修改，节约时间</li>
<li>自动格式化，统一代码风格</li>
</ul>
<h5 id="集成-EditorConfig-配置"><a href="#集成-EditorConfig-配置" class="headerlink" title="集成 EditorConfig 配置"></a>集成 EditorConfig 配置</h5><p>EditorConfig 有助于为不同 IDE 编辑器上处理同一项目的多个开发人员维护一致的代码风格。</p>
<p>官网：<a href="https://link.juejin.cn/?target=http://editorconfig.org">editorconfig.org</a></p>
<p>在项目的根目录下创建 <code>.editorconfig</code> 文件：</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"># Editor configuration<span class="token punctuation">,</span> see http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>editorconfig<span class="token punctuation">.</span>org

# 表示是最顶层的 EditorConfig 配置文件
root <span class="token operator">=</span> <span class="token boolean">true</span>

<span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> # 表示所有文件适用
charset <span class="token operator">=</span> utf<span class="token number">-8</span> # 设置文件字符集为 utf<span class="token number">-8</span>
indent_style <span class="token operator">=</span> space # 缩进风格（tab <span class="token operator">|</span> space）
indent_size <span class="token operator">=</span> <span class="token number">2</span> # 缩进大小
end_of_line <span class="token operator">=</span> lf # <span class="token function">控制换行类型</span><span class="token punctuation">(</span>lf <span class="token operator">|</span> cr <span class="token operator">|</span> crlf<span class="token punctuation">)</span>
trim_trailing_whitespace <span class="token operator">=</span> <span class="token boolean">true</span> # 去除行首的任意空白字符
insert_final_newline <span class="token operator">=</span> <span class="token boolean">true</span> # 始终在文件末尾插入一个新行

<span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">.</span>md<span class="token punctuation">]</span> # 表示仅 md 文件适用以下规则
max_line_length <span class="token operator">=</span> off
trim_trailing_whitespace <span class="token operator">=</span> <span class="token boolean">false</span>
复制代码
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>注意：</p>
<ul>
<li>VSCode 使用 EditorConfig 需要去插件市场下载插件 <code>EditorConfig VS Code</code></li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/202110112244408.webp" alt="截屏2021-06-13 下午9.25.52.png"></p>
<ul>
<li>JetBrains 系列 （WebStorm、IntelliJ IDEA）则不用额外安装插件，可直接使用 EditorConfig 配置。</li>
</ul>
<h5 id="集成-Prettier-配置"><a href="#集成-Prettier-配置" class="headerlink" title="集成 Prettier 配置"></a>集成 Prettier 配置</h5><p>Prettier 是一款强大的代码格式化工具，支持JavaScript、Typescript、Css、Scss、Less、JSX、Angular、Vue、GraphQL、JSON、Markdown等，基本上前端能用到的文件格式都可以搞定，是当下最流行的格式化工具。</p>
<p>官网：<a href="https://link.juejin.cn/?target=https://prettier.io/">prettier.io/</a></p>
<ol>
<li><p>安装Prettier</p>
<p><code>npm i prettier -D</code></p>
</li>
<li><p>创建 Prettier 配置文件</p>
<p>Prettier 支持多种格式的配置文件，比如 .json、.yml、yaml、.js等。 在根目录下创建 .prettierrc 文件</p>
</li>
<li><p>配置 <code>.prettierrc</code></p>
</li>
</ol>
<p>在本项目中，我们进行如下简单配置，关于更多的配置项信息，<a href="https://link.juejin.cn/?target=https://prettier.io/docs/en/configuration.html">查阅官网</a></p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
  <span class="token string">"useTabs"</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token string">"tabWidth"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token string">"printWidth"</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>
  <span class="token string">"singleQuote"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token string">"trailingComma"</span><span class="token punctuation">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>
  <span class="token string">"bracketSpacing"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token string">"semi"</span><span class="token punctuation">:</span> <span class="token boolean">false</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
复制代码
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol>
<li>Prettier安装配置好之后，就能使用命令来格式化代码</li>
</ol>
<pre class="line-numbers language-js"><code class="language-js"># 格式化所有文件 （<span class="token punctuation">.</span> 表示所有文件）
npx prettier <span class="token operator">--</span>write <span class="token punctuation">.</span>
复制代码
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>注意：</p>
<ul>
<li>VSCode 编辑器使用 Prettier 配置需要下载插件 Prettier - Code formatter</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/787f5e0cba7545dba73f5e3966e67c1c~tplv-k3u1fbpfcp-watermark.awebp" alt="截屏2021-06-13 下午9.43.35.png"></p>
<ul>
<li>JetBrains 系列 （WebStorm、IntelliJ IDEA）则不用额外安装插件，可直接使用 EditorConfig 配置。</li>
</ul>
<p>Prettier 配置好以后，在使用 VSCode 或 WebStorm 等编辑器的格式化功能时，编辑器就会按照 Prettier 配置文件的规则来进行格式化，避免了因为大家编辑器配置不一样而导致格式化后的代码风格不统一的问题。</p>
<h5 id="集成-ESlint-配置"><a href="#集成-ESlint-配置" class="headerlink" title="集成 ESlint 配置"></a>集成 ESlint 配置</h5><p>ESLint 是一款用于查找并报告代码中问题的工具，并且支持部分问题自动修复。其核心是通过对代码解析得到的 AST（Abstract Syntax Tree 抽象语法树）进行模式匹配，来分析代码达到检查代码质量和风格问题的能力。</p>
<p>正如前面我们提到的因团队成员之间编程能力和编码习惯不同所造成的代码质量问题，我们使用 ESLint 来解决，一边写代码一边查找问题，如果发现错误，就给出规则提示，并且自动修复，长期下去，可以促使团队成员往同一种编码风格靠拢。</p>
<ol>
<li><p>安装 ESLint</p>
<p>可以全局或者本地安装，作者推荐本地安装（只在当前项目中安装）。</p>
<p><code>npm i eslint -D</code></p>
</li>
<li><p>配置ESLint</p>
<p>ESLint 安装成功后，执行 npx eslint –init，然后按照终端操作提示完成一系列设置来创建配置文件。</p>
<table>
<thead>
<tr>
<th>插件</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://link.juejin.cn/?target=https://github.com/aribnb/javascript"><code>Airbnb JavaScript Style Guide</code></a></td>
</tr>
<tr>
<td><a href="https://link.juejin.cn/?target=https://github.com/standard/standard"><code>JavaScript Standard Style</code></a></td>
</tr>
<tr>
<td><a href="https://link.juejin.cn/?target=https://goole.github.io/styleguide/jsguide.html"><code>Google JavaScript Style Guide</code></a></td>
</tr>
</tbody></table>
</li>
</ol>
<p>操作：</p>
<ul>
<li>How would you like to use ESLint? （你想如何使用 ESLint?）</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/202110112245870.webp" alt="image.png"> 我们这里选择 To check syntax, find problems, and enforce code style（检查语法、发现问题并强制执行代码风格）</p>
<ul>
<li>What type of modules does your project use?（你的项目使用哪种类型的模块?）</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/a2f0df2b028542109f515ec042eb73e0~tplv-k3u1fbpfcp-watermark.awebp" alt="image.png"></p>
<p>我们这里选择 JavaScript modules (import/export)</p>
<ul>
<li>Which framework does your project use? （你的项目使用哪种框架?）</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/202110112245920.webp" alt="image.png"></p>
<p>我们这里选择 Vue.js</p>
<ul>
<li>Does your project use TypeScript?（你的项目是否使用 TypeScript？）</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/230f6abc1a714e448b3683c10e0e7584~tplv-k3u1fbpfcp-watermark.awebp" alt="image.png"></p>
<p>我们这里选择 Yes</p>
<ul>
<li>Where does your code run?（你的代码在哪里运行?）</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/071336e0e2bc4f969cf2cb772c5a4a1d~tplv-k3u1fbpfcp-watermark.awebp" alt="image.png"> 我们这里选择 Browser 和 Node（按空格键进行选择，选完按回车键确定）</p>
<ul>
<li>How would you like to define a style for your project?（你想怎样为你的项目定义风格？）</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/956094a6495e45608afd0cd985e906b2~tplv-k3u1fbpfcp-watermark.awebp" alt="image.png"></p>
<p>我们这里选择 Use a popular style guide（使用一种流行的风格指南）</p>
<ul>
<li>Which style guide do you want to follow?（你想遵循哪一种风格指南?）</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/90bfc373359048788e15243f939b3494~tplv-k3u1fbpfcp-watermark.awebp" alt="image.png"></p>
<p>我们这里选择 Airbnb: <a href="https://link.juejin.cn/?target=https://github.com/airbnb/javascript">github.com/airbnb/java…</a></p>
<p>ESLint 为我们列出了三种社区流行的 JavaScript 风格指南，分别是 Airbnb、Standard、Google。</p>
<p>这三份风格指南都是由众多大佬根据多年开发经验编写，足够优秀，全球很多大小公司都在使用。我们选用 GitHub 上 star 最多的 Airbnb，免去繁琐的配置 ESLint 规则时间，然后让团队成员去学习 Airbnb JavaScript 风格指南即可。</p>
<p>此时，我们在 ESLint 配置了 Airbnb JavaScript 规则，在编码时，所有不符合 Airbnb 风格的代码，编辑器都会给出提示，并且可以自动修复。</p>
<p>这里作者不建议大家去自由配置 ESLint 规则，相信我，这三份 JavaScript 代码风格指南值得我们反复学习，掌握后，编程能力能上一大台阶。</p>
<ul>
<li>这里作者不建议大家去自由配置 ESLint 规则，相信我，这三份 JavaScript 代码风格指南值得我们反复学习，掌握后，编程能力能上一大台阶。</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/202110112247462.webp" alt="image.png"> 我们这里选择 JavaScript</p>
<ul>
<li>Would you like to install them now with npm?（你想现在就用 NPM 安装它们吗?）</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/c119ab3e5653425c9a59e075c4d56d94~tplv-k3u1fbpfcp-watermark.awebp" alt="image.png"></p>
<p>根据上面的选择，ESLint 会自动去查找缺失的依赖，我们这里选择 Yes，使用 NPM 下载安装这些依赖包。</p>
<p>注意：如果自动安装依赖失败，那么需要手动安装</p>
<pre class="line-numbers language-js"><code class="language-js">npm i @typescript<span class="token operator">-</span>eslint<span class="token operator">/</span>eslint<span class="token operator">-</span>plugin @typescript<span class="token operator">-</span>eslint<span class="token operator">/</span>parser eslint<span class="token operator">-</span>config<span class="token operator">-</span>airbnb<span class="token operator">-</span>base eslint<span class="token operator">-</span>plugin<span class="token operator">-</span><span class="token keyword">import</span> eslint<span class="token operator">-</span>plugin<span class="token operator">-</span>vue <span class="token operator">-</span>D
复制代码
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ol>
<li>ESlint 配置文件 <code>.eslintrc.js</code></li>
</ol>
<p>在上一步操作完成后，会在项目根目录下自动生成 .eslintrc.js 配置文件：</p>
<pre class="line-numbers language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
  env<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    browser<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    es2021<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    node<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
  <span class="token keyword">extends</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"plugin:vue/essential"</span><span class="token punctuation">,</span> <span class="token string">"airbnb-base"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  parserOptions<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    ecmaVersion<span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span>
    parser<span class="token punctuation">:</span> <span class="token string">"@typescript-eslint/parser"</span><span class="token punctuation">,</span>
    sourceType<span class="token punctuation">:</span> <span class="token string">"module"</span><span class="token punctuation">,</span>
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"vue"</span><span class="token punctuation">,</span> <span class="token string">"@typescript-eslint"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  rules<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
复制代码
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>根据项目实际情况，如果我们有额外的 ESLint 规则，也在此文件中追加。</p>
<p>注意：</p>
<ul>
<li>VSCode 使用 ESLint 配置文件需要去插件市场下载插件 ESLint 。</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/6e5599e3862d4a7e91df8e2bca2c6eb5~tplv-k3u1fbpfcp-watermark.awebp" alt="image.png"></p>
<ul>
<li>JetBrains 系列（WebStorm、IntelliJ IDEA 等）则不用额外安装插件。</li>
</ul>
<p>配置好以后，我们在 VSCode 或 WebStorm 等编辑器中开启 ESLin，写代码时，ESLint 就会按照我们配置的规则来进行实时代码检查，发现问题会给出对应错误提示和修复方案。</p>
<p>如图：</p>
<ul>
<li>VScode</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/202110112247713.webp" alt="image.png"></p>
<ul>
<li>WebStorm</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/dab0eac95a9a451b8431ed15b6ff369e~tplv-k3u1fbpfcp-watermark.awebp" alt="image.png"></p>
<p>虽然，现在编辑器已经给出错误提示和修复方案，但需要我们一个一个去点击修复，还是挺麻烦的。很简单，我们只需设置编辑器保存文件时自动执行 eslint –fix 命令进行代码风格修复。</p>
<ul>
<li>VSCode 在 settings.json 设置文件中，增加以下代码：</li>
</ul>
<pre class="line-numbers language-js"><code class="language-js"><span class="token string">"editor.codeActionsOnSave"</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token string">"source.fixAll.eslint"</span><span class="token punctuation">:</span> <span class="token boolean">true</span>
 <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
复制代码
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>WebStorm 打开设置窗口，按如下操作，最后点击 Apply -&gt; OK。</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/202110112247833.webp" alt="image.png"></p>
<h5 id="解决-Prettier-和-ESLint-的冲突"><a href="#解决-Prettier-和-ESLint-的冲突" class="headerlink" title="解决 Prettier 和 ESLint 的冲突"></a>解决 Prettier 和 ESLint 的冲突</h5><p>通常大家会在项目中根据实际情况添加一些额外的 ESLint 和 Prettier 配置规则，难免会存在规则冲突情况。</p>
<p>本项目中的 ESLint 配置中使用了 Airbnb JavaScript 风格指南校验，其规则之一是代码结束后面要加分号，而我们在 Prettier 配置文件中加了代码结束后面不加分号的配置项，这样就有冲突了，会出现用 Prettier 格式化后的代码，ESLint 检测到格式有问题的，从而抛出错误提示。 解决两者冲突问题，需要用到 eslint-plugin-prettier 和 eslint-config-prettier。</p>
<ul>
<li><code>eslint-plugin-prettier</code> 将 Prettier 的规则设置到 ESLint 的规则中。</li>
<li><code>eslint-config-prettier</code> 关闭 ESLint 中与 Prettier 中会发生冲突的规则。</li>
</ul>
<p>最后形成优先级：Prettier 配置规则 &gt; ESLint 配置规则。</p>
<ul>
<li>安装插件</li>
</ul>
<pre class="line-numbers language-js"><code class="language-js">npm i eslint<span class="token operator">-</span>plugin<span class="token operator">-</span>prettier eslint<span class="token operator">-</span>config<span class="token operator">-</span>prettier <span class="token operator">-</span>D
复制代码
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ul>
<li>在 .eslintrc.js 添加 prettier 插件</li>
</ul>
<pre class="line-numbers language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
  <span class="token operator">...</span>
  <span class="token keyword">extends</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>
    <span class="token string">'plugin:vue/essential'</span><span class="token punctuation">,</span>
    <span class="token string">'airbnb-base'</span><span class="token punctuation">,</span>
    <span class="token string">'plugin:prettier/recommended'</span> <span class="token comment" spellcheck="true">// 添加 prettier 插件</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token operator">...</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
复制代码
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这样，我们在执行 eslint –fix 命令时，ESLint 就会按照 Prettier 的配置规则来格式化代码，轻松解决二者冲突问题。</p>
<h3 id="集成-husky-和-lint-staged"><a href="#集成-husky-和-lint-staged" class="headerlink" title="集成 husky 和 lint-staged"></a>集成 husky 和 lint-staged</h3><p>我们在项目中已集成 ESLint 和 Prettier，在编码时，这些工具可以对我们写的代码进行实时校验，在一定程度上能有效规范我们写的代码，但团队可能会有些人觉得这些条条框框的限制很麻烦，选择视“提示”而不见，依旧按自己的一套风格来写代码，或者干脆禁用掉这些工具，开发完成就直接把代码提交到了仓库，日积月累，ESLint 也就形同虚设。</p>
<p>所以，我们还需要做一些限制，让没通过 ESLint 检测和修复的代码禁止提交，从而保证仓库代码都是符合规范的。</p>
<p>为了解决这个问题，我们需要用到 Git Hook，在本地执行 git commit 的时候，就对所提交的代码进行 ESLint 检测和修复（即执行 eslint –fix），如果这些代码没通过 ESLint 规则校验，则禁止提交。</p>
<p>实现这一功能，我们借助 <code>husky + lint-staged</code> 。</p>
<blockquote>
<p>husky —— Git Hook 工具，可以设置在 git 各个阶段（pre-commit、commit-msg、pre-push 等）触发我们的命令。</p>
</blockquote>
<blockquote>
<p>lint-staged —— 在 git 暂存的文件上运行 linters。</p>
</blockquote>
<h5 id="配置-husky"><a href="#配置-husky" class="headerlink" title="配置 husky"></a>配置 husky</h5><ul>
<li>自动配置（推荐）</li>
</ul>
<p>使用 husky-init 命令快速在项目初始化一个 husky 配置。</p>
<pre class="line-numbers language-bash"><code class="language-bash">npx husky-init <span class="token operator">&amp;&amp;</span> <span class="token function">npm</span> <span class="token function">install</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这行命令做了四件事：</p>
<ol>
<li>安装 <code>husky</code> 到开发依赖</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/81a00d5a9a3a4fcc81f9f2ed4b49ad81~tplv-k3u1fbpfcp-watermark.awebp" alt="image.png"> </p>
<ol start="2">
<li>在项目根目录下创建 <code>.husky</code> 目录</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/202110112248730.webp" alt="image.png"> 3. 在 <code>.husky</code> 目录创建 <code>pre-commit hook</code>，并初始化 <code>pre-commit</code> 命令为 <code>npm test</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/74b4aa8d553c4cfd85c15a5f3eac5be3~tplv-k3u1fbpfcp-watermark.awebp" alt="image.png"> 4. 修改 <code>package.json</code> 的 scripts，增加 <code>&quot;prepare&quot;: &quot;husky install&quot;</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/8b5ccf022ef04ac88c911647fe51426f~tplv-k3u1fbpfcp-watermark.awebp" alt="image.png"> 到这里，husky 配置完毕，现在我们来使用它：</p>
<p><code>husky</code> 包含很多 hook（钩子），常用有：<code>pre-commit、commit-msg、pre-push</code>。这里，我们使用 <code>pre-commit</code> 来触发 ESLint 命令。</p>
<p>修改 <code>.husky/pre-commit</code> hook 文件的触发命令：</p>
<pre class="line-numbers language-js"><code class="language-js">eslint <span class="token operator">--</span>fix <span class="token punctuation">.</span><span class="token operator">/</span>src <span class="token operator">--</span>ext <span class="token punctuation">.</span>vue<span class="token punctuation">,</span><span class="token punctuation">.</span>js<span class="token punctuation">,</span><span class="token punctuation">.</span>ts
复制代码
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p><img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/b6d6a41cde2646abb789b4c4e5973626~tplv-k3u1fbpfcp-watermark.awebp" alt="image.png"></p>
<p>上面这个 <code>pre-commit</code> hook 文件的作用是：当我们执行 <code>git commit -m &quot;xxx&quot;</code> 时，会先对 <code>src</code> 目录下所有的 <code>.vue、.js、.ts</code> 文件执行 <code>eslint --fix</code> 命令，如果 <code>ESLint</code> 通过，成功 <code>commit</code>，否则终止 <code>commit</code>。</p>
<p>但是又存在一个问题：有时候我们明明只改动了一两个文件，却要对所有的文件执行 <code>eslint --fix</code>。假如这是一个历史项目，我们在中途配置了 ESLint 规则，那么在提交代码时，也会对其他未修改的“历史”文件都进行检查，可能会造成大量文件出现 ESLint 错误，显然不是我们想要的结果。</p>
<p>我们要做到只用 ESLint 修复自己此次写的代码，而不去影响其他的代码。所以我们还需借助一个神奇的工具 lint-staged 。</p>
<h5 id="配置-lint-staged"><a href="#配置-lint-staged" class="headerlink" title="配置 lint-staged"></a>配置 lint-staged</h5><p><code>lint-staged</code> 这个工具一般结合 husky 来使用，它可以让 husky 的 hook 触发的命令只作用于 <code>git add</code> 那些文件（即 git 暂存区的文件），而不会影响到其他文件。</p>
<p>接下来，我们使用 <code>lint-staged</code> 继续优化项目。</p>
<ol>
<li>安装 lint-staged</li>
</ol>
<pre class="line-numbers language-js"><code class="language-js">npm i lint<span class="token operator">-</span>staged <span class="token operator">-</span>D
复制代码
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ol>
<li>在 <code>package.json</code>里增加 <code>lint-staged</code> 配置项</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/202110112248241.webp" alt="image.png"></p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token string">"lint-staged"</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
  <span class="token string">"*.&amp;#123;vue,js,ts&amp;#125;"</span><span class="token punctuation">:</span> <span class="token string">"eslint --fix"</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
复制代码
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>这行命令表示：只对 git 暂存区的 .vue、.js、.ts 文件执行 eslint –fix。</p>
<ol>
<li>修改 <code>.husky/pre-commit</code> hook 的触发命令为：<code>npx lint-staged</code></li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/202110112248115.webp" alt="image.png"> 至此，husky 和 lint-staged 组合配置完成。</p>
<p>现在我们提交代码时就会变成这样：</p>
<p>假如我们修改了 scr 目录下的 <code>test-1.js</code>、<code>test-2.ts</code> 和 <code>test-3.md</code> 文件，然后 <code>git add ./src/</code>，最后 <code>git commit -m &quot;test...&quot;</code>，这时候就会只对 <code>test-1.js、test-2.ts</code> 这两个文件执行 <code>eslint --fix</code>。如果 ESLint 通过，成功提交，否则终止提交。从而保证了我们提交到 Git 仓库的代码都是规范的。</p>
<p><img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/202110112248394.webp" alt="image.png"></p>
<ul>
<li>提交前 <code>test-1.js</code>、<code>test-2.ts</code></li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/202110112249227.webp" alt="image.png"></p>
<ul>
<li>提交后 <code>test-1.js</code>、<code>test-2.ts</code> 自动修复代码格式</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/6c5f354adf684947ad2d631cd06c38e0~tplv-k3u1fbpfcp-watermark.awebp" alt="image.png"></p>
<p>无论写代码还是做其他事情，都应该用长远的眼光来看，刚开始使用 ESint 的时候可能会有很多问题，改起来也很费时费力，只要坚持下去，代码质量和开发效率都会得到提升，前期的付出都是值得的。</p>
<p>这些工具并不是必须的，没有它们你同样可以可以完成功能开发，但是利用好这些工具，你可以写出更高质量的代码。特别是一些刚刚接触的人，可能会觉得麻烦而放弃使用这些工具，失去了一次提升编程能力的好机会。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vite vue3 ts</tag>
      </tags>
  </entry>
  <entry>
    <title>升级vue-cli到@vue/cli-4.5 config.js和webpack配置</title>
    <url>/posts/1316.html</url>
    <content><![CDATA[<h1 id="一、安装，创建项目"><a href="#一、安装，创建项目" class="headerlink" title="一、安装，创建项目"></a>一、安装，创建项目</h1><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h2><p>4.0版本带来的变化有以下几点：</p>
<ul>
<li>采用webpack 4.x构建，提升启动和打包效率；</li>
<li>webpack 4.x 使用的 splitChunks，更好的拆分代码，减小文件体积；</li>
<li>自带的tree-shaking，减少不必要的引入；</li>
<li>拥抱社区，与时俱进</li>
</ul>
<p>按照 vue-cli官方文档 安装</p>
<blockquote>
<p>Vue CLI 的包名称由 vue-cli 改成了 @vue/cli。 如果你已经全局安装了旧版本的 vue-cli (1.x 或 2.x)，你需要先通过 npm uninstall vue-cli -g 或 yarn global remove vue-cli 卸载它。<br>Vue CLI 4.x 需要 Node.js v8.9 或更高版本 (推荐 v10 以上)。你可以使用 n，nvm 或 nvm-windows 在同一台电脑中管理多个 Node 版本。</p>
</blockquote>
<p>可以使用下面的命令进行安装：</p>
<pre class="line-numbers language-bash"><code class="language-bash">  <span class="token function">npm</span> <span class="token function">install</span> -g @vue/cli
  <span class="token comment" spellcheck="true"># OR</span>
  yarn global add @vue/cli
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>安装之后，你就可以在命令行中访问 vue 命令。你可以通过简单运行 vue，看看是否展示出了一份所有可用命令的帮助信息，来验证它是否安装成功。</p>
<p>你还可以用这个命令来检查其版本是否正确(4.x)：</p>
<pre class="line-numbers language-bash"><code class="language-bash">  vue --version
  <span class="token comment" spellcheck="true"># OR</span>
  vue -V
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="2-创建项目"><a href="#2-创建项目" class="headerlink" title="2. 创建项目"></a>2. 创建项目</h2><p>参考 <a href="https://cli.vuejs.org/zh/guide/creating-a-project.html">官方文档</a> 创建一个新项目</p>
<p>运行以下命令进行创建：</p>
<pre class="line-numbers language-bash"><code class="language-bash">  vue create my-project
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这里采用自定义创建，把我们项目需要的都勾选上</p>
<p><img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/202110131205893.png" alt="创建项目"></p>
<h1 id="二、配置eslint"><a href="#二、配置eslint" class="headerlink" title="二、配置eslint"></a>二、配置eslint</h1><p>eslint 是每个项目必不可少的，可以尽早发现在编写过程中出现的错误，统一团队编写规范。如果使用vscode，可以配置插件，保存时按照eslint规则自动格式化</p>
<p>在上一步创建的过程中已经添加了eslint了，接下来就是配置规则，下面是我的一些规则，供参考：</p>
<p>在 <code>.eslintrc.js</code>中配置，</p>
<pre class="line-numbers language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
  root<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  env<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    node<span class="token punctuation">:</span> <span class="token boolean">true</span>
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
  <span class="token keyword">extends</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'plugin:vue/essential'</span><span class="token punctuation">,</span> <span class="token string">'eslint:recommended'</span><span class="token punctuation">,</span> <span class="token string">'plugin:vue/strongly-recommended'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  parserOptions<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    parser<span class="token punctuation">:</span> <span class="token string">'babel-eslint'</span>
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>
    <span class="token string">'vue'</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  rules<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// "no-console": process.env.NODE_ENV === "production" ? "error" : "off",</span>
    <span class="token string">'no-debugger'</span><span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">===</span> <span class="token string">'production'</span> <span class="token operator">?</span> <span class="token string">'error'</span> <span class="token punctuation">:</span> <span class="token string">'off'</span><span class="token punctuation">,</span>

    <span class="token string">'vue/no-side-effects-in-computed-properties'</span><span class="token punctuation">:</span> <span class="token string">'off'</span><span class="token punctuation">,</span>
    <span class="token comment" spellcheck="true">// 要求构造函数首字母大写 （要求调用 new 操作符时有首字母大小的函数，允许调用首字母大写的函数时没有 new 操作符。）</span>
    <span class="token string">'new-cap'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token string">'newIsCap'</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">'capIsNew'</span><span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token comment" spellcheck="true">// 不能有声明后未被使用的变量或参数</span>
    <span class="token string">'no-unused-vars'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token comment" spellcheck="true">// 强制 generator 函数中 * 号周围使用一致的空格</span>
    <span class="token string">'generator-star-spacing'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token string">'before'</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">'after'</span><span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token comment" spellcheck="true">// 允许在开发环境使用debugger</span>
    <span class="token string">'no-debugger'</span><span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">===</span> <span class="token string">'production'</span> <span class="token operator">?</span> <span class="token number">2</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token comment" spellcheck="true">// 允许在开发环境使用console</span>
    <span class="token string">'no-console'</span><span class="token punctuation">:</span> <span class="token string">'off'</span><span class="token punctuation">,</span>
    <span class="token comment" spellcheck="true">// 关闭语句强制分号结尾</span>
    <span class="token string">'semi'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'always'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token comment" spellcheck="true">// 空行最多不能超过100行</span>
    <span class="token comment" spellcheck="true">// "no-multiple-empty-lines": [0, &amp;#123;"max": 100&amp;#125;],</span>
    <span class="token comment" spellcheck="true">// 关闭禁止混用tab和空格</span>
    <span class="token comment" spellcheck="true">// 'no-mixed-spaces-and-tabs': 2,</span>
    <span class="token comment" spellcheck="true">//   "indent": [2, 4], //缩进风格</span>
    <span class="token comment" spellcheck="true">//   "vue/script-indent": [2, 4, &amp;#123;</span>
    <span class="token comment" spellcheck="true">//     baseIndent: 1</span>
    <span class="token comment" spellcheck="true">//   &amp;#125;],</span>
    <span class="token comment" spellcheck="true">// 强制在 function的左括号之前使用一致的空格</span>
    <span class="token string">'space-before-function-paren'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'always'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string">'quotes'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'single'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token comment" spellcheck="true">// 'comma-dangle': [1, 'always-multiline']</span>
    <span class="token string">'import/no-unresolved'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token comment" spellcheck="true">// 'indent': 0,</span>
    <span class="token comment" spellcheck="true">// 禁用不必要的转义字符</span>
    <span class="token string">'no-useless-escape'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
    <span class="token comment" spellcheck="true">// prop 的默认值必须匹配它的类型</span>
    <span class="token string">'vue/require-valid-default-prop'</span><span class="token punctuation">:</span> <span class="token string">'off'</span><span class="token punctuation">,</span>
    <span class="token string">'vue/html-closing-bracket-newline'</span><span class="token punctuation">:</span> <span class="token string">'off'</span><span class="token punctuation">,</span>
    <span class="token string">'vue/no-dupe-keys'</span><span class="token punctuation">:</span> <span class="token string">'off'</span><span class="token punctuation">,</span>
    <span class="token string">'vue/no-template-shadow'</span><span class="token punctuation">:</span> <span class="token string">'off'</span>
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>再添加一个忽略选项，让插件和node_modules中的代码不需要eslint检查</p>
<p>添加 <code>.eslintignore</code> 文件</p>
<pre class="line-numbers language-text"><code class="language-text">/config/
/dist/
/src/plugin/
/node_modules/
/public/
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="三、项目迁移"><a href="#三、项目迁移" class="headerlink" title="三、项目迁移"></a>三、项目迁移</h1><h2 id="1-迁移-package-json"><a href="#1-迁移-package-json" class="headerlink" title="1. 迁移 package.json"></a>1. 迁移 package.json</h2><p>项目创建好之后，接下来就是把原来项目中<code>package.json</code> 中的 <code>dependencies</code> 下的依赖迁移到新项目，这里建议直接拷贝过来，再执行 <code>npm install</code> 下载即可。如果下载最新的版本，可能导致项目中某些功能异常。</p>
<h2 id="2-迁移-static-到-public-目录下"><a href="#2-迁移-static-到-public-目录下" class="headerlink" title="2. 迁移 static 到 public 目录下"></a>2. 迁移 static 到 public 目录下</h2><p>老项目的 static 全部迁移到 public 文件夹中，index.html 迁移到 public</p>
<p>在 vue-cli3以上的版本中，public 文件夹不会被 webpack 处理，并部署在网站根目录。</p>
<p>对于publick的一些说明，参考 <a href="https://cli.vuejs.org/zh/guide/html-and-static-assets.html#public-%E6%96%87%E4%BB%B6%E5%A4%B9">官方文档</a></p>
<h1 id="3-复制老项目的-src-目录替换新项目的-src"><a href="#3-复制老项目的-src-目录替换新项目的-src" class="headerlink" title="3. 复制老项目的 src 目录替换新项目的 src"></a>3. 复制老项目的 <code>src</code> 目录替换新项目的 <code>src</code></h1><p>将老项目的<code>src</code>目录整体迁移过来，这时可能路径暂时还对应不上，接下来就需要配置一些快捷路径</p>
<h1 id="4-创建-vue-config-js-文件"><a href="#4-创建-vue-config-js-文件" class="headerlink" title="4. 创建 vue.config.js 文件"></a>4. 创建 <code>vue.config.js</code> 文件</h1><p>这里面的配置非常多，参考 <a href="https://cli.vuejs.org/zh/config/#vue-config-js">官网</a> 的全部配置项</p>
<p>我们只配置一些项目启动的必须项</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> resolve <span class="token operator">=</span> <span class="token punctuation">(</span>dir<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> dir<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
  publicPath<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 项目基本路径，对应 BASE_URL</span>
  <span class="token comment" spellcheck="true">// lintOnSave: false,</span>
  outputDir<span class="token punctuation">:</span> <span class="token string">'news'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 打包后的文件夹名，默认 dist</span>
  productionSourceMap<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 是否开启sourceMap</span>
  devServer<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 本地启动项</span>
    proxy<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 接口代理</span>
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
  css<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    extract<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    sourceMap<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    requireModuleExtension<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    loaderOptions<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
      sass<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 全局引入sass变量和函数</span>
        prependData<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`
          @import "~@/assets/style/vars.sass"
          @import "~@/assets/style/mixin.sass"
        `</span></span>
      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
      scss<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 全局引入scss变量</span>
        prependData<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`
          @import "~@/assets/style/vars.sass";
          @import "~@/assets/style/mixin.sass";
        `</span></span>
      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
  chainWebpack<span class="token punctuation">:</span> config <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    config
      <span class="token punctuation">.</span>resolve<span class="token punctuation">.</span>alias <span class="token comment" spellcheck="true">// 快捷访问路径</span>
      <span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'@'</span><span class="token punctuation">,</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">,</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'src/http/axios.js'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'@common'</span><span class="token punctuation">,</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'src/common'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'@util'</span><span class="token punctuation">,</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'src/assets/js/util.js'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    config <span class="token comment" spellcheck="true">// 设置url-loader</span>
      <span class="token punctuation">.</span>module
      <span class="token punctuation">.</span><span class="token function">rule</span><span class="token punctuation">(</span><span class="token string">'images'</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'url-loader'</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">loader</span><span class="token punctuation">(</span><span class="token string">'url-loader'</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span>options <span class="token operator">=</span><span class="token operator">></span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> limit<span class="token punctuation">:</span> <span class="token number">1000</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> config<span class="token punctuation">;</span>
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>此时执行 <code>npm run serve</code> 就可以正常启动项目了</p>
<h1 id="四、项目优化"><a href="#四、项目优化" class="headerlink" title="四、项目优化"></a>四、项目优化</h1><h2 id="1-开启gzip"><a href="#1-开启gzip" class="headerlink" title="1. 开启gzip"></a>1. 开启gzip</h2><p>gzip 可以减少文件的大小，且兼容性也好，参考：<a href="https://segmentfault.com/a/1190000012800222">探索HTTP传输中gzip压缩的秘密</a></p>
<p>安装插件：</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -D compression-webpack-plugin
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>安装之后在<code>vue-config.js</code> 中引入插件</p>
<pre class="line-numbers language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// ...</span>
  configureWebpack<span class="token punctuation">:</span> <span class="token punctuation">(</span>webpackConfig<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">===</span> <span class="token string">'production'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>
          <span class="token keyword">new</span> <span class="token class-name">CompressionPlugin</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            test<span class="token punctuation">:</span>  <span class="token regex">/\.js$|\.html$|\.css$|\.jpg$|\.jpeg$|\.png/</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 需要压缩的文件类型</span>
            threshold<span class="token punctuation">:</span> <span class="token number">10240</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 归档需要进行压缩的文件大小最小值，当前设置10K</span>
            deleteOriginalAssets<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token comment" spellcheck="true">// 是否删除原文件</span>
          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
        <span class="token punctuation">]</span>
      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//...</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="2-拆分代码"><a href="#2-拆分代码" class="headerlink" title="2. 拆分代码"></a>2. 拆分代码</h2><p><code>webpack-cli4</code> 基于<code>webpack 4</code> 进行构建，因此可以利用<code>webpack</code>的<code>splitChunks</code>进行代码拆分</p>
<pre class="line-numbers language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
  optimization<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    splitChunks<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
      chunks<span class="token punctuation">:</span> <span class="token string">'async'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//表示将选择哪些块进行优化。提供字符串时，有效值为all、async和initial,默认是仅对异步加载的块进行分割。</span>
      minSize<span class="token punctuation">:</span> <span class="token number">30000</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//模块大于minSize时才会被分割出来。</span>
      maxSize<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//生成的块的最大大小，如果超过了这个限制，大块会被拆分成多个小块。</span>
      minChunks<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//拆分前必须共享模块的最小块数。</span>
      maxAsyncRequests<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//按需加载时并行请求的最大数目。</span>
      maxInitialRequests<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//入口点的最大并行请求数</span>
      automaticNameDelimiter<span class="token punctuation">:</span> <span class="token string">'~'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//默认情况下，webpack将使用块的来源和名称（例如vendors~main.js）生成名称。此选项允许您指定要用于生成的名称的分隔符。</span>
      automaticNameMaxLength<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//允许为SplitChunksPlugin生成的块名称的最大长度</span>
      cacheGroups<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        cacheGroups<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
         swiper<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            name<span class="token punctuation">:</span> <span class="token string">'chunk-swiper'</span><span class="token punctuation">,</span>
            test<span class="token punctuation">:</span> <span class="token regex">/[\\/]node_modules[\\/]swiper[\\/]/</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//控制此缓存组选择的模块。省略它将选择所有模块。它可以匹配绝对模块资源路径或块名称。匹配块名称时，将选择块中的所有模块。</span>
            chunks<span class="token punctuation">:</span> <span class="token string">'all'</span><span class="token punctuation">,</span>
            priority<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
            reuseExistingChunk<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
            enforce<span class="token punctuation">:</span> <span class="token boolean">true</span>
          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
          vant<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            name<span class="token punctuation">:</span> <span class="token string">'chunk-vant'</span><span class="token punctuation">,</span>
            test<span class="token punctuation">:</span> <span class="token regex">/[\\/]node_modules[\\/]vant[\\/]/</span><span class="token punctuation">,</span>
            chunks<span class="token punctuation">:</span> <span class="token string">'all'</span><span class="token punctuation">,</span>
            priority<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
            reuseExistingChunk<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
            enforce<span class="token punctuation">:</span> <span class="token boolean">true</span>
          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
          videojs<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            name<span class="token punctuation">:</span> <span class="token string">'chunk-videojs'</span><span class="token punctuation">,</span>
            test<span class="token punctuation">:</span> <span class="token regex">/[\\/]node_modules[\\/](video\.js)|(videojs-contrib-hls)[\\/]/</span><span class="token punctuation">,</span>
            chunks<span class="token punctuation">:</span> <span class="token string">'all'</span><span class="token punctuation">,</span>
            priority<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
            reuseExistingChunk<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
            enforce<span class="token punctuation">:</span> <span class="token boolean">true</span>
          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
          utils<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            name<span class="token punctuation">:</span> <span class="token string">'chunk-utils'</span><span class="token punctuation">,</span>
            test<span class="token punctuation">:</span> <span class="token regex">/[\\/]node_modules[\\/](crypto-js)|(md5\.js)|(core-js)|(axios)[\\/]/</span><span class="token punctuation">,</span>
            chunks<span class="token punctuation">:</span> <span class="token string">'all'</span><span class="token punctuation">,</span>
            priority<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
            reuseExistingChunk<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
            enforce<span class="token punctuation">:</span> <span class="token boolean">true</span>
          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
        <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
          minChunks<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
          priority<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span>
          reuseExistingChunk<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token comment" spellcheck="true">//如果当前块包含已经从主包中分离出来的模块，那么该模块将被重用，而不是生成新的模块</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>splitChunks 常用参数:</p>
<ul>
<li>name 打包的 chunks 的名字</li>
<li>test 匹配到的模块奖杯打进这个缓存组</li>
<li>chunks 代码块类型 必须三选一： “initial”（初始化） | “all”(默认就是 all) | “async”（动态加载）默认 Webpack 4 只会对按需加载的代码做分割。如果我们需要配置初始加载的代码也加入到代码分割中，可以设置为 ‘all’</li>
<li>priority ：缓存组打包的先后优先级，数值大的优先</li>
<li>minSize （默认是30000）形成一个新代码块最小的体积</li>
<li>minChunks （默认是1）在分割之前，这个代码块最小应该被引用的次数</li>
<li>maxInitialRequests （默认是3）一个入口最大的并行请求数</li>
<li>maxAsyncRequests（默认是5）按需加载时候最大的并行请求数</li>
<li>reuseExistingChunk 如果当前的 chunk 已被从 split 出来，那么将会直接复用这个 chunk 而不是重新创建一个</li>
<li>enforce 告诉 webpack 忽略 splitChunks.minSize, splitChunks.minChunks, splitChunks.maxAsyncRequests and splitChunks.maxInitialRequests，总是为这个缓存组创建 chunks</li>
</ul>
<h2 id="3-配置-analyzer，分析打包后的文件"><a href="#3-配置-analyzer，分析打包后的文件" class="headerlink" title="3. 配置 analyzer，分析打包后的文件"></a>3. 配置 analyzer，分析打包后的文件</h2><p>下载插件：</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -D webpack-bundle-analyzer
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>在<code>vue.config.js</code>中引入插件</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> BundleAnalyzerPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack-bundle-analyzer'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>BundleAnalyzerPlugin<span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
  configureWebpack<span class="token punctuation">:</span> <span class="token punctuation">(</span>webpackConfig<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">===</span> <span class="token string">'production'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
          plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>
            <span class="token keyword">new</span> <span class="token class-name">BundleAnalyzerPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
          <span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在<code>package.json</code> 中配置<code>script</code></p>
<pre class="line-numbers language-json"><code class="language-json">&amp;#<span class="token number">123</span><span class="token punctuation">;</span>
  <span class="token property">"scripts"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token property">"analyz"</span><span class="token operator">:</span> <span class="token string">"npm_config_report=true npm run build"</span>
  &amp;#<span class="token number">125</span><span class="token punctuation">;</span>
&amp;#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>执行 <code>npm run analyz</code> 就能帮我们分析包的大小了</p>
<p><img src="https://cdn.jsdelivr.net/gh/wakenhong/cdn/images/2021/202110131205635.png" alt="打包后文件分析"></p>
<h2 id="4-将一些配置抽成可配项，单独存放一个文件，类似于-cli2-9-中的config"><a href="#4-将一些配置抽成可配项，单独存放一个文件，类似于-cli2-9-中的config" class="headerlink" title="4. 将一些配置抽成可配项，单独存放一个文件，类似于 cli2.9 中的config"></a>4. 将一些配置抽成可配项，单独存放一个文件，类似于 <code>cli2.9</code> 中的config</h2><p>在根目录下新建 <code>config/index.js</code></p>
<pre class="line-numbers language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
  publicPath<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`/`</span></span><span class="token punctuation">,</span>
  outputDir<span class="token punctuation">:</span> <span class="token string">'news'</span><span class="token punctuation">,</span>
  htmlTitle<span class="token punctuation">:</span> <span class="token string">'方正翔宇'</span><span class="token punctuation">,</span>
  dev<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    proxyTable<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
      <span class="token string">'/app_if'</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        target<span class="token punctuation">:</span> <span class="token string">'http://api-xiangyu.test1.fzyun.cn/'</span><span class="token punctuation">,</span>
        changeOrigin<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        pathRewrite<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
          <span class="token comment" spellcheck="true">// '^/app_if': ''</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
  build<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 是否开启sourceMap</span>
    productionSourceMap<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token comment" spellcheck="true">// 是否开启gzip压缩</span>
    productionGzip<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    productionGzipExtensions<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'js'</span><span class="token punctuation">,</span> <span class="token string">'css'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token comment" spellcheck="true">// npm run build --report</span>
    <span class="token comment" spellcheck="true">// Set to `true` or `false` to always turn it on or off</span>
    bundleAnalyzerReport<span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>npm_config_report
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>vue.config.js</code> 完整配置</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./config'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> CompressionPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'compression-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> BundleAnalyzerPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack-bundle-analyzer'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>BundleAnalyzerPlugin<span class="token punctuation">;</span>

<span class="token keyword">const</span> resolve <span class="token operator">=</span> <span class="token punctuation">(</span>dir<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> dir<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> htmlTitle <span class="token operator">=</span> config<span class="token punctuation">.</span>htmlTitle<span class="token punctuation">;</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
  publicPath<span class="token punctuation">:</span> config<span class="token punctuation">.</span>publicPath<span class="token punctuation">,</span>
  <span class="token comment" spellcheck="true">// lintOnSave: false,</span>
  outputDir<span class="token punctuation">:</span> config<span class="token punctuation">.</span>outputDir<span class="token punctuation">,</span>
  productionSourceMap<span class="token punctuation">:</span> config<span class="token punctuation">.</span>build<span class="token punctuation">.</span>productionSourceMap<span class="token punctuation">,</span>
  devServer<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    proxy<span class="token punctuation">:</span> config<span class="token punctuation">.</span>dev<span class="token punctuation">.</span>proxyTable <span class="token operator">||</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
  lintOnSave<span class="token punctuation">:</span> <span class="token string">'default'</span><span class="token punctuation">,</span>
  configureWebpack<span class="token punctuation">:</span> <span class="token punctuation">(</span>webpackConfig<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">===</span> <span class="token string">'production'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>build<span class="token punctuation">.</span>productionGzip<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        webpackConfig<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>
          <span class="token keyword">new</span> <span class="token class-name">CompressionPlugin</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            test<span class="token punctuation">:</span>  <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>
                <span class="token string">'\\.('</span> <span class="token operator">+</span>
                config<span class="token punctuation">.</span>build<span class="token punctuation">.</span>productionGzipExtensions<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'|'</span><span class="token punctuation">)</span> <span class="token operator">+</span>
                <span class="token string">')$'</span>
              <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 需要压缩的文件类型</span>
            threshold<span class="token punctuation">:</span> <span class="token number">10240</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 归档需要进行压缩的文件大小最小值，当前设置10K</span>
            deleteOriginalAssets<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token comment" spellcheck="true">// 是否删除原文件</span>
          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span>
      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>build<span class="token punctuation">.</span>bundleAnalyzerReport<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        webpackConfig<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BundleAnalyzerPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        optimization<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
          splitChunks<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            maxInitialRequests<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span>
            cacheGroups<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
              swiper<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                name<span class="token punctuation">:</span> <span class="token string">'chunk-swiper'</span><span class="token punctuation">,</span>
                test<span class="token punctuation">:</span> <span class="token regex">/[\\/]node_modules[\\/]swiper[\\/]/</span><span class="token punctuation">,</span>
                chunks<span class="token punctuation">:</span> <span class="token string">'all'</span><span class="token punctuation">,</span>
                priority<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
                reuseExistingChunk<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
                enforce<span class="token punctuation">:</span> <span class="token boolean">true</span>
              <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
              vant<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                name<span class="token punctuation">:</span> <span class="token string">'chunk-vant'</span><span class="token punctuation">,</span>
                test<span class="token punctuation">:</span> <span class="token regex">/[\\/]node_modules[\\/]vant[\\/]/</span><span class="token punctuation">,</span>
                chunks<span class="token punctuation">:</span> <span class="token string">'all'</span><span class="token punctuation">,</span>
                priority<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
                reuseExistingChunk<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
                enforce<span class="token punctuation">:</span> <span class="token boolean">true</span>
              <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
              videojs<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                name<span class="token punctuation">:</span> <span class="token string">'chunk-videojs'</span><span class="token punctuation">,</span>
                test<span class="token punctuation">:</span> <span class="token regex">/[\\/]node_modules[\\/](video\.js)|(videojs-contrib-hls)[\\/]/</span><span class="token punctuation">,</span>
                chunks<span class="token punctuation">:</span> <span class="token string">'all'</span><span class="token punctuation">,</span>
                priority<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
                reuseExistingChunk<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
                enforce<span class="token punctuation">:</span> <span class="token boolean">true</span>
              <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
              utils<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                name<span class="token punctuation">:</span> <span class="token string">'chunk-utils'</span><span class="token punctuation">,</span>
                test<span class="token punctuation">:</span> <span class="token regex">/[\\/]node_modules[\\/](crypto-js)|(md5\.js)|(core-js)|(axios)[\\/]/</span><span class="token punctuation">,</span>
                chunks<span class="token punctuation">:</span> <span class="token string">'all'</span><span class="token punctuation">,</span>
                priority<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
                reuseExistingChunk<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
                enforce<span class="token punctuation">:</span> <span class="token boolean">true</span>
              <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
  css<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    extract<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    sourceMap<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    requireModuleExtension<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    loaderOptions<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
      sass<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        prependData<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`
          @import "~@/assets/style/vars.sass"
          @import "~@/assets/style/mixin.sass"
        `</span></span>
      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
      scss<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        prependData<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`
          @import "~@/assets/style/vars.sass";
          @import "~@/assets/style/mixin.sass";
        `</span></span>
      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
  chainWebpack<span class="token punctuation">:</span> config <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    config
      <span class="token punctuation">.</span>resolve<span class="token punctuation">.</span>alias
      <span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'@'</span><span class="token punctuation">,</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">,</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'src/http/axios.js'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'@common'</span><span class="token punctuation">,</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'src/common'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'@util'</span><span class="token punctuation">,</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'src/assets/js/util.js'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    config
      <span class="token punctuation">.</span>module
      <span class="token punctuation">.</span><span class="token function">rule</span><span class="token punctuation">(</span><span class="token string">'images'</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'url-loader'</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">loader</span><span class="token punctuation">(</span><span class="token string">'url-loader'</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span>options <span class="token operator">=</span><span class="token operator">></span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> limit<span class="token punctuation">:</span> <span class="token number">1000</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    config
      <span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">'html'</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span>args <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>title <span class="token operator">=</span> htmlTitle <span class="token operator">||</span> <span class="token string">''</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> args<span class="token punctuation">;</span>
      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> config<span class="token punctuation">;</span>
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue webpack @vue/cli</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/googlee322b95c7bae36a8.html</url>
    <content><![CDATA[google-site-verification: googlee322b95c7bae36a8.html]]></content>
  </entry>
  <entry>
    <title>404</title>
    <url>/404/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>关于</title>
    <url>/about/index.html</url>
    <content><![CDATA[<p>关于我：</p>
]]></content>
  </entry>
  <entry>
    <title>分类</title>
    <url>/categories/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>友情链接</title>
    <url>/friends/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>相册</title>
    <url>/galleries/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>navigate</title>
    <url>/navigate/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/scripts/auto_open.js</url>
    <content><![CDATA[var spawn = require('child_process').exec;

// Hexo 2.x 用户复制这段
//hexo.on('new', function(path){
  //spawn('start  "markdown编辑器绝对路径.exe" ' + path);
//});

// Hexo 3 用户复制这段
hexo.on('new', function(data){
  spawn('start  "D:\software\Typora\Typora.exe" ' + data.path);
});]]></content>
  </entry>
  <entry>
    <title>标签</title>
    <url>/tags/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>2021</title>
    <url>/galleries/2021/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>private</title>
    <url>/galleries/private/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
